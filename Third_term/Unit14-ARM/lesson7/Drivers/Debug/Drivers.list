
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e8  080005f0  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e8  080005e8  000105f0  2**0
                  CONTENTS
  4 .ARM          00000000  080005e8  080005e8  000105f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e8  080005f0  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e8  080005e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  080005f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080005f0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fc6  00000000  00000000  00010619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f6  00000000  00000000  000115df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000006e8  00000000  00000000  00011ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  000121c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  00012308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033f1  00000000  00000000  00012418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d3c  00000000  00000000  00015809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000101c8  00000000  00000000  00017545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002770d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d8  00000000  00000000  00027760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005d0 	.word	0x080005d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005d0 	.word	0x080005d0

08000170 <PendSV_Handler>:
//ARM Lesson7 final lab2 & lab3

int volatile IRQ_Flag;
int IPSR_out;

void PendSV_Handler(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <OS_SVC>:
void OS_SVC(int* stack_frame)
{
 800017c:	b480      	push	{r7}
 800017e:	b087      	sub	sp, #28
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,PC,XPSR
	unsigned char SVC_number;
	unsigned int val1,val2;
	val1 = stack_frame[0];
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	617b      	str	r3, [r7, #20]
	val2 =stack_frame[1];
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3304      	adds	r3, #4
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	613b      	str	r3, [r7, #16]
	SVC_number = *((unsigned char*)(((unsigned char*)stack_frame[6])-2));
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	3318      	adds	r3, #24
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3b02      	subs	r3, #2
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	2b03      	cmp	r3, #3
 80001a2:	d828      	bhi.n	80001f6 <OS_SVC+0x7a>
 80001a4:	a201      	add	r2, pc, #4	; (adr r2, 80001ac <OS_SVC+0x30>)
 80001a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001aa:	bf00      	nop
 80001ac:	080001bd 	.word	0x080001bd
 80001b0:	080001cb 	.word	0x080001cb
 80001b4:	080001d9 	.word	0x080001d9
 80001b8:	080001e9 	.word	0x080001e9
	{
	case 0:
		stack_frame[0]= val1 + val2;
 80001bc:	697a      	ldr	r2, [r7, #20]
 80001be:	693b      	ldr	r3, [r7, #16]
 80001c0:	4413      	add	r3, r2
 80001c2:	461a      	mov	r2, r3
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	601a      	str	r2, [r3, #0]
		break;
 80001c8:	e015      	b.n	80001f6 <OS_SVC+0x7a>
	case 1:
		stack_frame[0]= val1 - val2;
 80001ca:	697a      	ldr	r2, [r7, #20]
 80001cc:	693b      	ldr	r3, [r7, #16]
 80001ce:	1ad3      	subs	r3, r2, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]
		break;
 80001d6:	e00e      	b.n	80001f6 <OS_SVC+0x7a>
	case 2:
		stack_frame[0]= val1 * val2;
 80001d8:	697b      	ldr	r3, [r7, #20]
 80001da:	693a      	ldr	r2, [r7, #16]
 80001dc:	fb02 f303 	mul.w	r3, r2, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	601a      	str	r2, [r3, #0]
		break;
 80001e6:	e006      	b.n	80001f6 <OS_SVC+0x7a>
	case 3:
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <OS_SVC+0x84>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <OS_SVC+0x84>)
 80001ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001f2:	6053      	str	r3, [r2, #4]
		break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	371c      	adds	r7, #28
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <SVC_Handler>:

__attribute((naked)) void SVC_Handler()
{
	__asm("TST LR,#4 \n\t"
 8000204:	f01e 0f04 	tst.w	lr, #4
 8000208:	bf0c      	ite	eq
 800020a:	f3ef 8008 	mrseq	r0, MSP
 800020e:	f3ef 8009 	mrsne	r0, PSP
 8000212:	f7ff bfb3 	b.w	800017c <OS_SVC>
			"ITE EQ \n\t"
			"mrseq R0,MSP \n\t"
			"mrsne R0,PSP \n\t"
			"B OS_SVC");

}
 8000216:	bf00      	nop

08000218 <OS_SVC_Set>:

int OS_SVC_Set(int a,int b, int SVC_ID)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	int return_val;
	switch(SVC_ID)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b03      	cmp	r3, #3
 8000228:	d812      	bhi.n	8000250 <OS_SVC_Set+0x38>
 800022a:	a201      	add	r2, pc, #4	; (adr r2, 8000230 <OS_SVC_Set+0x18>)
 800022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000230:	08000241 	.word	0x08000241
 8000234:	08000245 	.word	0x08000245
 8000238:	08000249 	.word	0x08000249
 800023c:	0800024d 	.word	0x0800024d
	{
	case 0:
		__asm("SVC #0x00");
 8000240:	df00      	svc	0
		break;
 8000242:	e005      	b.n	8000250 <OS_SVC_Set+0x38>
	case 1:
		__asm("SVC #0x01");
 8000244:	df01      	svc	1
		break;
 8000246:	e003      	b.n	8000250 <OS_SVC_Set+0x38>
	case 2:
		__asm("SVC #0x02");
 8000248:	df02      	svc	2
		break;
 800024a:	e001      	b.n	8000250 <OS_SVC_Set+0x38>
	case 3:
		__asm("SVC #0x03");
 800024c:	df03      	svc	3
		break;
 800024e:	bf00      	nop
	}

	__asm("MOV %0,R0":"=r"(return_val));
 8000250:	4603      	mov	r3, r0
 8000252:	617b      	str	r3, [r7, #20]
	return return_val;
 8000254:	697b      	ldr	r3, [r7, #20]
}
 8000256:	4618      	mov	r0, r3
 8000258:	371c      	adds	r7, #28
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <main>:

int main()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0

	//enable clocks
	RCC_GPIOB_CLK_EN();
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <main+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <main+0x70>)
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <main+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <main+0x70>)
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <main+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <main+0x70>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6193      	str	r3, [r2, #24]

	int result;
	result = OS_SVC_Set(3,3, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2103      	movs	r1, #3
 800028e:	2003      	movs	r0, #3
 8000290:	f7ff ffc2 	bl	8000218 <OS_SVC_Set>
 8000294:	6078      	str	r0, [r7, #4]
	result = OS_SVC_Set(3,3, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2103      	movs	r1, #3
 800029a:	2003      	movs	r0, #3
 800029c:	f7ff ffbc 	bl	8000218 <OS_SVC_Set>
 80002a0:	6078      	str	r0, [r7, #4]
	result = OS_SVC_Set(3,3, 2);
 80002a2:	2202      	movs	r2, #2
 80002a4:	2103      	movs	r1, #3
 80002a6:	2003      	movs	r0, #3
 80002a8:	f7ff ffb6 	bl	8000218 <OS_SVC_Set>
 80002ac:	6078      	str	r0, [r7, #4]
	OS_SVC_Set(3,3, 3);
 80002ae:	2203      	movs	r2, #3
 80002b0:	2103      	movs	r1, #3
 80002b2:	2003      	movs	r0, #3
 80002b4:	f7ff ffb0 	bl	8000218 <OS_SVC_Set>
	IRQ_Flag =1;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <main+0x74>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <main+0x74>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0fb      	beq.n	80002be <main+0x5e>
		{

			IRQ_Flag=0;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <main+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80002cc:	e7f7      	b.n	80002be <main+0x5e>
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f93f 	bl	8000588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ffa9 	bl	8000260 <main>

0800030e <LoopForever>:

LoopForever:
    b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	080005f0 	.word	0x080005f0
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	20000060 	.word	0x20000060

08000328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC1_2_IRQHandler>
	...

0800032c <EXTI0_IRQHandler>:


//******************    ISR Functions       ***//////////////

void EXTI0_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <EXTI0_IRQHandler+0x1c>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <EXTI0_IRQHandler+0x1c>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <EXTI0_IRQHandler+0x20>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4798      	blx	r3
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010400 	.word	0x40010400
 800034c:	20000020 	.word	0x20000020

08000350 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI1_IRQHandler+0x1c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI1_IRQHandler+0x1c>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI1_IRQHandler+0x20>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	20000020 	.word	0x20000020

08000374 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <EXTI2_IRQHandler+0x1c>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <EXTI2_IRQHandler+0x1c>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <EXTI2_IRQHandler+0x20>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4798      	blx	r3
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400
 8000394:	20000020 	.word	0x20000020

08000398 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI3_IRQHandler+0x1c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI3_IRQHandler+0x1c>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <EXTI3_IRQHandler+0x20>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4798      	blx	r3
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010400 	.word	0x40010400
 80003b8:	20000020 	.word	0x20000020

080003bc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <EXTI4_IRQHandler+0x1c>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <EXTI4_IRQHandler+0x1c>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <EXTI4_IRQHandler+0x20>)
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	4798      	blx	r3
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010400 	.word	0x40010400
 80003dc:	20000020 	.word	0x20000020

080003e0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) { EXTI->PR |= (1<<5);  GP_IRQ_CallBack[5](); };
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d008      	beq.n	8000402 <EXTI9_5_IRQHandler+0x22>
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a22      	ldr	r2, [pc, #136]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6153      	str	r3, [r2, #20]
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <EXTI9_5_IRQHandler+0xa4>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |= (1<<6);  GP_IRQ_CallBack[6](); };
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800040a:	2b00      	cmp	r3, #0
 800040c:	d008      	beq.n	8000420 <EXTI9_5_IRQHandler+0x40>
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <EXTI9_5_IRQHandler+0xa4>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |= (1<<7);  GP_IRQ_CallBack[7](); };
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000428:	2b00      	cmp	r3, #0
 800042a:	d008      	beq.n	800043e <EXTI9_5_IRQHandler+0x5e>
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a13      	ldr	r2, [pc, #76]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000436:	6153      	str	r3, [r2, #20]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <EXTI9_5_IRQHandler+0xa4>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |= (1<<8);  GP_IRQ_CallBack[8](); };
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000446:	2b00      	cmp	r3, #0
 8000448:	d008      	beq.n	800045c <EXTI9_5_IRQHandler+0x7c>
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 8000450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <EXTI9_5_IRQHandler+0xa4>)
 8000458:	6a1b      	ldr	r3, [r3, #32]
 800045a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |= (1<<9);  GP_IRQ_CallBack[9](); };
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000464:	2b00      	cmp	r3, #0
 8000466:	d008      	beq.n	800047a <EXTI9_5_IRQHandler+0x9a>
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <EXTI9_5_IRQHandler+0xa0>)
 800046e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000472:	6153      	str	r3, [r2, #20]
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <EXTI9_5_IRQHandler+0xa4>)
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	4798      	blx	r3
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010400 	.word	0x40010400
 8000484:	20000020 	.word	0x20000020

08000488 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) { EXTI->PR |= (1<<10);  GP_IRQ_CallBack[10](); };
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000494:	2b00      	cmp	r3, #0
 8000496:	d008      	beq.n	80004aa <EXTI15_10_IRQHandler+0x22>
 8000498:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a29      	ldr	r2, [pc, #164]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 800049e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004a2:	6153      	str	r3, [r2, #20]
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <EXTI15_10_IRQHandler+0xc0>)
 80004a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a8:	4798      	blx	r3
	if(EXTI->PR & 1<<11) { EXTI->PR |= (1<<11);  GP_IRQ_CallBack[11](); };
 80004aa:	4b26      	ldr	r3, [pc, #152]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d008      	beq.n	80004c8 <EXTI15_10_IRQHandler+0x40>
 80004b6:	4b23      	ldr	r3, [pc, #140]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a22      	ldr	r2, [pc, #136]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b21      	ldr	r3, [pc, #132]	; (8000548 <EXTI15_10_IRQHandler+0xc0>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c6:	4798      	blx	r3
	if(EXTI->PR & 1<<12) { EXTI->PR |= (1<<12);  GP_IRQ_CallBack[12](); };
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d008      	beq.n	80004e6 <EXTI15_10_IRQHandler+0x5e>
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a1a      	ldr	r2, [pc, #104]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004de:	6153      	str	r3, [r2, #20]
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <EXTI15_10_IRQHandler+0xc0>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e4:	4798      	blx	r3
	if(EXTI->PR & 1<<13) { EXTI->PR |= (1<<13);  GP_IRQ_CallBack[13](); };
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d008      	beq.n	8000504 <EXTI15_10_IRQHandler+0x7c>
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a13      	ldr	r2, [pc, #76]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 80004f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <EXTI15_10_IRQHandler+0xc0>)
 8000500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000502:	4798      	blx	r3
	if(EXTI->PR & 1<<14) { EXTI->PR |= (1<<14);  GP_IRQ_CallBack[14](); };
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d008      	beq.n	8000522 <EXTI15_10_IRQHandler+0x9a>
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051a:	6153      	str	r3, [r2, #20]
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <EXTI15_10_IRQHandler+0xc0>)
 800051e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000520:	4798      	blx	r3
	if(EXTI->PR & 1<<15) { EXTI->PR |= (1<<15);  GP_IRQ_CallBack[15](); };
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800052a:	2b00      	cmp	r3, #0
 800052c:	d008      	beq.n	8000540 <EXTI15_10_IRQHandler+0xb8>
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a04      	ldr	r2, [pc, #16]	; (8000544 <EXTI15_10_IRQHandler+0xbc>)
 8000534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b03      	ldr	r3, [pc, #12]	; (8000548 <EXTI15_10_IRQHandler+0xc0>)
 800053c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053e:	4798      	blx	r3
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40010400 	.word	0x40010400
 8000548:	20000020 	.word	0x20000020

0800054c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

	Gp_UART_config->P_IRQ_callback() ;
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <USART1_IRQHandler+0x10>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	4798      	blx	r3

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000005c 	.word	0x2000005c

08000560 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	Gp_UART_config->P_IRQ_callback()  ;
 8000564:	4b02      	ldr	r3, [pc, #8]	; (8000570 <USART2_IRQHandler+0x10>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	4798      	blx	r3

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000005c 	.word	0x2000005c

08000574 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	Gp_UART_config->P_IRQ_callback()  ;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <USART3_IRQHandler+0x10>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	4798      	blx	r3


}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000005c 	.word	0x2000005c

08000588 <__libc_init_array>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	2600      	movs	r6, #0
 800058c:	4d0c      	ldr	r5, [pc, #48]	; (80005c0 <__libc_init_array+0x38>)
 800058e:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <__libc_init_array+0x3c>)
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	42a6      	cmp	r6, r4
 8000596:	d109      	bne.n	80005ac <__libc_init_array+0x24>
 8000598:	f000 f81a 	bl	80005d0 <_init>
 800059c:	2600      	movs	r6, #0
 800059e:	4d0a      	ldr	r5, [pc, #40]	; (80005c8 <__libc_init_array+0x40>)
 80005a0:	4c0a      	ldr	r4, [pc, #40]	; (80005cc <__libc_init_array+0x44>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	42a6      	cmp	r6, r4
 80005a8:	d105      	bne.n	80005b6 <__libc_init_array+0x2e>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b0:	4798      	blx	r3
 80005b2:	3601      	adds	r6, #1
 80005b4:	e7ee      	b.n	8000594 <__libc_init_array+0xc>
 80005b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ba:	4798      	blx	r3
 80005bc:	3601      	adds	r6, #1
 80005be:	e7f2      	b.n	80005a6 <__libc_init_array+0x1e>
 80005c0:	080005e8 	.word	0x080005e8
 80005c4:	080005e8 	.word	0x080005e8
 80005c8:	080005e8 	.word	0x080005e8
 80005cc:	080005ec 	.word	0x080005ec

080005d0 <_init>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr

080005dc <_fini>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr
