
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab4  08000ab4  00010abc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab4  08000ab4  00010abc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab4  08000abc  00010abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab4  08000ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ab8  08000ab8  00010ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000abc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000abc  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010abc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ced  00000000  00000000  00010ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d7  00000000  00000000  000117d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000670  00000000  00000000  00011ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00012220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  00012348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002285  00000000  00000000  00012438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b73  00000000  00000000  000146bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096cc  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001f8fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000037c  00000000  00000000  0001f94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a90 	.word	0x08000a90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a90 	.word	0x08000a90

08000170 <EXTI9_callBack>:
	RCC_GPIOB_CLK_EN();
}*/
unsigned int IRQ_Flag = 0;

void EXTI9_callBack(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI9_callBack+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000001c 	.word	0x2000001c

08000188 <main>:

int main()
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b088      	sub	sp, #32
 800018c:	af00      	add	r7, sp, #0
	//enable clocks
	RCC_GPIOB_CLK_EN();
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <main+0x5c>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <main+0x5c>)
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 800019a:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <main+0x5c>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a11      	ldr	r2, [pc, #68]	; (80001e4 <main+0x5c>)
 80001a0:	f043 0301 	orr.w	r3, r3, #1
 80001a4:	6193      	str	r3, [r2, #24]


	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 80001a6:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <main+0x60>)
 80001a8:	f107 030c 	add.w	r3, r7, #12
 80001ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80001ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.trigger_Case = EXTI_trigger_rising ;
 80001b2:	2300      	movs	r3, #0
 80001b4:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_callBack;
 80001b6:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <main+0x64>)
 80001b8:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IQR_ENB = EXTI_IRQ_enable;
 80001ba:	2301      	movs	r3, #1
 80001bc:	767b      	strb	r3, [r7, #25]
    Mcal_EXTI_GPIO_init(&EXTI_CFG);
 80001be:	f107 030c 	add.w	r3, r7, #12
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f9f0 	bl	80005a8 <Mcal_EXTI_GPIO_init>

    __asm("nop \n\t nop ");
 80001c8:	bf00      	nop
 80001ca:	bf00      	nop

    IRQ_Flag =1;
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <main+0x68>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <main+0x68>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d0fb      	beq.n	80001d2 <main+0x4a>
		{
			//LCD_clear_screen();
			IRQ_Flag=0;
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <main+0x68>)
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80001e0:	e7f7      	b.n	80001d2 <main+0x4a>
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000
 80001e8:	08000aa8 	.word	0x08000aa8
 80001ec:	08000171 	.word	0x08000171
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f4:	480d      	ldr	r0, [pc, #52]	; (800022c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <LoopForever+0x6>)
  ldr r1, =_edata
 80001fe:	490d      	ldr	r1, [pc, #52]	; (8000234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <LoopForever+0xe>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000204:	e002      	b.n	800020c <LoopCopyDataInit>

08000206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020a:	3304      	adds	r3, #4

0800020c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800020c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000210:	d3f9      	bcc.n	8000206 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000214:	4c0a      	ldr	r4, [pc, #40]	; (8000240 <LoopForever+0x16>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000218:	e001      	b.n	800021e <LoopFillZerobss>

0800021a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800021c:	3204      	adds	r2, #4

0800021e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000220:	d3fb      	bcc.n	800021a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000222:	f000 fc11 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000226:	f7ff ffaf 	bl	8000188 <main>

0800022a <LoopForever>:

LoopForever:
    b LoopForever
 800022a:	e7fe      	b.n	800022a <LoopForever>
  ldr   r0, =_estack
 800022c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000234:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000238:	08000abc 	.word	0x08000abc
  ldr r2, =_sbss
 800023c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000240:	2000005c 	.word	0x2000005c

08000244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000244:	e7fe      	b.n	8000244 <ADC1_2_IRQHandler>
	...

08000248 <Enable_NVIC>:
 void (*GP_IRQ_CallBack[15])(void );

 //////////////Generic functions:///////////////////////
////************
void Enable_NVIC(uint16_t IRQ_num)
 {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ_num)
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	2b0e      	cmp	r3, #14
 8000256:	d852      	bhi.n	80002fe <Enable_NVIC+0xb6>
 8000258:	a201      	add	r2, pc, #4	; (adr r2, 8000260 <Enable_NVIC+0x18>)
 800025a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025e:	bf00      	nop
 8000260:	0800029d 	.word	0x0800029d
 8000264:	080002ab 	.word	0x080002ab
 8000268:	080002b9 	.word	0x080002b9
 800026c:	080002c7 	.word	0x080002c7
 8000270:	080002d5 	.word	0x080002d5
 8000274:	080002e3 	.word	0x080002e3
 8000278:	080002e3 	.word	0x080002e3
 800027c:	080002e3 	.word	0x080002e3
 8000280:	080002e3 	.word	0x080002e3
 8000284:	080002e3 	.word	0x080002e3
 8000288:	080002f1 	.word	0x080002f1
 800028c:	080002f1 	.word	0x080002f1
 8000290:	080002f1 	.word	0x080002f1
 8000294:	080002f1 	.word	0x080002f1
 8000298:	080002f1 	.word	0x080002f1
	 {
	 case 0 :
		 NVIC_EXTI0_IRQ_Enable;
 800029c:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <Enable_NVIC+0xc0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a19      	ldr	r2, [pc, #100]	; (8000308 <Enable_NVIC+0xc0>)
 80002a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a6:	6013      	str	r3, [r2, #0]
		 break;
 80002a8:	e029      	b.n	80002fe <Enable_NVIC+0xb6>
	 case 1 :
	 		 NVIC_EXTI1_IRQ_Enable;
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <Enable_NVIC+0xc0>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a16      	ldr	r2, [pc, #88]	; (8000308 <Enable_NVIC+0xc0>)
 80002b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b4:	6013      	str	r3, [r2, #0]
	 		 break;
 80002b6:	e022      	b.n	80002fe <Enable_NVIC+0xb6>
	 case 2 :
	 		 NVIC_EXTI2_IRQ_Enable;
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <Enable_NVIC+0xc0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a12      	ldr	r2, [pc, #72]	; (8000308 <Enable_NVIC+0xc0>)
 80002be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c2:	6013      	str	r3, [r2, #0]
	 		 break;
 80002c4:	e01b      	b.n	80002fe <Enable_NVIC+0xb6>
	 case 3 :
	 		 NVIC_EXTI3_IRQ_Enable;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <Enable_NVIC+0xc0>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <Enable_NVIC+0xc0>)
 80002cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d0:	6013      	str	r3, [r2, #0]
	 		 break;
 80002d2:	e014      	b.n	80002fe <Enable_NVIC+0xb6>
	 case 4 :
			 NVIC_EXTI3_IRQ_Enable;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <Enable_NVIC+0xc0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <Enable_NVIC+0xc0>)
 80002da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002de:	6013      	str	r3, [r2, #0]
			 break;
 80002e0:	e00d      	b.n	80002fe <Enable_NVIC+0xb6>
	 case 5 :
	 case 6 :
	 case 7 :
	 case 8 :
	 case 9 :
		    NVIC_EXTI10_5_IRQ_Enable ;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <Enable_NVIC+0xc0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a08      	ldr	r2, [pc, #32]	; (8000308 <Enable_NVIC+0xc0>)
 80002e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002ec:	6013      	str	r3, [r2, #0]
		    break;
 80002ee:	e006      	b.n	80002fe <Enable_NVIC+0xb6>
	 case 10 :
	 case 11 :
	 case 12 :
	 case 13 :
	 case 14 :
		    NVIC_EXTI15_10_IRQ_Enable ;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <Enable_NVIC+0xc4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <Enable_NVIC+0xc4>)
 80002f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fa:	6013      	str	r3, [r2, #0]
		    break;
 80002fc:	bf00      	nop
	 }
 }
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000e104 	.word	0xe000e104

08000310 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ_num)
 {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ_num)
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	2b0e      	cmp	r3, #14
 800031e:	d852      	bhi.n	80003c6 <Disable_NVIC+0xb6>
 8000320:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <Disable_NVIC+0x18>)
 8000322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000326:	bf00      	nop
 8000328:	08000365 	.word	0x08000365
 800032c:	08000373 	.word	0x08000373
 8000330:	08000381 	.word	0x08000381
 8000334:	0800038f 	.word	0x0800038f
 8000338:	0800039d 	.word	0x0800039d
 800033c:	080003ab 	.word	0x080003ab
 8000340:	080003ab 	.word	0x080003ab
 8000344:	080003ab 	.word	0x080003ab
 8000348:	080003ab 	.word	0x080003ab
 800034c:	080003ab 	.word	0x080003ab
 8000350:	080003b9 	.word	0x080003b9
 8000354:	080003b9 	.word	0x080003b9
 8000358:	080003b9 	.word	0x080003b9
 800035c:	080003b9 	.word	0x080003b9
 8000360:	080003b9 	.word	0x080003b9
	 {
	 case 0 :
		 NVIC_EXTI0_IRQ_Disable;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <Disable_NVIC+0xc0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <Disable_NVIC+0xc0>)
 800036a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800036e:	6013      	str	r3, [r2, #0]
		 break;
 8000370:	e029      	b.n	80003c6 <Disable_NVIC+0xb6>
	 case 1 :
	 		 NVIC_EXTI1_IRQ_Disable;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <Disable_NVIC+0xc0>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <Disable_NVIC+0xc0>)
 8000378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037c:	6013      	str	r3, [r2, #0]
	 		 break;
 800037e:	e022      	b.n	80003c6 <Disable_NVIC+0xb6>
	 case 2 :
	 		 NVIC_EXTI2_IRQ_Disable;
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <Disable_NVIC+0xc0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <Disable_NVIC+0xc0>)
 8000386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038a:	6013      	str	r3, [r2, #0]
	 		 break;
 800038c:	e01b      	b.n	80003c6 <Disable_NVIC+0xb6>
	 case 3 :
	 		 NVIC_EXTI3_IRQ_Disable;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <Disable_NVIC+0xc0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <Disable_NVIC+0xc0>)
 8000394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000398:	6013      	str	r3, [r2, #0]
	 		 break;
 800039a:	e014      	b.n	80003c6 <Disable_NVIC+0xb6>
	 case 4 :
			 NVIC_EXTI3_IRQ_Disable;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <Disable_NVIC+0xc0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <Disable_NVIC+0xc0>)
 80003a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a6:	6013      	str	r3, [r2, #0]
			 break;
 80003a8:	e00d      	b.n	80003c6 <Disable_NVIC+0xb6>
	 case 5 :
	 case 6 :
	 case 7 :
	 case 8 :
	 case 9 :
		     NVIC_EXTI9_5_IRQ_Disable ;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <Disable_NVIC+0xc0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <Disable_NVIC+0xc0>)
 80003b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003b4:	6013      	str	r3, [r2, #0]
		     break;
 80003b6:	e006      	b.n	80003c6 <Disable_NVIC+0xb6>
	 case 10 :
	 case 11 :
	 case 12 :
	 case 13 :
	 case 14 :
		 	 NVIC_EXTI15_10_IRQ_Disable ;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <Disable_NVIC+0xc4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <Disable_NVIC+0xc4>)
 80003be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c2:	6013      	str	r3, [r2, #0]
		     break;
 80003c4:	bf00      	nop
	 }
 }
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	e000e180 	.word	0xe000e180
 80003d4:	e000e184 	.word	0xe000e184

080003d8 <update_EXTI>:
////**********

             //////////////Generic functions:///////////////////////
//-*-*-*-*-*-*-*-*-*-*-*-
void update_EXTI(EXTI_PinConfig_t * EXTI_pinconfig)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PINCONFIG;

	//1- configure GPIO pin to be  floating input

	PINCONFIG.GPIO_PinNumber = EXTI_pinconfig->EXTI_PIN.GPIO_PIN;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	891b      	ldrh	r3, [r3, #8]
 80003e4:	813b      	strh	r3, [r7, #8]
	PINCONFIG.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003e6:	2301      	movs	r3, #1
 80003e8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_pinconfig->EXTI_PIN.GPIO_Port, &PINCONFIG);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 faab 	bl	8000950 <MCAL_GPIO_Init>

	//2- UPDATE AFIO to route between EXTI line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber/4 ;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	089b      	lsrs	r3, r3, #2
 8000400:	b29b      	uxth	r3, r3
 8000402:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber % 4)  *  4;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f003 0303 	and.w	r3, r3, #3
 800040e:	b2db      	uxtb	r3, r3
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	73bb      	strb	r3, [r7, #14]
	//clear the 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xf << AFIO_EXTICR_Position) ;
 8000414:	4a5d      	ldr	r2, [pc, #372]	; (800058c <update_EXTI+0x1b4>)
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	3302      	adds	r3, #2
 800041a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	210f      	movs	r1, #15
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	43db      	mvns	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	4958      	ldr	r1, [pc, #352]	; (800058c <update_EXTI+0x1b4>)
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	4002      	ands	r2, r0
 8000430:	3302      	adds	r3, #2
 8000432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ( ( AFIO_GPIO_Mapping(EXTI_pinconfig->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Position );
 8000436:	4a55      	ldr	r2, [pc, #340]	; (800058c <update_EXTI+0x1b4>)
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	3302      	adds	r3, #2
 800043c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4952      	ldr	r1, [pc, #328]	; (8000590 <update_EXTI+0x1b8>)
 8000446:	428b      	cmp	r3, r1
 8000448:	d016      	beq.n	8000478 <update_EXTI+0xa0>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	4951      	ldr	r1, [pc, #324]	; (8000594 <update_EXTI+0x1bc>)
 8000450:	428b      	cmp	r3, r1
 8000452:	d00f      	beq.n	8000474 <update_EXTI+0x9c>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	494f      	ldr	r1, [pc, #316]	; (8000598 <update_EXTI+0x1c0>)
 800045a:	428b      	cmp	r3, r1
 800045c:	d008      	beq.n	8000470 <update_EXTI+0x98>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	494e      	ldr	r1, [pc, #312]	; (800059c <update_EXTI+0x1c4>)
 8000464:	428b      	cmp	r3, r1
 8000466:	d101      	bne.n	800046c <update_EXTI+0x94>
 8000468:	2303      	movs	r3, #3
 800046a:	e006      	b.n	800047a <update_EXTI+0xa2>
 800046c:	2300      	movs	r3, #0
 800046e:	e004      	b.n	800047a <update_EXTI+0xa2>
 8000470:	2302      	movs	r3, #2
 8000472:	e002      	b.n	800047a <update_EXTI+0xa2>
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <update_EXTI+0xa2>
 8000478:	2300      	movs	r3, #0
 800047a:	7bb9      	ldrb	r1, [r7, #14]
 800047c:	408b      	lsls	r3, r1
 800047e:	4618      	mov	r0, r3
 8000480:	4942      	ldr	r1, [pc, #264]	; (800058c <update_EXTI+0x1b4>)
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	4302      	orrs	r2, r0
 8000486:	3302      	adds	r3, #2
 8000488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3-update EXTI registers   falling or rising trigger

	EXTI->RTSR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 800048c:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <update_EXTI+0x1c8>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	43d2      	mvns	r2, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a40      	ldr	r2, [pc, #256]	; (80005a0 <update_EXTI+0x1c8>)
 80004a0:	400b      	ands	r3, r1
 80004a2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80004a4:	4b3e      	ldr	r3, [pc, #248]	; (80005a0 <update_EXTI+0x1c8>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a3a      	ldr	r2, [pc, #232]	; (80005a0 <update_EXTI+0x1c8>)
 80004b8:	400b      	ands	r3, r1
 80004ba:	60d3      	str	r3, [r2, #12]

	if(EXTI_pinconfig->trigger_Case ==EXTI_trigger_rising)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7b1b      	ldrb	r3, [r3, #12]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d10b      	bne.n	80004dc <update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80004c4:	4b36      	ldr	r3, [pc, #216]	; (80005a0 <update_EXTI+0x1c8>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	8812      	ldrh	r2, [r2, #0]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a32      	ldr	r2, [pc, #200]	; (80005a0 <update_EXTI+0x1c8>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6093      	str	r3, [r2, #8]
 80004da:	e025      	b.n	8000528 <update_EXTI+0x150>
	}else if(EXTI_pinconfig->trigger_Case ==EXTI_trigger_falling)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7b1b      	ldrb	r3, [r3, #12]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10b      	bne.n	80004fc <update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <update_EXTI+0x1c8>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	8812      	ldrh	r2, [r2, #0]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	4a2a      	ldr	r2, [pc, #168]	; (80005a0 <update_EXTI+0x1c8>)
 80004f6:	430b      	orrs	r3, r1
 80004f8:	60d3      	str	r3, [r2, #12]
 80004fa:	e015      	b.n	8000528 <update_EXTI+0x150>
	}else
	{
		EXTI->RTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <update_EXTI+0x1c8>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	8812      	ldrh	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	4611      	mov	r1, r2
 800050c:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <update_EXTI+0x1c8>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <update_EXTI+0x1c8>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	8812      	ldrh	r2, [r2, #0]
 800051a:	4611      	mov	r1, r2
 800051c:	2201      	movs	r2, #1
 800051e:	408a      	lsls	r2, r1
 8000520:	4611      	mov	r1, r2
 8000522:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <update_EXTI+0x1c8>)
 8000524:	430b      	orrs	r3, r1
 8000526:	60d3      	str	r3, [r2, #12]
	}

	//4- Update IRQ Handling CAllBack
	GP_IRQ_CallBack[EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber] = EXTI_pinconfig->P_IRQ_CallBack ;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <update_EXTI+0x1cc>)
 8000534:	f842 3021 	str.w	r3, [r2, r1, lsl #2]



	//5-enable /disable IRQ  from EXTI and NVIC
	if(EXTI_pinconfig->IQR_ENB == EXTI_IRQ_enable)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7b5b      	ldrb	r3, [r3, #13]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d110      	bne.n	8000562 <update_EXTI+0x18a>
	{
		EXTI->IMR |=(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <update_EXTI+0x1c8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <update_EXTI+0x1c8>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fe74 	bl	8000248 <Enable_NVIC>
		EXTI->IMR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
	}


}
 8000560:	e010      	b.n	8000584 <update_EXTI+0x1ac>
		EXTI->IMR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <update_EXTI+0x1c8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	8812      	ldrh	r2, [r2, #0]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <update_EXTI+0x1c8>)
 8000576:	400b      	ands	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fec6 	bl	8000310 <Disable_NVIC>
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010000 	.word	0x40010000
 8000590:	40010800 	.word	0x40010800
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40011000 	.word	0x40011000
 800059c:	40011400 	.word	0x40011400
 80005a0:	40010400 	.word	0x40010400
 80005a4:	20000020 	.word	0x20000020

080005a8 <Mcal_EXTI_GPIO_init>:
 * @param [in]            -EXTI_pinconfig: set by @ref EXTI_define  and EXTI IRQ define
 * @retval                -NONE
 * Note                   -mandatory to enable RCC clock for AFIO and the corresponding GPIO(A,B,C,D)
 */
void Mcal_EXTI_GPIO_init(EXTI_PinConfig_t * EXTI_pinconfig)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	update_EXTI(EXTI_pinconfig);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ff11 	bl	80003d8 <update_EXTI>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <EXTI0_IRQHandler>:


//******************    ISR Functions       ***//////////////

void EXTI0_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <EXTI0_IRQHandler+0x1c>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <EXTI0_IRQHandler+0x1c>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <EXTI0_IRQHandler+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4798      	blx	r3
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010400 	.word	0x40010400
 80005e0:	20000020 	.word	0x20000020

080005e4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <EXTI1_IRQHandler+0x1c>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <EXTI1_IRQHandler+0x1c>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <EXTI1_IRQHandler+0x20>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4798      	blx	r3
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010400 	.word	0x40010400
 8000604:	20000020 	.word	0x20000020

08000608 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI2_IRQHandler+0x1c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI2_IRQHandler+0x1c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <EXTI2_IRQHandler+0x20>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	4798      	blx	r3
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	20000020 	.word	0x20000020

0800062c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <EXTI3_IRQHandler+0x1c>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <EXTI3_IRQHandler+0x1c>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <EXTI3_IRQHandler+0x20>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4798      	blx	r3
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010400 	.word	0x40010400
 800064c:	20000020 	.word	0x20000020

08000650 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI4_IRQHandler+0x1c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <EXTI4_IRQHandler+0x1c>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <EXTI4_IRQHandler+0x20>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	4798      	blx	r3
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010400 	.word	0x40010400
 8000670:	20000020 	.word	0x20000020

08000674 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) { EXTI->PR |= (1<<5);  GP_IRQ_CallBack[5](); };
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <EXTI9_5_IRQHandler+0x22>
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	6153      	str	r3, [r2, #20]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |= (1<<6);  GP_IRQ_CallBack[6](); };
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d008      	beq.n	80006b4 <EXTI9_5_IRQHandler+0x40>
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |= (1<<7);  GP_IRQ_CallBack[7](); };
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <EXTI9_5_IRQHandler+0x5e>
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a13      	ldr	r2, [pc, #76]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ca:	6153      	str	r3, [r2, #20]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |= (1<<8);  GP_IRQ_CallBack[8](); };
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <EXTI9_5_IRQHandler+0x7c>
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |= (1<<9);  GP_IRQ_CallBack[9](); };
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <EXTI9_5_IRQHandler+0x9a>
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 8000702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000706:	6153      	str	r3, [r2, #20]
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070c:	4798      	blx	r3
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40010400 	.word	0x40010400
 8000718:	20000020 	.word	0x20000020

0800071c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) { EXTI->PR |= (1<<10);  GP_IRQ_CallBack[10](); };
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <EXTI15_10_IRQHandler+0x22>
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 800073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) { EXTI->PR |= (1<<11);  GP_IRQ_CallBack[11](); };
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <EXTI15_10_IRQHandler+0x40>
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) { EXTI->PR |= (1<<12);  GP_IRQ_CallBack[12](); };
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <EXTI15_10_IRQHandler+0x5e>
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800076e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000772:	6153      	str	r3, [r2, #20]
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4798      	blx	r3
	if(EXTI->PR & 1<<13) { EXTI->PR |= (1<<13);  GP_IRQ_CallBack[13](); };
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d008      	beq.n	8000798 <EXTI15_10_IRQHandler+0x7c>
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800078c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 8000794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000796:	4798      	blx	r3
	if(EXTI->PR & 1<<14) { EXTI->PR |= (1<<14);  GP_IRQ_CallBack[14](); };
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d008      	beq.n	80007b6 <EXTI15_10_IRQHandler+0x9a>
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6153      	str	r3, [r2, #20]
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 80007b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) { EXTI->PR |= (1<<15);  GP_IRQ_CallBack[15](); };
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d008      	beq.n	80007d4 <EXTI15_10_IRQHandler+0xb8>
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b03      	ldr	r3, [pc, #12]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 80007d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d2:	4798      	blx	r3
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40010400 	.word	0x40010400
 80007dc:	20000020 	.word	0x20000020

080007e0 <Get_CRLH_Position>:
#include "stm32_f103x6.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007f0:	f000 80a5 	beq.w	800093e <Get_CRLH_Position+0x15e>
 80007f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007f8:	f300 80a3 	bgt.w	8000942 <Get_CRLH_Position+0x162>
 80007fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000800:	f000 809b 	beq.w	800093a <Get_CRLH_Position+0x15a>
 8000804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000808:	f300 809b 	bgt.w	8000942 <Get_CRLH_Position+0x162>
 800080c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000810:	f000 8091 	beq.w	8000936 <Get_CRLH_Position+0x156>
 8000814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000818:	f300 8093 	bgt.w	8000942 <Get_CRLH_Position+0x162>
 800081c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000820:	f000 8087 	beq.w	8000932 <Get_CRLH_Position+0x152>
 8000824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000828:	f300 808b 	bgt.w	8000942 <Get_CRLH_Position+0x162>
 800082c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000830:	d07d      	beq.n	800092e <Get_CRLH_Position+0x14e>
 8000832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000836:	f300 8084 	bgt.w	8000942 <Get_CRLH_Position+0x162>
 800083a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800083e:	d074      	beq.n	800092a <Get_CRLH_Position+0x14a>
 8000840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000844:	dc7d      	bgt.n	8000942 <Get_CRLH_Position+0x162>
 8000846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800084a:	d06c      	beq.n	8000926 <Get_CRLH_Position+0x146>
 800084c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000850:	dc77      	bgt.n	8000942 <Get_CRLH_Position+0x162>
 8000852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000856:	d064      	beq.n	8000922 <Get_CRLH_Position+0x142>
 8000858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800085c:	dc71      	bgt.n	8000942 <Get_CRLH_Position+0x162>
 800085e:	2b80      	cmp	r3, #128	; 0x80
 8000860:	d05d      	beq.n	800091e <Get_CRLH_Position+0x13e>
 8000862:	2b80      	cmp	r3, #128	; 0x80
 8000864:	dc6d      	bgt.n	8000942 <Get_CRLH_Position+0x162>
 8000866:	2b20      	cmp	r3, #32
 8000868:	dc48      	bgt.n	80008fc <Get_CRLH_Position+0x11c>
 800086a:	2b00      	cmp	r3, #0
 800086c:	dd69      	ble.n	8000942 <Get_CRLH_Position+0x162>
 800086e:	3b01      	subs	r3, #1
 8000870:	2b1f      	cmp	r3, #31
 8000872:	d866      	bhi.n	8000942 <Get_CRLH_Position+0x162>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <Get_CRLH_Position+0x9c>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	08000903 	.word	0x08000903
 8000880:	08000907 	.word	0x08000907
 8000884:	08000943 	.word	0x08000943
 8000888:	0800090b 	.word	0x0800090b
 800088c:	08000943 	.word	0x08000943
 8000890:	08000943 	.word	0x08000943
 8000894:	08000943 	.word	0x08000943
 8000898:	0800090f 	.word	0x0800090f
 800089c:	08000943 	.word	0x08000943
 80008a0:	08000943 	.word	0x08000943
 80008a4:	08000943 	.word	0x08000943
 80008a8:	08000943 	.word	0x08000943
 80008ac:	08000943 	.word	0x08000943
 80008b0:	08000943 	.word	0x08000943
 80008b4:	08000943 	.word	0x08000943
 80008b8:	08000913 	.word	0x08000913
 80008bc:	08000943 	.word	0x08000943
 80008c0:	08000943 	.word	0x08000943
 80008c4:	08000943 	.word	0x08000943
 80008c8:	08000943 	.word	0x08000943
 80008cc:	08000943 	.word	0x08000943
 80008d0:	08000943 	.word	0x08000943
 80008d4:	08000943 	.word	0x08000943
 80008d8:	08000943 	.word	0x08000943
 80008dc:	08000943 	.word	0x08000943
 80008e0:	08000943 	.word	0x08000943
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000943 	.word	0x08000943
 80008ec:	08000943 	.word	0x08000943
 80008f0:	08000943 	.word	0x08000943
 80008f4:	08000943 	.word	0x08000943
 80008f8:	08000917 	.word	0x08000917
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	d00c      	beq.n	800091a <Get_CRLH_Position+0x13a>
 8000900:	e01f      	b.n	8000942 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000902:	2300      	movs	r3, #0
 8000904:	e01e      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000906:	2304      	movs	r3, #4
 8000908:	e01c      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800090a:	2308      	movs	r3, #8
 800090c:	e01a      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800090e:	230c      	movs	r3, #12
 8000910:	e018      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000912:	2310      	movs	r3, #16
 8000914:	e016      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000916:	2314      	movs	r3, #20
 8000918:	e014      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 800091a:	2318      	movs	r3, #24
 800091c:	e012      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800091e:	231c      	movs	r3, #28
 8000920:	e010      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000922:	2300      	movs	r3, #0
 8000924:	e00e      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000926:	2304      	movs	r3, #4
 8000928:	e00c      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 800092a:	2308      	movs	r3, #8
 800092c:	e00a      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800092e:	230c      	movs	r3, #12
 8000930:	e008      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000932:	2310      	movs	r3, #16
 8000934:	e006      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000936:	2314      	movs	r3, #20
 8000938:	e004      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 800093a:	2318      	movs	r3, #24
 800093c:	e002      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800093e:	231c      	movs	r3, #28
 8000940:	e000      	b.n	8000944 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <MCAL_GPIO_Init>:



void MCAL_GPIO_Init(GPIO_Typedef_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	volatile uint32_t * configRegister = NULL;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG =0;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
	configRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2bff      	cmp	r3, #255	; 0xff
 8000968:	d801      	bhi.n	800096e <MCAL_GPIO_Init+0x1e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	e001      	b.n	8000972 <MCAL_GPIO_Init+0x22>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3304      	adds	r3, #4
 8000972:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE[1:0]
	* configRegister &= ~(0xF << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff31 	bl	80007e0 <Get_CRLH_Position>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	230f      	movs	r3, #15
 8000984:	4093      	lsls	r3, r2
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	401a      	ands	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	789b      	ldrb	r3, [r3, #2]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d00b      	beq.n	80009b2 <MCAL_GPIO_Init+0x62>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	789b      	ldrb	r3, [r3, #2]
 800099e:	2b05      	cmp	r3, #5
 80009a0:	d007      	beq.n	80009b2 <MCAL_GPIO_Init+0x62>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d003      	beq.n	80009b2 <MCAL_GPIO_Init+0x62>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	d10e      	bne.n	80009d0 <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0] MODE[]
		PIN_CONFIG = ( ((PinConfig->GPIO_MODE - 4) << 2)| ((PinConfig->GPIO_OUTPUT_SPEED)  & 0x0F)) ;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	789b      	ldrb	r3, [r3, #2]
 80009b6:	3b04      	subs	r3, #4
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	b25a      	sxtb	r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	78db      	ldrb	r3, [r3, #3]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e029      	b.n	8000a24 <MCAL_GPIO_Init+0xd4>
	//if pin in input
	//00 MODE[1:0]: Input mode (reset state)
	//we set CANF[1:0]
	else
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) )
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <MCAL_GPIO_Init+0x90>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	789b      	ldrb	r3, [r3, #2]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d104      	bne.n	80009ea <MCAL_GPIO_Init+0x9a>
		{
			PIN_CONFIG = (((PinConfig->GPIO_MODE) <<2 ) | (0x0 & 0x0F)) ;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	789b      	ldrb	r3, [r3, #2]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e01c      	b.n	8000a24 <MCAL_GPIO_Init+0xd4>
			//*(configRegister) |= (PinConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
		}
		else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))  //consider pin is  input flowting
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	2b08      	cmp	r3, #8
 80009f0:	d102      	bne.n	80009f8 <MCAL_GPIO_Init+0xa8>
		{
			PIN_CONFIG = ( ((GPIO_MODE_INPUT_FLO) <<2 ) | (0x0 & 0x0F)) ;
 80009f2:	2304      	movs	r3, #4
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e015      	b.n	8000a24 <MCAL_GPIO_Init+0xd4>
			//*(configRegister) |= (PinConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
		}
		else   //pin is PU   PD input
		{
			PIN_CONFIG = (((GPIO_MODE_INPUT_PU) << 2) |(0x0 & 0x0f));
 80009f8:	2308      	movs	r3, #8
 80009fa:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE ==GPIO_MODE_INPUT_PU )
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d107      	bne.n	8000a14 <MCAL_GPIO_Init+0xc4>
			{
				//PxODR =1 input pull up ,tale 20
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	8812      	ldrh	r2, [r2, #0]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	e007      	b.n	8000a24 <MCAL_GPIO_Init+0xd4>
			}else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;      //pin is input pull down
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	8812      	ldrh	r2, [r2, #0]
 8000a1c:	43d2      	mvns	r2, r2
 8000a1e:	401a      	ands	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configRegister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a24:	7bfc      	ldrb	r4, [r7, #15]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fed8 	bl	80007e0 <Get_CRLH_Position>
 8000a30:	4603      	mov	r3, r0
 8000a32:	fa04 f203 	lsl.w	r2, r4, r3
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	601a      	str	r2, [r3, #0]

}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	4d0c      	ldr	r5, [pc, #48]	; (8000a80 <__libc_init_array+0x38>)
 8000a4e:	4c0d      	ldr	r4, [pc, #52]	; (8000a84 <__libc_init_array+0x3c>)
 8000a50:	1b64      	subs	r4, r4, r5
 8000a52:	10a4      	asrs	r4, r4, #2
 8000a54:	42a6      	cmp	r6, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	f000 f81a 	bl	8000a90 <_init>
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	4d0a      	ldr	r5, [pc, #40]	; (8000a88 <__libc_init_array+0x40>)
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <__libc_init_array+0x44>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a70:	4798      	blx	r3
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7a:	4798      	blx	r3
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	08000ab4 	.word	0x08000ab4
 8000a84:	08000ab4 	.word	0x08000ab4
 8000a88:	08000ab4 	.word	0x08000ab4
 8000a8c:	08000ab8 	.word	0x08000ab8

08000a90 <_init>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr

08000a9c <_fini>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr
