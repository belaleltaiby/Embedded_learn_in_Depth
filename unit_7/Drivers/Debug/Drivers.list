
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000df0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000f20  08000f20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f44  08000f44  00010f4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f44  08000f44  00010f4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f44  08000f4c  00010f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000f4c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000f4c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e84  00000000  00000000  00010f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009c0  00000000  00000000  00014df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009c0  00000000  00000000  000157b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00016180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00016340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024fa  00000000  00000000  000164a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000282e  00000000  00000000  000189a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009633  00000000  00000000  0001b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024803  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000548  00000000  00000000  00024880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f08 	.word	0x08000f08

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f08 	.word	0x08000f08

08000170 <delay_ms>:



#include "LCD.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_INIT>:

void LCD_INIT()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PCFG->GPIO_PinNumber = EN_SWITCH;
 80001ac:	4b71      	ldr	r3, [pc, #452]	; (8000374 <LCD_INIT+0x1cc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001b4:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80001b6:	4b6f      	ldr	r3, [pc, #444]	; (8000374 <LCD_INIT+0x1cc>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2204      	movs	r2, #4
 80001bc:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001be:	4b6d      	ldr	r3, [pc, #436]	; (8000374 <LCD_INIT+0x1cc>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2201      	movs	r2, #1
 80001c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80001c6:	4b6b      	ldr	r3, [pc, #428]	; (8000374 <LCD_INIT+0x1cc>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4619      	mov	r1, r3
 80001cc:	486a      	ldr	r0, [pc, #424]	; (8000378 <LCD_INIT+0x1d0>)
 80001ce:	f000 fdd6 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber = RS_SWITCH;
 80001d2:	4b68      	ldr	r3, [pc, #416]	; (8000374 <LCD_INIT+0x1cc>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001da:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80001dc:	4b65      	ldr	r3, [pc, #404]	; (8000374 <LCD_INIT+0x1cc>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2204      	movs	r2, #4
 80001e2:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001e4:	4b63      	ldr	r3, [pc, #396]	; (8000374 <LCD_INIT+0x1cc>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2201      	movs	r2, #1
 80001ea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80001ec:	4b61      	ldr	r3, [pc, #388]	; (8000374 <LCD_INIT+0x1cc>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4861      	ldr	r0, [pc, #388]	; (8000378 <LCD_INIT+0x1d0>)
 80001f4:	f000 fdc3 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber = RW_SWITCH;
 80001f8:	4b5e      	ldr	r3, [pc, #376]	; (8000374 <LCD_INIT+0x1cc>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000200:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000202:	4b5c      	ldr	r3, [pc, #368]	; (8000374 <LCD_INIT+0x1cc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2204      	movs	r2, #4
 8000208:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800020a:	4b5a      	ldr	r3, [pc, #360]	; (8000374 <LCD_INIT+0x1cc>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000212:	4b58      	ldr	r3, [pc, #352]	; (8000374 <LCD_INIT+0x1cc>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4619      	mov	r1, r3
 8000218:	4857      	ldr	r0, [pc, #348]	; (8000378 <LCD_INIT+0x1d0>)
 800021a:	f000 fdb0 	bl	8000d7e <MCAL_GPIO_Init>

	delay_ms(50);
 800021e:	2032      	movs	r0, #50	; 0x32
 8000220:	f7ff ffa6 	bl	8000170 <delay_ms>

	PCFG->GPIO_PinNumber    = GPIO_PIN_0;
 8000224:	4b53      	ldr	r3, [pc, #332]	; (8000374 <LCD_INIT+0x1cc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2201      	movs	r2, #1
 800022a:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 800022c:	4b51      	ldr	r3, [pc, #324]	; (8000374 <LCD_INIT+0x1cc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2204      	movs	r2, #4
 8000232:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000234:	4b4f      	ldr	r3, [pc, #316]	; (8000374 <LCD_INIT+0x1cc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2201      	movs	r2, #1
 800023a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 800023c:	4b4d      	ldr	r3, [pc, #308]	; (8000374 <LCD_INIT+0x1cc>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4619      	mov	r1, r3
 8000242:	484d      	ldr	r0, [pc, #308]	; (8000378 <LCD_INIT+0x1d0>)
 8000244:	f000 fd9b 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_1;
 8000248:	4b4a      	ldr	r3, [pc, #296]	; (8000374 <LCD_INIT+0x1cc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2202      	movs	r2, #2
 800024e:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000250:	4b48      	ldr	r3, [pc, #288]	; (8000374 <LCD_INIT+0x1cc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2204      	movs	r2, #4
 8000256:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000258:	4b46      	ldr	r3, [pc, #280]	; (8000374 <LCD_INIT+0x1cc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000260:	4b44      	ldr	r3, [pc, #272]	; (8000374 <LCD_INIT+0x1cc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4619      	mov	r1, r3
 8000266:	4844      	ldr	r0, [pc, #272]	; (8000378 <LCD_INIT+0x1d0>)
 8000268:	f000 fd89 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_2;
 800026c:	4b41      	ldr	r3, [pc, #260]	; (8000374 <LCD_INIT+0x1cc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2204      	movs	r2, #4
 8000272:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000274:	4b3f      	ldr	r3, [pc, #252]	; (8000374 <LCD_INIT+0x1cc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2204      	movs	r2, #4
 800027a:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800027c:	4b3d      	ldr	r3, [pc, #244]	; (8000374 <LCD_INIT+0x1cc>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2201      	movs	r2, #1
 8000282:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000284:	4b3b      	ldr	r3, [pc, #236]	; (8000374 <LCD_INIT+0x1cc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4619      	mov	r1, r3
 800028a:	483b      	ldr	r0, [pc, #236]	; (8000378 <LCD_INIT+0x1d0>)
 800028c:	f000 fd77 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_3;
 8000290:	4b38      	ldr	r3, [pc, #224]	; (8000374 <LCD_INIT+0x1cc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2208      	movs	r2, #8
 8000296:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000298:	4b36      	ldr	r3, [pc, #216]	; (8000374 <LCD_INIT+0x1cc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2204      	movs	r2, #4
 800029e:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002a0:	4b34      	ldr	r3, [pc, #208]	; (8000374 <LCD_INIT+0x1cc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2201      	movs	r2, #1
 80002a6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80002a8:	4b32      	ldr	r3, [pc, #200]	; (8000374 <LCD_INIT+0x1cc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	4832      	ldr	r0, [pc, #200]	; (8000378 <LCD_INIT+0x1d0>)
 80002b0:	f000 fd65 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_4;
 80002b4:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <LCD_INIT+0x1cc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2210      	movs	r2, #16
 80002ba:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b2d      	ldr	r3, [pc, #180]	; (8000374 <LCD_INIT+0x1cc>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2204      	movs	r2, #4
 80002c2:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002c4:	4b2b      	ldr	r3, [pc, #172]	; (8000374 <LCD_INIT+0x1cc>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2201      	movs	r2, #1
 80002ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80002cc:	4b29      	ldr	r3, [pc, #164]	; (8000374 <LCD_INIT+0x1cc>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4619      	mov	r1, r3
 80002d2:	4829      	ldr	r0, [pc, #164]	; (8000378 <LCD_INIT+0x1d0>)
 80002d4:	f000 fd53 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_5;
 80002d8:	4b26      	ldr	r3, [pc, #152]	; (8000374 <LCD_INIT+0x1cc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2220      	movs	r2, #32
 80002de:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <LCD_INIT+0x1cc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2204      	movs	r2, #4
 80002e6:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002e8:	4b22      	ldr	r3, [pc, #136]	; (8000374 <LCD_INIT+0x1cc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2201      	movs	r2, #1
 80002ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <LCD_INIT+0x1cc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4619      	mov	r1, r3
 80002f6:	4820      	ldr	r0, [pc, #128]	; (8000378 <LCD_INIT+0x1d0>)
 80002f8:	f000 fd41 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_6;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <LCD_INIT+0x1cc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2240      	movs	r2, #64	; 0x40
 8000302:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <LCD_INIT+0x1cc>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2204      	movs	r2, #4
 800030a:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800030c:	4b19      	ldr	r3, [pc, #100]	; (8000374 <LCD_INIT+0x1cc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2201      	movs	r2, #1
 8000312:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <LCD_INIT+0x1cc>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4619      	mov	r1, r3
 800031a:	4817      	ldr	r0, [pc, #92]	; (8000378 <LCD_INIT+0x1d0>)
 800031c:	f000 fd2f 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_7;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <LCD_INIT+0x1cc>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <LCD_INIT+0x1cc>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2204      	movs	r2, #4
 800032e:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <LCD_INIT+0x1cc>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2201      	movs	r2, #1
 8000336:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <LCD_INIT+0x1cc>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	480e      	ldr	r0, [pc, #56]	; (8000378 <LCD_INIT+0x1d0>)
 8000340:	f000 fd1d 	bl	8000d7e <MCAL_GPIO_Init>

	//Clear screan
	//entry mode
	delay_ms(50);
 8000344:	2032      	movs	r0, #50	; 0x32
 8000346:	f7ff ff13 	bl	8000170 <delay_ms>
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f816 	bl	800037c <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000350:	2038      	movs	r0, #56	; 0x38
 8000352:	f000 f813 	bl	800037c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000356:	2006      	movs	r0, #6
 8000358:	f000 f810 	bl	800037c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800035c:	2080      	movs	r0, #128	; 0x80
 800035e:	f000 f80d 	bl	800037c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000362:	200f      	movs	r0, #15
 8000364:	f000 f80a 	bl	800037c <LCD_WRITE_COMMAND>
	delay_ms(50);
 8000368:	2032      	movs	r0, #50	; 0x32
 800036a:	f7ff ff01 	bl	8000170 <delay_ms>

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000020 	.word	0x20000020
 8000378:	40010800 	.word	0x40010800

0800037c <LCD_WRITE_COMMAND>:



void LCD_WRITE_COMMAND(unsigned char command)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4619      	mov	r1, r3
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <LCD_WRITE_COMMAND+0x38>)
 800038c:	f000 fd73 	bl	8000e76 <MCAL_GPIO_WritePort>

	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <LCD_WRITE_COMMAND+0x38>)
 8000398:	f000 fd7b 	bl	8000e92 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	4804      	ldr	r0, [pc, #16]	; (80003b4 <LCD_WRITE_COMMAND+0x38>)
 80003a4:	f000 fd75 	bl	8000e92 <MCAL_GPIO_WritePin>

	LCD_lcd_kick();
 80003a8:	f000 f8e4 	bl	8000574 <LCD_lcd_kick>

}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010800 	.word	0x40010800

080003b8 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	PCFG->GPIO_PinNumber    = GPIO_PIN_0;
 80003c2:	4b53      	ldr	r3, [pc, #332]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2201      	movs	r2, #1
 80003c8:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80003ca:	4b51      	ldr	r3, [pc, #324]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2204      	movs	r2, #4
 80003d0:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80003d2:	4b4f      	ldr	r3, [pc, #316]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2201      	movs	r2, #1
 80003d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80003da:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	484c      	ldr	r0, [pc, #304]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 80003e2:	f000 fccc 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_1;
 80003e6:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2202      	movs	r2, #2
 80003ec:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80003ee:	4b48      	ldr	r3, [pc, #288]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2204      	movs	r2, #4
 80003f4:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80003f6:	4b46      	ldr	r3, [pc, #280]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2201      	movs	r2, #1
 80003fc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80003fe:	4b44      	ldr	r3, [pc, #272]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4619      	mov	r1, r3
 8000404:	4843      	ldr	r0, [pc, #268]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 8000406:	f000 fcba 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_2;
 800040a:	4b41      	ldr	r3, [pc, #260]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2204      	movs	r2, #4
 8000410:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000412:	4b3f      	ldr	r3, [pc, #252]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2204      	movs	r2, #4
 8000418:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800041a:	4b3d      	ldr	r3, [pc, #244]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2201      	movs	r2, #1
 8000420:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000422:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4619      	mov	r1, r3
 8000428:	483a      	ldr	r0, [pc, #232]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 800042a:	f000 fca8 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_3;
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2208      	movs	r2, #8
 8000434:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2204      	movs	r2, #4
 800043c:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800043e:	4b34      	ldr	r3, [pc, #208]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2201      	movs	r2, #1
 8000444:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	4831      	ldr	r0, [pc, #196]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 800044e:	f000 fc96 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_4;
 8000452:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2210      	movs	r2, #16
 8000458:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2204      	movs	r2, #4
 8000460:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000462:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2201      	movs	r2, #1
 8000468:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 800046a:	4b29      	ldr	r3, [pc, #164]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	4828      	ldr	r0, [pc, #160]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 8000472:	f000 fc84 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_5;
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2220      	movs	r2, #32
 800047c:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2204      	movs	r2, #4
 8000484:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2201      	movs	r2, #1
 800048c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4619      	mov	r1, r3
 8000494:	481f      	ldr	r0, [pc, #124]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 8000496:	f000 fc72 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_6;
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2240      	movs	r2, #64	; 0x40
 80004a0:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2204      	movs	r2, #4
 80004a8:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2201      	movs	r2, #1
 80004b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4816      	ldr	r0, [pc, #88]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 80004ba:	f000 fc60 	bl	8000d7e <MCAL_GPIO_Init>

	PCFG->GPIO_PinNumber    = GPIO_PIN_7;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	801a      	strh	r2, [r3, #0]
	PCFG->GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2204      	movs	r2, #4
 80004cc:	709a      	strb	r2, [r3, #2]
	PCFG->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2201      	movs	r2, #1
 80004d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, PCFG);
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <LCD_WRITE_CHAR+0x158>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4619      	mov	r1, r3
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 80004de:	f000 fc4e 	bl	8000d7e <MCAL_GPIO_Init>


	MCAL_GPIO_WritePort(LCD_CTRL, character);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4619      	mov	r1, r3
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 80004e8:	f000 fcc5 	bl	8000e76 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 80004f4:	f000 fccd 	bl	8000e92 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <LCD_WRITE_CHAR+0x15c>)
 8000500:	f000 fcc7 	bl	8000e92 <MCAL_GPIO_WritePin>

	LCD_lcd_kick();
 8000504:	f000 f836 	bl	8000574 <LCD_lcd_kick>

}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000020 	.word	0x20000020
 8000514:	40010800 	.word	0x40010800

08000518 <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char* string)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	int count=0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
	while(*string > 0){
 8000524:	e01e      	b.n	8000564 <LCD_WRITE_STRING+0x4c>
		count++;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3301      	adds	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	607a      	str	r2, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff3f 	bl	80003b8 <LCD_WRITE_CHAR>
		if(count ==16){
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b10      	cmp	r3, #16
 800053e:	d103      	bne.n	8000548 <LCD_WRITE_STRING+0x30>
			LCD_GOTO_XY(1, 0);
 8000540:	2100      	movs	r1, #0
 8000542:	2001      	movs	r0, #1
 8000544:	f000 f833 	bl	80005ae <LCD_GOTO_XY>
		}
		if(count == 32 || count==33){
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b20      	cmp	r3, #32
 800054c:	d002      	beq.n	8000554 <LCD_WRITE_STRING+0x3c>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b21      	cmp	r3, #33	; 0x21
 8000552:	d107      	bne.n	8000564 <LCD_WRITE_STRING+0x4c>
			LCD_clear_screen();
 8000554:	f000 f824 	bl	80005a0 <LCD_clear_screen>
			LCD_GOTO_XY(0, 0);
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f827 	bl	80005ae <LCD_GOTO_XY>
			count=0;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
	while(*string > 0){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1dc      	bne.n	8000526 <LCD_WRITE_STRING+0xe>
		}
	}
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <LCD_lcd_kick>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
	LCD_lcd_kick();
}
void LCD_lcd_kick(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <LCD_lcd_kick+0x28>)
 8000580:	f000 fc87 	bl	8000e92 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f7ff fdf3 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <LCD_lcd_kick+0x28>)
 8000592:	f000 fc7e 	bl	8000e92 <MCAL_GPIO_WritePin>

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010800 	.word	0x40010800

080005a0 <LCD_clear_screen>:

void LCD_clear_screen()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff fee9 	bl	800037c <LCD_WRITE_COMMAND>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}

080005ae <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	460a      	mov	r2, r1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	4613      	mov	r3, r2
 80005bc:	71bb      	strb	r3, [r7, #6]
	if(line == 0)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d108      	bne.n	80005d6 <LCD_GOTO_XY+0x28>
	{
		if(position < 16 && position >= 0)
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d805      	bhi.n	80005d6 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	3b80      	subs	r3, #128	; 0x80
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fed3 	bl	800037c <LCD_WRITE_COMMAND>
		}
	}

	if(line == 1)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d108      	bne.n	80005ee <LCD_GOTO_XY+0x40>
	{
		if(position < 16 && position >= 0)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	d805      	bhi.n	80005ee <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	3b40      	subs	r3, #64	; 0x40
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fec7 	bl	800037c <LCD_WRITE_COMMAND>
		}
	}
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <wait_ms>:
#include "LCD.h"

unsigned int IRQ_Flag = 0;

void wait_ms(int time)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0; i<time; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e00b      	b.n	800061c <wait_ms+0x26>
	{
		for(j=0; j<255; j++);
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e002      	b.n	8000610 <wait_ms+0x1a>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	3301      	adds	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2bfe      	cmp	r3, #254	; 0xfe
 8000614:	d9f9      	bls.n	800060a <wait_ms+0x14>
	for(i=0; i<time; i++)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d3ef      	bcc.n	8000604 <wait_ms+0xe>
	}
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
	...

08000630 <EXTI9_callBack>:
}
 */


void EXTI9_callBack(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	LCD_clear_screen();
 8000634:	f7ff ffb4 	bl	80005a0 <LCD_clear_screen>
	IRQ_Flag = 1;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI9_callBack+0x20>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 happens -|--");
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <EXTI9_callBack+0x24>)
 8000640:	f7ff ff6a 	bl	8000518 <LCD_WRITE_STRING>
	wait_ms(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f7ff ffd5 	bl	80005f6 <wait_ms>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000001c 	.word	0x2000001c
 8000654:	08000f20 	.word	0x08000f20

08000658 <main>:

int main()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
	//enable clocks
	RCC_GPIOA_CLK_EN();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <main+0x64>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <main+0x64>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <main+0x64>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <main+0x64>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6193      	str	r3, [r2, #24]
	AFIO_GPIOE_CLK_EN();
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <main+0x64>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <main+0x64>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000682:	f7ff fd91 	bl	80001a8 <LCD_INIT>
	//LCD_clear_screen();

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <main+0x68>)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	ca07      	ldmia	r2, {r0, r1, r2}
 800068c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.trigger_Case = EXTI_trigger_rising ;
 8000690:	2300      	movs	r3, #0
 8000692:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_callBack;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <main+0x6c>)
 8000696:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IQR_ENB = EXTI_IRQ_enable;
 8000698:	2301      	movs	r3, #1
 800069a:	747b      	strb	r3, [r7, #17]

	Mcal_EXTI_GPIO_init(&EXTI_CFG);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f9ee 	bl	8000a80 <Mcal_EXTI_GPIO_init>
	IRQ_Flag =1;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <main+0x70>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <main+0x70>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0fb      	beq.n	80006aa <main+0x52>
		{
			//LCD_clear_screen();
			IRQ_Flag=0;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <main+0x70>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80006b8:	e7f7      	b.n	80006aa <main+0x52>
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	08000f38 	.word	0x08000f38
 80006c4:	08000631 	.word	0x08000631
 80006c8:	2000001c 	.word	0x2000001c

080006cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fa:	f000 fbe1 	bl	8000ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff ffab 	bl	8000658 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   r0, =_estack
 8000704:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000710:	08000f4c 	.word	0x08000f4c
  ldr r2, =_sbss
 8000714:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000718:	20000060 	.word	0x20000060

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <Enable_NVIC>:
 void (*GP_IRQ_CallBack[15])(void );

 //////////////Generic functions:///////////////////////
////************
void Enable_NVIC(uint16_t IRQ_num)
 {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ_num)
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b0e      	cmp	r3, #14
 800072e:	d852      	bhi.n	80007d6 <Enable_NVIC+0xb6>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <Enable_NVIC+0x18>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000775 	.word	0x08000775
 800073c:	08000783 	.word	0x08000783
 8000740:	08000791 	.word	0x08000791
 8000744:	0800079f 	.word	0x0800079f
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007bb 	.word	0x080007bb
 8000750:	080007bb 	.word	0x080007bb
 8000754:	080007bb 	.word	0x080007bb
 8000758:	080007bb 	.word	0x080007bb
 800075c:	080007bb 	.word	0x080007bb
 8000760:	080007c9 	.word	0x080007c9
 8000764:	080007c9 	.word	0x080007c9
 8000768:	080007c9 	.word	0x080007c9
 800076c:	080007c9 	.word	0x080007c9
 8000770:	080007c9 	.word	0x080007c9
	 {
	 case 0 :
		 NVIC_EXTI0_IRQ_Enable;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <Enable_NVIC+0xc0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <Enable_NVIC+0xc0>)
 800077a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077e:	6013      	str	r3, [r2, #0]
		 break;
 8000780:	e029      	b.n	80007d6 <Enable_NVIC+0xb6>
	 case 1 :
	 		 NVIC_EXTI1_IRQ_Enable;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <Enable_NVIC+0xc0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <Enable_NVIC+0xc0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6013      	str	r3, [r2, #0]
	 		 break;
 800078e:	e022      	b.n	80007d6 <Enable_NVIC+0xb6>
	 case 2 :
	 		 NVIC_EXTI2_IRQ_Enable;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Enable_NVIC+0xc0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <Enable_NVIC+0xc0>)
 8000796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]
	 		 break;
 800079c:	e01b      	b.n	80007d6 <Enable_NVIC+0xb6>
	 case 3 :
	 		 NVIC_EXTI3_IRQ_Enable;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <Enable_NVIC+0xc0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <Enable_NVIC+0xc0>)
 80007a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a8:	6013      	str	r3, [r2, #0]
	 		 break;
 80007aa:	e014      	b.n	80007d6 <Enable_NVIC+0xb6>
	 case 4 :
			 NVIC_EXTI3_IRQ_Enable;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <Enable_NVIC+0xc0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <Enable_NVIC+0xc0>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	6013      	str	r3, [r2, #0]
			 break;
 80007b8:	e00d      	b.n	80007d6 <Enable_NVIC+0xb6>
	 case 5 :
	 case 6 :
	 case 7 :
	 case 8 :
	 case 9 :
		    NVIC_EXTI10_5_IRQ_Enable ;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <Enable_NVIC+0xc0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <Enable_NVIC+0xc0>)
 80007c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007c4:	6013      	str	r3, [r2, #0]
		    break;
 80007c6:	e006      	b.n	80007d6 <Enable_NVIC+0xb6>
	 case 10 :
	 case 11 :
	 case 12 :
	 case 13 :
	 case 14 :
		    NVIC_EXTI15_10_IRQ_Enable ;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <Enable_NVIC+0xc4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <Enable_NVIC+0xc4>)
 80007ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d2:	6013      	str	r3, [r2, #0]
		    break;
 80007d4:	bf00      	nop
	 }
 }
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000e104 	.word	0xe000e104

080007e8 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ_num)
 {
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ_num)
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	2b0e      	cmp	r3, #14
 80007f6:	d852      	bhi.n	800089e <Disable_NVIC+0xb6>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <Disable_NVIC+0x18>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	0800083d 	.word	0x0800083d
 8000804:	0800084b 	.word	0x0800084b
 8000808:	08000859 	.word	0x08000859
 800080c:	08000867 	.word	0x08000867
 8000810:	08000875 	.word	0x08000875
 8000814:	08000883 	.word	0x08000883
 8000818:	08000883 	.word	0x08000883
 800081c:	08000883 	.word	0x08000883
 8000820:	08000883 	.word	0x08000883
 8000824:	08000883 	.word	0x08000883
 8000828:	08000891 	.word	0x08000891
 800082c:	08000891 	.word	0x08000891
 8000830:	08000891 	.word	0x08000891
 8000834:	08000891 	.word	0x08000891
 8000838:	08000891 	.word	0x08000891
	 {
	 case 0 :
		 NVIC_EXTI0_IRQ_Disable;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <Disable_NVIC+0xc0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <Disable_NVIC+0xc0>)
 8000842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000846:	6013      	str	r3, [r2, #0]
		 break;
 8000848:	e029      	b.n	800089e <Disable_NVIC+0xb6>
	 case 1 :
	 		 NVIC_EXTI1_IRQ_Disable;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <Disable_NVIC+0xc0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <Disable_NVIC+0xc0>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6013      	str	r3, [r2, #0]
	 		 break;
 8000856:	e022      	b.n	800089e <Disable_NVIC+0xb6>
	 case 2 :
	 		 NVIC_EXTI2_IRQ_Disable;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <Disable_NVIC+0xc0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <Disable_NVIC+0xc0>)
 800085e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000862:	6013      	str	r3, [r2, #0]
	 		 break;
 8000864:	e01b      	b.n	800089e <Disable_NVIC+0xb6>
	 case 3 :
	 		 NVIC_EXTI3_IRQ_Disable;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <Disable_NVIC+0xc0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <Disable_NVIC+0xc0>)
 800086c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000870:	6013      	str	r3, [r2, #0]
	 		 break;
 8000872:	e014      	b.n	800089e <Disable_NVIC+0xb6>
	 case 4 :
			 NVIC_EXTI3_IRQ_Disable;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <Disable_NVIC+0xc0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <Disable_NVIC+0xc0>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6013      	str	r3, [r2, #0]
			 break;
 8000880:	e00d      	b.n	800089e <Disable_NVIC+0xb6>
	 case 5 :
	 case 6 :
	 case 7 :
	 case 8 :
	 case 9 :
		     NVIC_EXTI9_5_IRQ_Disable ;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <Disable_NVIC+0xc0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <Disable_NVIC+0xc0>)
 8000888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800088c:	6013      	str	r3, [r2, #0]
		     break;
 800088e:	e006      	b.n	800089e <Disable_NVIC+0xb6>
	 case 10 :
	 case 11 :
	 case 12 :
	 case 13 :
	 case 14 :
		 	 NVIC_EXTI15_10_IRQ_Disable ;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <Disable_NVIC+0xc4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <Disable_NVIC+0xc4>)
 8000896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089a:	6013      	str	r3, [r2, #0]
		     break;
 800089c:	bf00      	nop
	 }
 }
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000e180 	.word	0xe000e180
 80008ac:	e000e184 	.word	0xe000e184

080008b0 <update_EXTI>:
////**********

             //////////////Generic functions:///////////////////////
//-*-*-*-*-*-*-*-*-*-*-*-
void update_EXTI(EXTI_PinConfig_t * EXTI_pinconfig)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PINCONFIG;

	//1- configure GPIO pin to be  floating input

	PINCONFIG.GPIO_PinNumber = EXTI_pinconfig->EXTI_PIN.GPIO_PIN;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	891b      	ldrh	r3, [r3, #8]
 80008bc:	813b      	strh	r3, [r7, #8]
	PINCONFIG.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008be:	2301      	movs	r3, #1
 80008c0:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_pinconfig->EXTI_PIN.GPIO_Port, &PINCONFIG);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f107 0208 	add.w	r2, r7, #8
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fa56 	bl	8000d7e <MCAL_GPIO_Init>

	//2- UPDATE AFIO to route between EXTI line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber/4 ;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber % 4)  *  4;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	73bb      	strb	r3, [r7, #14]
	//clear the 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xf << AFIO_EXTICR_Position) ;
 80008ec:	4a5d      	ldr	r2, [pc, #372]	; (8000a64 <update_EXTI+0x1b4>)
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	3302      	adds	r3, #2
 80008f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	210f      	movs	r1, #15
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	4618      	mov	r0, r3
 8000902:	4958      	ldr	r1, [pc, #352]	; (8000a64 <update_EXTI+0x1b4>)
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	4002      	ands	r2, r0
 8000908:	3302      	adds	r3, #2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ( ( AFIO_GPIO_Mapping(EXTI_pinconfig->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Position );
 800090e:	4a55      	ldr	r2, [pc, #340]	; (8000a64 <update_EXTI+0x1b4>)
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	3302      	adds	r3, #2
 8000914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4952      	ldr	r1, [pc, #328]	; (8000a68 <update_EXTI+0x1b8>)
 800091e:	428b      	cmp	r3, r1
 8000920:	d016      	beq.n	8000950 <update_EXTI+0xa0>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4951      	ldr	r1, [pc, #324]	; (8000a6c <update_EXTI+0x1bc>)
 8000928:	428b      	cmp	r3, r1
 800092a:	d00f      	beq.n	800094c <update_EXTI+0x9c>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	494f      	ldr	r1, [pc, #316]	; (8000a70 <update_EXTI+0x1c0>)
 8000932:	428b      	cmp	r3, r1
 8000934:	d008      	beq.n	8000948 <update_EXTI+0x98>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	494e      	ldr	r1, [pc, #312]	; (8000a74 <update_EXTI+0x1c4>)
 800093c:	428b      	cmp	r3, r1
 800093e:	d101      	bne.n	8000944 <update_EXTI+0x94>
 8000940:	2303      	movs	r3, #3
 8000942:	e006      	b.n	8000952 <update_EXTI+0xa2>
 8000944:	2300      	movs	r3, #0
 8000946:	e004      	b.n	8000952 <update_EXTI+0xa2>
 8000948:	2302      	movs	r3, #2
 800094a:	e002      	b.n	8000952 <update_EXTI+0xa2>
 800094c:	2301      	movs	r3, #1
 800094e:	e000      	b.n	8000952 <update_EXTI+0xa2>
 8000950:	2300      	movs	r3, #0
 8000952:	7bb9      	ldrb	r1, [r7, #14]
 8000954:	408b      	lsls	r3, r1
 8000956:	4618      	mov	r0, r3
 8000958:	4942      	ldr	r1, [pc, #264]	; (8000a64 <update_EXTI+0x1b4>)
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	4302      	orrs	r2, r0
 800095e:	3302      	adds	r3, #2
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3-update EXTI registers   falling or rising trigger

	EXTI->RTSR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <update_EXTI+0x1c8>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	8812      	ldrh	r2, [r2, #0]
 800096c:	4611      	mov	r1, r2
 800096e:	2201      	movs	r2, #1
 8000970:	408a      	lsls	r2, r1
 8000972:	43d2      	mvns	r2, r2
 8000974:	4611      	mov	r1, r2
 8000976:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <update_EXTI+0x1c8>)
 8000978:	400b      	ands	r3, r1
 800097a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <update_EXTI+0x1c8>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	8812      	ldrh	r2, [r2, #0]
 8000984:	4611      	mov	r1, r2
 8000986:	2201      	movs	r2, #1
 8000988:	408a      	lsls	r2, r1
 800098a:	43d2      	mvns	r2, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <update_EXTI+0x1c8>)
 8000990:	400b      	ands	r3, r1
 8000992:	60d3      	str	r3, [r2, #12]

	if(EXTI_pinconfig->trigger_Case ==EXTI_trigger_rising)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7b1b      	ldrb	r3, [r3, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10b      	bne.n	80009b4 <update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <update_EXTI+0x1c8>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	8812      	ldrh	r2, [r2, #0]
 80009a4:	4611      	mov	r1, r2
 80009a6:	2201      	movs	r2, #1
 80009a8:	408a      	lsls	r2, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a32      	ldr	r2, [pc, #200]	; (8000a78 <update_EXTI+0x1c8>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6093      	str	r3, [r2, #8]
 80009b2:	e025      	b.n	8000a00 <update_EXTI+0x150>
	}else if(EXTI_pinconfig->trigger_Case ==EXTI_trigger_falling)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7b1b      	ldrb	r3, [r3, #12]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10b      	bne.n	80009d4 <update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80009bc:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <update_EXTI+0x1c8>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	8812      	ldrh	r2, [r2, #0]
 80009c4:	4611      	mov	r1, r2
 80009c6:	2201      	movs	r2, #1
 80009c8:	408a      	lsls	r2, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <update_EXTI+0x1c8>)
 80009ce:	430b      	orrs	r3, r1
 80009d0:	60d3      	str	r3, [r2, #12]
 80009d2:	e015      	b.n	8000a00 <update_EXTI+0x150>
	}else
	{
		EXTI->RTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <update_EXTI+0x1c8>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	4611      	mov	r1, r2
 80009de:	2201      	movs	r2, #1
 80009e0:	408a      	lsls	r2, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <update_EXTI+0x1c8>)
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <update_EXTI+0x1c8>)
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	8812      	ldrh	r2, [r2, #0]
 80009f2:	4611      	mov	r1, r2
 80009f4:	2201      	movs	r2, #1
 80009f6:	408a      	lsls	r2, r1
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <update_EXTI+0x1c8>)
 80009fc:	430b      	orrs	r3, r1
 80009fe:	60d3      	str	r3, [r2, #12]
	}

	//4- Update IRQ Handling CAllBack
	GP_IRQ_CallBack[EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber] = EXTI_pinconfig->P_IRQ_CallBack ;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <update_EXTI+0x1cc>)
 8000a0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]



	//5-enable /disable IRQ  from EXTI and NVIC
	if(EXTI_pinconfig->IQR_ENB == EXTI_IRQ_enable)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7b5b      	ldrb	r3, [r3, #13]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d110      	bne.n	8000a3a <update_EXTI+0x18a>
	{
		EXTI->IMR |=(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <update_EXTI+0x1c8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	8812      	ldrh	r2, [r2, #0]
 8000a20:	4611      	mov	r1, r2
 8000a22:	2201      	movs	r2, #1
 8000a24:	408a      	lsls	r2, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <update_EXTI+0x1c8>)
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fe74 	bl	8000720 <Enable_NVIC>
		EXTI->IMR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
	}


}
 8000a38:	e010      	b.n	8000a5c <update_EXTI+0x1ac>
		EXTI->IMR &=~(1<<EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <update_EXTI+0x1c8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	8812      	ldrh	r2, [r2, #0]
 8000a42:	4611      	mov	r1, r2
 8000a44:	2201      	movs	r2, #1
 8000a46:	408a      	lsls	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <update_EXTI+0x1c8>)
 8000a4e:	400b      	ands	r3, r1
 8000a50:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_pinconfig->EXTI_PIN.EXTI_InputLineNumber);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fec6 	bl	80007e8 <Disable_NVIC>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40010000 	.word	0x40010000
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	40011000 	.word	0x40011000
 8000a74:	40011400 	.word	0x40011400
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	20000024 	.word	0x20000024

08000a80 <Mcal_EXTI_GPIO_init>:
 * @param [in]            -EXTI_pinconfig: set by @ref EXTI_define  and EXTI IRQ define
 * @retval                -NONE
 * Note                   -mandatory to enable RCC clock for AFIO and the corresponding GPIO(A,B,C,D)
 */
void Mcal_EXTI_GPIO_init(EXTI_PinConfig_t * EXTI_pinconfig)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	update_EXTI(EXTI_pinconfig);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff11 	bl	80008b0 <update_EXTI>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <EXTI0_IRQHandler>:


//******************    ISR Functions       ***//////////////

void EXTI0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <EXTI0_IRQHandler+0x1c>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <EXTI0_IRQHandler+0x1c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <EXTI0_IRQHandler+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4798      	blx	r3
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010400 	.word	0x40010400
 8000ab8:	20000024 	.word	0x20000024

08000abc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <EXTI1_IRQHandler+0x1c>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <EXTI1_IRQHandler+0x1c>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <EXTI1_IRQHandler+0x20>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4798      	blx	r3
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010400 	.word	0x40010400
 8000adc:	20000024 	.word	0x20000024

08000ae0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <EXTI2_IRQHandler+0x1c>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <EXTI2_IRQHandler+0x1c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <EXTI2_IRQHandler+0x20>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4798      	blx	r3
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010400 	.word	0x40010400
 8000b00:	20000024 	.word	0x20000024

08000b04 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI3_IRQHandler+0x1c>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI3_IRQHandler+0x1c>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI3_IRQHandler+0x20>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	4798      	blx	r3
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010400 	.word	0x40010400
 8000b24:	20000024 	.word	0x20000024

08000b28 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <EXTI4_IRQHandler+0x1c>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <EXTI4_IRQHandler+0x1c>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <EXTI4_IRQHandler+0x20>)
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	4798      	blx	r3
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010400 	.word	0x40010400
 8000b48:	20000024 	.word	0x20000024

08000b4c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) { EXTI->PR |= (1<<5);  GP_IRQ_CallBack[5](); };
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f003 0320 	and.w	r3, r3, #32
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <EXTI9_5_IRQHandler+0x22>
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b62:	f043 0320 	orr.w	r3, r3, #32
 8000b66:	6153      	str	r3, [r2, #20]
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <EXTI9_5_IRQHandler+0xa4>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |= (1<<6);  GP_IRQ_CallBack[6](); };
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <EXTI9_5_IRQHandler+0x40>
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <EXTI9_5_IRQHandler+0xa4>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |= (1<<7);  GP_IRQ_CallBack[7](); };
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <EXTI9_5_IRQHandler+0x5e>
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba2:	6153      	str	r3, [r2, #20]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <EXTI9_5_IRQHandler+0xa4>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |= (1<<8);  GP_IRQ_CallBack[8](); };
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d008      	beq.n	8000bc8 <EXTI9_5_IRQHandler+0x7c>
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <EXTI9_5_IRQHandler+0xa4>)
 8000bc4:	6a1b      	ldr	r3, [r3, #32]
 8000bc6:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |= (1<<9);  GP_IRQ_CallBack[9](); };
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <EXTI9_5_IRQHandler+0x9a>
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <EXTI9_5_IRQHandler+0xa0>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bde:	6153      	str	r3, [r2, #20]
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <EXTI9_5_IRQHandler+0xa4>)
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	4798      	blx	r3
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40010400 	.word	0x40010400
 8000bf0:	20000024 	.word	0x20000024

08000bf4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) { EXTI->PR |= (1<<10);  GP_IRQ_CallBack[10](); };
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <EXTI15_10_IRQHandler+0x22>
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6153      	str	r3, [r2, #20]
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <EXTI15_10_IRQHandler+0xc0>)
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	4798      	blx	r3
	if(EXTI->PR & 1<<11) { EXTI->PR |= (1<<11);  GP_IRQ_CallBack[11](); };
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <EXTI15_10_IRQHandler+0x40>
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <EXTI15_10_IRQHandler+0xc0>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c32:	4798      	blx	r3
	if(EXTI->PR & 1<<12) { EXTI->PR |= (1<<12);  GP_IRQ_CallBack[12](); };
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <EXTI15_10_IRQHandler+0x5e>
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4a:	6153      	str	r3, [r2, #20]
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <EXTI15_10_IRQHandler+0xc0>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4798      	blx	r3
	if(EXTI->PR & 1<<13) { EXTI->PR |= (1<<13);  GP_IRQ_CallBack[13](); };
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <EXTI15_10_IRQHandler+0x7c>
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <EXTI15_10_IRQHandler+0xc0>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	4798      	blx	r3
	if(EXTI->PR & 1<<14) { EXTI->PR |= (1<<14);  GP_IRQ_CallBack[14](); };
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <EXTI15_10_IRQHandler+0x9a>
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c86:	6153      	str	r3, [r2, #20]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <EXTI15_10_IRQHandler+0xc0>)
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	4798      	blx	r3
	if(EXTI->PR & 1<<15) { EXTI->PR |= (1<<15);  GP_IRQ_CallBack[15](); };
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d008      	beq.n	8000cac <EXTI15_10_IRQHandler+0xb8>
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <EXTI15_10_IRQHandler+0xbc>)
 8000ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <EXTI15_10_IRQHandler+0xc0>)
 8000ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000caa:	4798      	blx	r3
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40010400 	.word	0x40010400
 8000cb4:	20000024 	.word	0x20000024

08000cb8 <Get_CRLH_Position>:
#include "stm32_f103x6.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b80      	cmp	r3, #128	; 0x80
 8000cc6:	d042      	beq.n	8000d4e <Get_CRLH_Position+0x96>
 8000cc8:	2b80      	cmp	r3, #128	; 0x80
 8000cca:	dc11      	bgt.n	8000cf0 <Get_CRLH_Position+0x38>
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d036      	beq.n	8000d3e <Get_CRLH_Position+0x86>
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	dc06      	bgt.n	8000ce2 <Get_CRLH_Position+0x2a>
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d02e      	beq.n	8000d36 <Get_CRLH_Position+0x7e>
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d02e      	beq.n	8000d3a <Get_CRLH_Position+0x82>
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d028      	beq.n	8000d32 <Get_CRLH_Position+0x7a>
 8000ce0:	e047      	b.n	8000d72 <Get_CRLH_Position+0xba>
 8000ce2:	2b20      	cmp	r3, #32
 8000ce4:	d02f      	beq.n	8000d46 <Get_CRLH_Position+0x8e>
 8000ce6:	2b40      	cmp	r3, #64	; 0x40
 8000ce8:	d02f      	beq.n	8000d4a <Get_CRLH_Position+0x92>
 8000cea:	2b10      	cmp	r3, #16
 8000cec:	d029      	beq.n	8000d42 <Get_CRLH_Position+0x8a>
 8000cee:	e040      	b.n	8000d72 <Get_CRLH_Position+0xba>
 8000cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf4:	d033      	beq.n	8000d5e <Get_CRLH_Position+0xa6>
 8000cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cfa:	dc09      	bgt.n	8000d10 <Get_CRLH_Position+0x58>
 8000cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d00:	d029      	beq.n	8000d56 <Get_CRLH_Position+0x9e>
 8000d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d06:	d028      	beq.n	8000d5a <Get_CRLH_Position+0xa2>
 8000d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d0c:	d021      	beq.n	8000d52 <Get_CRLH_Position+0x9a>
 8000d0e:	e030      	b.n	8000d72 <Get_CRLH_Position+0xba>
 8000d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d14:	d027      	beq.n	8000d66 <Get_CRLH_Position+0xae>
 8000d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d1a:	dc03      	bgt.n	8000d24 <Get_CRLH_Position+0x6c>
 8000d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d20:	d01f      	beq.n	8000d62 <Get_CRLH_Position+0xaa>
 8000d22:	e026      	b.n	8000d72 <Get_CRLH_Position+0xba>
 8000d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d28:	d01f      	beq.n	8000d6a <Get_CRLH_Position+0xb2>
 8000d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d2e:	d01e      	beq.n	8000d6e <Get_CRLH_Position+0xb6>
 8000d30:	e01f      	b.n	8000d72 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e01e      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000d36:	2304      	movs	r3, #4
 8000d38:	e01c      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	e01a      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	e018      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000d42:	2310      	movs	r3, #16
 8000d44:	e016      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000d46:	2314      	movs	r3, #20
 8000d48:	e014      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000d4a:	2318      	movs	r3, #24
 8000d4c:	e012      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000d4e:	231c      	movs	r3, #28
 8000d50:	e010      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e00e      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	e00c      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	e00a      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	e008      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000d62:	2310      	movs	r3, #16
 8000d64:	e006      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000d66:	2314      	movs	r3, #20
 8000d68:	e004      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000d6a:	2318      	movs	r3, #24
 8000d6c:	e002      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000d6e:	231c      	movs	r3, #28
 8000d70:	e000      	b.n	8000d74 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <MCAL_GPIO_Init>:



void MCAL_GPIO_Init(GPIO_Typedef_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000d7e:	b590      	push	{r4, r7, lr}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	volatile uint32_t * configRegister = NULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG =0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
	configRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	2bff      	cmp	r3, #255	; 0xff
 8000d96:	d801      	bhi.n	8000d9c <MCAL_GPIO_Init+0x1e>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	e001      	b.n	8000da0 <MCAL_GPIO_Init+0x22>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE[1:0]
	* configRegister &= ~(0xF << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff86 	bl	8000cb8 <Get_CRLH_Position>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	230f      	movs	r3, #15
 8000db2:	4093      	lsls	r3, r2
 8000db4:	43da      	mvns	r2, r3
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d00b      	beq.n	8000de0 <MCAL_GPIO_Init+0x62>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2b05      	cmp	r3, #5
 8000dce:	d007      	beq.n	8000de0 <MCAL_GPIO_Init+0x62>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	2b06      	cmp	r3, #6
 8000dd6:	d003      	beq.n	8000de0 <MCAL_GPIO_Init+0x62>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	789b      	ldrb	r3, [r3, #2]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	d10e      	bne.n	8000dfe <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0] MODE[]
		PIN_CONFIG = ( ((PinConfig->GPIO_MODE - 4) << 2)| ((PinConfig->GPIO_OUTPUT_SPEED)  & 0x0F)) ;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	789b      	ldrb	r3, [r3, #2]
 8000de4:	3b04      	subs	r3, #4
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	b25a      	sxtb	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	78db      	ldrb	r3, [r3, #3]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e029      	b.n	8000e52 <MCAL_GPIO_Init+0xd4>
	//if pin in input
	//00 MODE[1:0]: Input mode (reset state)
	//we set CANF[1:0]
	else
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) )
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <MCAL_GPIO_Init+0x90>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <MCAL_GPIO_Init+0x9a>
		{
			PIN_CONFIG = (((PinConfig->GPIO_MODE) <<2 ) | (0x0 & 0x0F)) ;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e01c      	b.n	8000e52 <MCAL_GPIO_Init+0xd4>
			//*(configRegister) |= (PinConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
		}
		else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))  //consider pin is  input flowting
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	789b      	ldrb	r3, [r3, #2]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d102      	bne.n	8000e26 <MCAL_GPIO_Init+0xa8>
		{
			PIN_CONFIG = ( ((GPIO_MODE_INPUT_FLO) <<2 ) | (0x0 & 0x0F)) ;
 8000e20:	2304      	movs	r3, #4
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e015      	b.n	8000e52 <MCAL_GPIO_Init+0xd4>
			//*(configRegister) |= (PinConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
		}
		else   //pin is PU   PD input
		{
			PIN_CONFIG = (((GPIO_MODE_INPUT_PU) << 2) |(0x0 & 0x0f));
 8000e26:	2308      	movs	r3, #8
 8000e28:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE ==GPIO_MODE_INPUT_PU )
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d107      	bne.n	8000e42 <MCAL_GPIO_Init+0xc4>
			{
				//PxODR =1 input pull up ,tale 20
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	8812      	ldrh	r2, [r2, #0]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	e007      	b.n	8000e52 <MCAL_GPIO_Init+0xd4>
			}else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;      //pin is input pull down
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	8812      	ldrh	r2, [r2, #0]
 8000e4a:	43d2      	mvns	r2, r2
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configRegister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000e52:	7bfc      	ldrb	r4, [r7, #15]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff2d 	bl	8000cb8 <Get_CRLH_Position>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	fa04 f203 	lsl.w	r2, r4, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	601a      	str	r2, [r3, #0]

}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}

08000e76 <MCAL_GPIO_WritePort>:
 * @param [out] -
 * @retval -
 * Note-
 */
void MCAL_GPIO_WritePort(GPIO_Typedef_t *GPIOx, uint8_t value)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR = (uint16_t)value;
 8000e82:	78fa      	ldrb	r2, [r7, #3]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60da      	str	r2, [r3, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <MCAL_GPIO_WritePin>:
 * @param [out] -
 * @retval -
 * Note-
 */
void MCAL_GPIO_WritePin(GPIO_Typedef_t *GPIOx, uint16_t PinNumber, uint8_t value)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	807b      	strh	r3, [r7, #2]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	707b      	strb	r3, [r7, #1]
	if(value != 0)
 8000ea2:	787b      	ldrb	r3, [r7, #1]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <MCAL_GPIO_WritePin+0x1e>
		//or
		// BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR =(uint32_t)PinNumber;
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	611a      	str	r2, [r3, #16]
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR =(uint32_t)PinNumber;
	}
}
 8000eae:	e002      	b.n	8000eb6 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	615a      	str	r2, [r3, #20]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <__libc_init_array>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	2500      	movs	r5, #0
 8000ec4:	4e0c      	ldr	r6, [pc, #48]	; (8000ef8 <__libc_init_array+0x38>)
 8000ec6:	4c0d      	ldr	r4, [pc, #52]	; (8000efc <__libc_init_array+0x3c>)
 8000ec8:	1ba4      	subs	r4, r4, r6
 8000eca:	10a4      	asrs	r4, r4, #2
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	d109      	bne.n	8000ee4 <__libc_init_array+0x24>
 8000ed0:	f000 f81a 	bl	8000f08 <_init>
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	4e0a      	ldr	r6, [pc, #40]	; (8000f00 <__libc_init_array+0x40>)
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	; (8000f04 <__libc_init_array+0x44>)
 8000eda:	1ba4      	subs	r4, r4, r6
 8000edc:	10a4      	asrs	r4, r4, #2
 8000ede:	42a5      	cmp	r5, r4
 8000ee0:	d105      	bne.n	8000eee <__libc_init_array+0x2e>
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ee8:	4798      	blx	r3
 8000eea:	3501      	adds	r5, #1
 8000eec:	e7ee      	b.n	8000ecc <__libc_init_array+0xc>
 8000eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef2:	4798      	blx	r3
 8000ef4:	3501      	adds	r5, #1
 8000ef6:	e7f2      	b.n	8000ede <__libc_init_array+0x1e>
 8000ef8:	08000f44 	.word	0x08000f44
 8000efc:	08000f44 	.word	0x08000f44
 8000f00:	08000f44 	.word	0x08000f44
 8000f04:	08000f48 	.word	0x08000f48

08000f08 <_init>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	bf00      	nop
 8000f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0e:	bc08      	pop	{r3}
 8000f10:	469e      	mov	lr, r3
 8000f12:	4770      	bx	lr

08000f14 <_fini>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr
