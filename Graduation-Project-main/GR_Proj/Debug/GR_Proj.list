
GR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080080e4  080080e4  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080e4  080080e4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080080ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  200000a0  0800818c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  0800818c  00021258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196ba  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc5  00000000  00000000  00039783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a495  00000000  00000000  0003fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f94  00000000  00000000  0005a155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982f3  00000000  00000000  000720e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a3dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d58  00000000  00000000  0010a42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f94 	.word	0x08007f94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08007f94 	.word	0x08007f94

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__gesf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__lesf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpsf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b6:	d011      	beq.n	80009dc <__cmpsf2+0x40>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009be:	bf18      	it	ne
 80009c0:	ea90 0f01 	teqne	r0, r1
 80009c4:	bf58      	it	pl
 80009c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ca:	bf88      	it	hi
 80009cc:	17c8      	asrhi	r0, r1, #31
 80009ce:	bf38      	it	cc
 80009d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d4:	bf18      	it	ne
 80009d6:	f040 0001 	orrne.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	d102      	bne.n	80009e8 <__cmpsf2+0x4c>
 80009e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e6:	d105      	bne.n	80009f4 <__cmpsf2+0x58>
 80009e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009ec:	d1e4      	bne.n	80009b8 <__cmpsf2+0x1c>
 80009ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f2:	d0e1      	beq.n	80009b8 <__cmpsf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cfrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e7ff      	b.n	8000a04 <__aeabi_cfcmpeq>

08000a04 <__aeabi_cfcmpeq>:
 8000a04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a06:	f7ff ffc9 	bl	800099c <__cmpsf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a14 <__aeabi_fcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_fcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffd2 	bl	80009fc <__aeabi_cfrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_fcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc8 	bl	80009fc <__aeabi_cfrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <Car_INIT>:

#include "CAR.h"
#include "L298N.h"


void Car_INIT(CAR_TYPEDEF* Car){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	L298N_Init(Car->motor);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f886 	bl	8000b96 <L298N_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <Car_Stop>:
void Car_Start(CAR_TYPEDEF* Car){
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_1,L298N_MOTOR_DIRECTION_FORWARD);
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_2,L298N_MOTOR_DIRECTION_FORWARD);

}
void Car_Stop(CAR_TYPEDEF* Car){
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_1,L298N_MOTOR_DIRECTION_STOP);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f900 	bl	8000ca8 <L298N_SetMotorDirection>
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_2,L298N_MOTOR_DIRECTION_STOP);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f8f9 	bl	8000ca8 <L298N_SetMotorDirection>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <Car_Forward>:
void Car_Forward(CAR_TYPEDEF* Car){
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_1,L298N_MOTOR_DIRECTION_FORWARD);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2201      	movs	r2, #1
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f8ea 	bl	8000ca8 <L298N_SetMotorDirection>
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_2,L298N_MOTOR_DIRECTION_FORWARD);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8e3 	bl	8000ca8 <L298N_SetMotorDirection>


}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <Car_Right>:
void Car_Reverse(CAR_TYPEDEF* Car){
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_1,L298N_MOTOR_DIRECTION_BACKWARD);
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_2,L298N_MOTOR_DIRECTION_BACKWARD);

}
void Car_Right(CAR_TYPEDEF* Car){
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_1,L298N_MOTOR_DIRECTION_STOP);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f8d4 	bl	8000ca8 <L298N_SetMotorDirection>
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_2,L298N_MOTOR_DIRECTION_FORWARD);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2201      	movs	r2, #1
 8000b06:	2101      	movs	r1, #1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f8cd 	bl	8000ca8 <L298N_SetMotorDirection>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <Car_left>:

void Car_left(CAR_TYPEDEF* Car){
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_1,L298N_MOTOR_DIRECTION_FORWARD);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2201      	movs	r2, #1
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f8be 	bl	8000ca8 <L298N_SetMotorDirection>
	L298N_SetMotorDirection(Car->motor , L298N_MOTOR_2,L298N_MOTOR_DIRECTION_STOP);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	2101      	movs	r1, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f8b7 	bl	8000ca8 <L298N_SetMotorDirection>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <Car_Set_Speed>:

void Car_Set_Speed(CAR_TYPEDEF* Car , uint16_t speed){
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	807b      	strh	r3, [r7, #2]
	L298N_SetMotorSpeed(Car->motor, L298N_MOTOR_1, speed);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f849 	bl	8000bee <L298N_SetMotorSpeed>
	L298N_SetMotorSpeed(Car->motor, L298N_MOTOR_2, speed);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	887a      	ldrh	r2, [r7, #2]
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f842 	bl	8000bee <L298N_SetMotorSpeed>

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <L298N_SetMotorPinState>:
#include "L298N.h"
/*private macros*/
#define period 100
/* Private functions ---------------------------------------------------------*/
static void L298N_SetMotorPinState(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	807b      	strh	r3, [r7, #2]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8000b82:	787a      	ldrb	r2, [r7, #1]
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	4619      	mov	r1, r3
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f002 f8f1 	bl	8002d70 <HAL_GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <L298N_Init>:
 *
 */

/******************************************************************************************************/
void L298N_Init(L298N_HandleTypeDef *hl298n)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
			HAL_TIM_PWM_ConfigChannel(hl298n->timer_handle, &sConfigOC, TIM_CHANNEL_4);
		}
		HAL_TIM_PWM_Start(hl298n->timer_handle, hl298n->timer_channel);*/

	/* Set motor initial state */
	HAL_TIM_Base_Start(hl298n->timer_handle_1);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fdda 	bl	800375c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(hl298n->timer_handle_2);//Initialize stm32 timer 3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fdd5 	bl	800375c <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(hl298n->timer_handle_1, hl298n->timer_channel_1); // Replace TIM_CHANNEL_x with the appropriate channel
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	f002 fe67 	bl	8003890 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(hl298n->timer_handle_2, hl298n->timer_channel_2); // Replace TIM_CHANNEL_x with the appropriate channel
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4610      	mov	r0, r2
 8000bce:	f002 fe5f 	bl	8003890 <HAL_TIM_PWM_Start>

	L298N_SetMotorDirection(hl298n, L298N_MOTOR_1, L298N_MOTOR_DIRECTION_STOP);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f866 	bl	8000ca8 <L298N_SetMotorDirection>
	L298N_SetMotorDirection(hl298n, L298N_MOTOR_2, L298N_MOTOR_DIRECTION_STOP);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f861 	bl	8000ca8 <L298N_SetMotorDirection>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <L298N_SetMotorSpeed>:
 *    - None
 *
 */

void L298N_SetMotorSpeed(L298N_HandleTypeDef* hl298n, L298N_MotorNumberTypeDef motorNumber, uint16_t speed)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	70fb      	strb	r3, [r7, #3]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	803b      	strh	r3, [r7, #0]
	/* Calculate PWM duty cycle based on input speed */
	uint32_t pulse = (speed * period) / 100;
 8000bfe:	883b      	ldrh	r3, [r7, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
	/* Set PWM duty cycle for selected motor */
	if (motorNumber == L298N_MOTOR_1) {
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d123      	bne.n	8000c50 <L298N_SetMotorSpeed+0x62>
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_1, hl298n->timer_channel_1, pulse);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <L298N_SetMotorSpeed+0x2e>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if (motorNumber == L298N_MOTOR_2) {
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_2, hl298n->timer_channel_2, pulse);
	}
}
 8000c1a:	e040      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_1, hl298n->timer_channel_1, pulse);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d105      	bne.n	8000c30 <L298N_SetMotorSpeed+0x42>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6393      	str	r3, [r2, #56]	; 0x38
 8000c2e:	e036      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d105      	bne.n	8000c44 <L298N_SetMotorSpeed+0x56>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c42:	e02c      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c4e:	e026      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
	else if (motorNumber == L298N_MOTOR_2) {
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d123      	bne.n	8000c9e <L298N_SetMotorSpeed+0xb0>
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_2, hl298n->timer_channel_2, pulse);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d105      	bne.n	8000c6a <L298N_SetMotorSpeed+0x7c>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c68:	e019      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_2, hl298n->timer_channel_2, pulse);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d105      	bne.n	8000c7e <L298N_SetMotorSpeed+0x90>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c7c:	e00f      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_2, hl298n->timer_channel_2, pulse);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a1b      	ldr	r3, [r3, #32]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d105      	bne.n	8000c92 <L298N_SetMotorSpeed+0xa4>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000c90:	e005      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
		__HAL_TIM_SET_COMPARE(hl298n->timer_handle_2, hl298n->timer_channel_2, pulse);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c9c:	e7ff      	b.n	8000c9e <L298N_SetMotorSpeed+0xb0>
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <L298N_SetMotorDirection>:
 *    - None
 *
 */

void L298N_SetMotorDirection(L298N_HandleTypeDef* hl298n, L298N_MotorNumberTypeDef motorNumber, L298N_MotorDirectionTypeDef direction)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	70bb      	strb	r3, [r7, #2]
	/* Set motor direction based on input direction */
	if (motorNumber == L298N_MOTOR_1) {
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d13b      	bne.n	8000d36 <L298N_SetMotorDirection+0x8e>
		if (direction == L298N_MOTOR_DIRECTION_FORWARD) {
 8000cbe:	78bb      	ldrb	r3, [r7, #2]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d110      	bne.n	8000ce6 <L298N_SetMotorDirection+0x3e>
			L298N_SetMotorPinState(hl298n->motor1_port, hl298n->motor1_pin1, GPIO_PIN_SET);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	889b      	ldrh	r3, [r3, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ff4f 	bl	8000b72 <L298N_SetMotorPinState>
			L298N_SetMotorPinState(hl298n->motor1_port, hl298n->motor1_pin2, GPIO_PIN_RESET);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	88db      	ldrh	r3, [r3, #6]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff ff47 	bl	8000b72 <L298N_SetMotorPinState>
		else if (direction == L298N_MOTOR_DIRECTION_STOP) {
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin1, GPIO_PIN_RESET);
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin2, GPIO_PIN_RESET);
		}
	}
}
 8000ce4:	e065      	b.n	8000db2 <L298N_SetMotorDirection+0x10a>
		else if (direction == L298N_MOTOR_DIRECTION_BACKWARD) {
 8000ce6:	78bb      	ldrb	r3, [r7, #2]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d110      	bne.n	8000d0e <L298N_SetMotorDirection+0x66>
			L298N_SetMotorPinState(hl298n->motor1_port, hl298n->motor1_pin1, GPIO_PIN_RESET);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	889b      	ldrh	r3, [r3, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff ff3b 	bl	8000b72 <L298N_SetMotorPinState>
			L298N_SetMotorPinState(hl298n->motor1_port, hl298n->motor1_pin2, GPIO_PIN_SET);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	88db      	ldrh	r3, [r3, #6]
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	f7ff ff33 	bl	8000b72 <L298N_SetMotorPinState>
}
 8000d0c:	e051      	b.n	8000db2 <L298N_SetMotorDirection+0x10a>
		}else if (direction == L298N_MOTOR_DIRECTION_STOP) {
 8000d0e:	78bb      	ldrb	r3, [r7, #2]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <L298N_SetMotorDirection+0x10a>
			L298N_SetMotorPinState(hl298n->motor1_port, hl298n->motor1_pin1, GPIO_PIN_RESET);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	889b      	ldrh	r3, [r3, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f7ff ff27 	bl	8000b72 <L298N_SetMotorPinState>
			L298N_SetMotorPinState(hl298n->motor1_port, hl298n->motor1_pin2, GPIO_PIN_RESET);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	88db      	ldrh	r3, [r3, #6]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff ff1f 	bl	8000b72 <L298N_SetMotorPinState>
}
 8000d34:	e03d      	b.n	8000db2 <L298N_SetMotorDirection+0x10a>
	else if (motorNumber == L298N_MOTOR_2) {
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d13a      	bne.n	8000db2 <L298N_SetMotorDirection+0x10a>
		if (direction == L298N_MOTOR_DIRECTION_FORWARD) {
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d110      	bne.n	8000d64 <L298N_SetMotorDirection+0xbc>
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin1, GPIO_PIN_SET);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6898      	ldr	r0, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	899b      	ldrh	r3, [r3, #12]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff ff10 	bl	8000b72 <L298N_SetMotorPinState>
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin2, GPIO_PIN_RESET);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6898      	ldr	r0, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	89db      	ldrh	r3, [r3, #14]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff ff08 	bl	8000b72 <L298N_SetMotorPinState>
}
 8000d62:	e026      	b.n	8000db2 <L298N_SetMotorDirection+0x10a>
		else if (direction == L298N_MOTOR_DIRECTION_BACKWARD) {
 8000d64:	78bb      	ldrb	r3, [r7, #2]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d110      	bne.n	8000d8c <L298N_SetMotorDirection+0xe4>
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin1, GPIO_PIN_RESET);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6898      	ldr	r0, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	899b      	ldrh	r3, [r3, #12]
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff fefc 	bl	8000b72 <L298N_SetMotorPinState>
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin2, GPIO_PIN_SET);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6898      	ldr	r0, [r3, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	89db      	ldrh	r3, [r3, #14]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fef4 	bl	8000b72 <L298N_SetMotorPinState>
}
 8000d8a:	e012      	b.n	8000db2 <L298N_SetMotorDirection+0x10a>
		else if (direction == L298N_MOTOR_DIRECTION_STOP) {
 8000d8c:	78bb      	ldrb	r3, [r7, #2]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <L298N_SetMotorDirection+0x10a>
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin1, GPIO_PIN_RESET);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6898      	ldr	r0, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	899b      	ldrh	r3, [r3, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f7ff fee8 	bl	8000b72 <L298N_SetMotorPinState>
			L298N_SetMotorPinState(hl298n->motor2_port, hl298n->motor2_pin2, GPIO_PIN_RESET);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6898      	ldr	r0, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	89db      	ldrh	r3, [r3, #14]
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	f7ff fee0 	bl	8000b72 <L298N_SetMotorPinState>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <vApplicationGetIdleTaskMemory+0x28>)
 8000dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	200000bc 	.word	0x200000bc
 8000de8:	20000170 	.word	0x20000170

08000dec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b09e      	sub	sp, #120	; 0x78
 8000df0:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000df2:	f001 f823 	bl	8001e3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000df6:	f000 f891 	bl	8000f1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dfa:	f000 fa85 	bl	8001308 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000dfe:	f000 fa2f 	bl	8001260 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000e02:	f000 fa57 	bl	80012b4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000e06:	f000 f979 	bl	80010fc <MX_TIM2_Init>
	MX_TIM3_Init();
 8000e0a:	f000 f9cf 	bl	80011ac <MX_TIM3_Init>
	MX_ADC2_Init();
 8000e0e:	f000 f8e1 	bl	8000fd4 <MX_ADC2_Init>
	MX_TIM1_Init();
 8000e12:	f000 f91d 	bl	8001050 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Car_INIT(&car);
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <main+0xfc>)
 8000e18:	f7ff fe2e 	bl	8000a78 <Car_INIT>

	HAL_ADC_Start(&hadc2);
 8000e1c:	4833      	ldr	r0, [pc, #204]	; (8000eec <main+0x100>)
 8000e1e:	f001 f947 	bl	80020b0 <HAL_ADC_Start>
	HAL_TIM_IC_Start(&htim1,TIM_CHANNEL_1);
 8000e22:	2100      	movs	r1, #0
 8000e24:	4832      	ldr	r0, [pc, #200]	; (8000ef0 <main+0x104>)
 8000e26:	f002 fe25 	bl	8003a74 <HAL_TIM_IC_Start>

	/* Create the semaphores(s) */
	/* definition and creation of myBinarySem01 */

	osSemaphoreDef(myBinarySem01);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8000e2e:	2300      	movs	r3, #0
 8000e30:	677b      	str	r3, [r7, #116]	; 0x74
	myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000e32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e36:	2101      	movs	r1, #1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fbf1 	bl	8005620 <osSemaphoreCreate>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <main+0x108>)
 8000e42:	6013      	str	r3, [r2, #0]

	/* Create the EventGroup */
	/* definition and creation of myEventGroupHandle */
	myEventGroupHandle = xEventGroupCreate();
 8000e44:	f004 fc1e 	bl	8005684 <xEventGroupCreate>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <main+0x10c>)
 8000e4c:	6013      	str	r3, [r2, #0]

	/* Create the thread(s) */
	/* definition and creation of Confirm_Task */
	osThreadDef(Confirm_Task, Start_Confirm_Task, osPriorityNormal, 0, 128);
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <main+0x110>)
 8000e50:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Confirm_TaskHandle = osThreadCreate(osThread(Confirm_Task), NULL);
 8000e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fb6d 	bl	8005548 <osThreadCreate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <main+0x114>)
 8000e72:	6013      	str	r3, [r2, #0]

	/* definition and creation of Move_Task */
	osThreadDef(Move_Task, Start_Move_Task, osPriorityAboveNormal, 0, 128);
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <main+0x118>)
 8000e76:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e7a:	461d      	mov	r5, r3
 8000e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Move_TaskHandle = osThreadCreate(osThread(Move_Task), NULL);
 8000e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 fb5a 	bl	8005548 <osThreadCreate>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <main+0x11c>)
 8000e98:	6013      	str	r3, [r2, #0]

	/* definition and creation of Temp_Task */
	osThreadDef(Temp_Task, StartTemp_Task, osPriorityHigh, 0, 128);
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <main+0x120>)
 8000e9c:	f107 041c 	add.w	r4, r7, #28
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Temp_TaskHandle = osThreadCreate(osThread(Temp_Task), NULL);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fb47 	bl	8005548 <osThreadCreate>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <main+0x124>)
 8000ebe:	6013      	str	r3, [r2, #0]

	/* definition and creation of Ultra_Task */
	osThreadDef(Ultra_Task, Start_Ultra_Task, osPriorityHigh, 0, 128);
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <main+0x128>)
 8000ec2:	463c      	mov	r4, r7
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ultra_TaskHandle = osThreadCreate(osThread(Ultra_Task), NULL);
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 fb36 	bl	8005548 <osThreadCreate>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <main+0x12c>)
 8000ee0:	6013      	str	r3, [r2, #0]

	/* Start scheduler */
	osKernelStart();
 8000ee2:	f004 fb2a 	bl	800553a <osKernelStart>


	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <main+0xfa>
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	20000370 	.word	0x20000370
 8000ef0:	200003a0 	.word	0x200003a0
 8000ef4:	20000518 	.word	0x20000518
 8000ef8:	2000051c 	.word	0x2000051c
 8000efc:	08007fe0 	.word	0x08007fe0
 8000f00:	20000514 	.word	0x20000514
 8000f04:	08007ffc 	.word	0x08007ffc
 8000f08:	20000508 	.word	0x20000508
 8000f0c:	08008018 	.word	0x08008018
 8000f10:	2000050c 	.word	0x2000050c
 8000f14:	08008034 	.word	0x08008034
 8000f18:	20000510 	.word	0x20000510

08000f1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f26:	2228      	movs	r2, #40	; 0x28
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f006 ff6c 	bl	8007e08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 ff2c 	bl	8002dd0 <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000f7e:	f000 fcd1 	bl	8001924 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f92:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 f998 	bl	80032d4 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000faa:	f000 fcbb 	bl	8001924 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fb18 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000fc6:	f000 fcad 	bl	8001924 <Error_Handler>
	}
}
 8000fca:	bf00      	nop
 8000fcc:	3750      	adds	r7, #80	; 0x50
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_ADC2_Init+0x74>)
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <MX_ADC2_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_ADC2_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_ADC2_Init+0x74>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_ADC2_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_ADC2_Init+0x74>)
 8000ffe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001002:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_ADC2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_ADC2_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_ADC2_Init+0x74>)
 8001012:	f000 ff75 	bl	8001f00 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC2_Init+0x4c>
	{
		Error_Handler();
 800101c:	f000 fc82 	bl	8001924 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001020:	2308      	movs	r3, #8
 8001022:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001024:	2301      	movs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_ADC2_Init+0x74>)
 8001032:	f001 f9bd 	bl	80023b0 <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC2_Init+0x6c>
	{
		Error_Handler();
 800103c:	f000 fc72 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000370 	.word	0x20000370
 800104c:	40012800 	.word	0x40012800

08001050 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_TIM1_Init+0xa4>)
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <MX_TIM1_Init+0xa8>)
 8001070:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_TIM1_Init+0xa4>)
 8001074:	2247      	movs	r2, #71	; 0x47
 8001076:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_TIM1_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff-1;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM1_Init+0xa4>)
 8001080:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001084:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM1_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM1_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM1_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_TIM1_Init+0xa4>)
 800109a:	f002 fc9b 	bl	80039d4 <HAL_TIM_IC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 80010a4:	f000 fc3e 	bl	8001924 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_TIM1_Init+0xa4>)
 80010b8:	f003 fb86 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 80010c2:	f000 fc2f 	bl	8001924 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ca:	2301      	movs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM1_Init+0xa4>)
 80010de:	f002 fe91 	bl	8003e04 <HAL_TIM_IC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80010e8:	f000 fc1c 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200003a0 	.word	0x200003a0
 80010f8:	40012c00 	.word	0x40012c00

080010fc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001124:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 2000;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001128:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800112c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001136:	2264      	movs	r2, #100	; 0x64
 8001138:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_TIM2_Init+0xac>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001146:	4818      	ldr	r0, [pc, #96]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001148:	f002 fb52 	bl	80037f0 <HAL_TIM_PWM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8001152:	f000 fbe7 	bl	8001924 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <MX_TIM2_Init+0xac>)
 8001166:	f003 fb2f 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8001170:	f000 fbd8 	bl	8001924 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001174:	2360      	movs	r3, #96	; 0x60
 8001176:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	220c      	movs	r2, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM2_Init+0xac>)
 800118c:	f002 fed6 	bl	8003f3c <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8001196:	f000 fbc5 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM2_Init+0xac>)
 800119c:	f000 fccc 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200003e8 	.word	0x200003e8

080011ac <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_TIM3_Init+0xac>)
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <MX_TIM3_Init+0xb0>)
 80011d2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2000;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_TIM3_Init+0xac>)
 80011d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011da:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM3_Init+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM3_Init+0xac>)
 80011e4:	2264      	movs	r2, #100	; 0x64
 80011e6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_TIM3_Init+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_TIM3_Init+0xac>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f4:	4818      	ldr	r0, [pc, #96]	; (8001258 <MX_TIM3_Init+0xac>)
 80011f6:	f002 fafb 	bl	80037f0 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8001200:	f000 fb90 	bl	8001924 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_TIM3_Init+0xac>)
 8001214:	f003 fad8 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 800121e:	f000 fb81 	bl	8001924 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	; 0x60
 8001224:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2204      	movs	r2, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM3_Init+0xac>)
 800123a:	f002 fe7f 	bl	8003f3c <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001244:	f000 fb6e 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM3_Init+0xac>)
 800124a:	f000 fc75 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000430 	.word	0x20000430
 800125c:	40000400 	.word	0x40000400

08001260 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART1_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001298:	f003 fb06 	bl	80048a8 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80012a2:	f000 fb3f 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000478 	.word	0x20000478
 80012b0:	40013800 	.word	0x40013800

080012b4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART2_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ec:	f003 fadc 	bl	80048a8 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80012f6:	f000 fb15 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200004c0 	.word	0x200004c0
 8001304:	40004400 	.word	0x40004400

08001308 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <MX_GPIO_Init+0x114>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a3e      	ldr	r2, [pc, #248]	; (800141c <MX_GPIO_Init+0x114>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b3c      	ldr	r3, [pc, #240]	; (800141c <MX_GPIO_Init+0x114>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <MX_GPIO_Init+0x114>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <MX_GPIO_Init+0x114>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <MX_GPIO_Init+0x114>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_GPIO_Init+0x114>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a32      	ldr	r2, [pc, #200]	; (800141c <MX_GPIO_Init+0x114>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_GPIO_Init+0x114>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_GPIO_Init+0x114>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a2c      	ldr	r2, [pc, #176]	; (800141c <MX_GPIO_Init+0x114>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_GPIO_Init+0x114>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_GPIO_Init+0x118>)
 8001384:	f001 fcf4 	bl	8002d70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f641 0130 	movw	r1, #6192	; 0x1830
 800138e:	4825      	ldr	r0, [pc, #148]	; (8001424 <MX_GPIO_Init+0x11c>)
 8001390:	f001 fcee 	bl	8002d70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800139a:	4823      	ldr	r0, [pc, #140]	; (8001428 <MX_GPIO_Init+0x120>)
 800139c:	f001 fce8 	bl	8002d70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	4819      	ldr	r0, [pc, #100]	; (8001420 <MX_GPIO_Init+0x118>)
 80013ba:	f001 fb55 	bl	8002a68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 80013be:	f641 0330 	movw	r3, #6192	; 0x1830
 80013c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_GPIO_Init+0x11c>)
 80013d8:	f001 fb46 	bl	8002a68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0x120>)
 80013f6:	f001 fb37 	bl	8002a68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_GPIO_Init+0x11c>)
 8001410:	f001 fb2a 	bl	8002a68 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40011000 	.word	0x40011000
 8001424:	40010800 	.word	0x40010800
 8001428:	40010c00 	.word	0x40010c00

0800142c <Buzzer_ON>:

/* USER CODE BEGIN 4 */

void Buzzer_ON(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001436:	4802      	ldr	r0, [pc, #8]	; (8001440 <Buzzer_ON+0x14>)
 8001438:	f001 fc9a 	bl	8002d70 <HAL_GPIO_WritePin>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40010800 	.word	0x40010800

08001444 <Buzzer_OFF>:
 * @brief Buzzer OFF Function
 * @param None
 * @retval None
 */
void Buzzer_OFF(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144e:	4802      	ldr	r0, [pc, #8]	; (8001458 <Buzzer_OFF+0x14>)
 8001450:	f001 fc8e 	bl	8002d70 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010800 	.word	0x40010800

0800145c <delay>:
 */


// Let's write the callback function
void delay(uint16_t time)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <delay+0x2c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<time);
 800146e:	bf00      	nop
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <delay+0x2c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	429a      	cmp	r2, r3
 800147a:	d3f9      	bcc.n	8001470 <delay+0x14>
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	200003a0 	.word	0x200003a0
 800148c:	00000000 	.word	0x00000000

08001490 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7f1b      	ldrb	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	f040 8082 	bne.w	80015a6 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d11a      	bne.n	80014e0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 fe07 	bl	80040c0 <HAL_TIM_ReadCapturedValue>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a41      	ldr	r2, [pc, #260]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014b6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a1a      	ldr	r2, [r3, #32]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 020a 	bic.w	r2, r2, #10
 80014cc:	621a      	str	r2, [r3, #32]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0202 	orr.w	r2, r2, #2
 80014dc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 80014de:	e062      	b.n	80015a6 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d15e      	bne.n	80015a6 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f002 fde8 	bl	80040c0 <HAL_TIM_ReadCapturedValue>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014f4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d907      	bls.n	800151a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a2b      	ldr	r2, [pc, #172]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e00f      	b.n	800153a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d909      	bls.n	800153a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001534:	33ff      	adds	r3, #255	; 0xff
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001538:	6013      	str	r3, [r2, #0]
			distance = Difference * .034/2;
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff48 	bl	80003d4 <__aeabi_ui2d>
 8001544:	a31a      	add	r3, pc, #104	; (adr r3, 80015b0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe ffbd 	bl	80004c8 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155e:	f7ff f8dd 	bl	800071c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff f9bf 	bl	80008ec <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001572:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 020a 	bic.w	r2, r2, #10
 8001588:	621a      	str	r2, [r3, #32]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a12      	ldr	r2, [r2, #32]
 8001594:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0202 	bic.w	r2, r2, #2
 80015a4:	60da      	str	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	b020c49c 	.word	0xb020c49c
 80015b4:	3fa16872 	.word	0x3fa16872
 80015b8:	20000534 	.word	0x20000534
 80015bc:	20000528 	.word	0x20000528
 80015c0:	2000052c 	.word	0x2000052c
 80015c4:	20000530 	.word	0x20000530
 80015c8:	20000538 	.word	0x20000538
 80015cc:	200003a0 	.word	0x200003a0

080015d0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <HCSR04_Read+0x38>)
 80015dc:	f001 fbc8 	bl	8002d70 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80015e0:	200a      	movs	r0, #10
 80015e2:	f7ff ff3b 	bl	800145c <delay>
	//HAL_Delay(10);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <HCSR04_Read+0x38>)
 80015ee:	f001 fbbf 	bl	8002d70 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HCSR04_Read+0x3c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <HCSR04_Read+0x3c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0202 	orr.w	r2, r2, #2
 8001600:	60da      	str	r2, [r3, #12]
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40010800 	.word	0x40010800
 800160c:	200003a0 	.word	0x200003a0

08001610 <Start_Move_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Move_Task */
void Start_Move_Task(void const * argument)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	while(1)
	{
		EventBits_t uxBits;
		uxBits = xEventGroupWaitBits(myEventGroupHandle,BIT_0 ,pdFALSE,pdFALSE,( TickType_t )100);
 8001618:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <Start_Move_Task+0x144>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	2364      	movs	r3, #100	; 0x64
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	2200      	movs	r2, #0
 8001624:	2101      	movs	r1, #1
 8001626:	f004 f847 	bl	80056b8 <xEventGroupWaitBits>
 800162a:	60f8      	str	r0, [r7, #12]
		if( ( uxBits & BIT_0  ) == BIT_0  )
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <Start_Move_Task+0x8>
		{
			xSemaphoreTake(myBinarySem01Handle,( TickType_t )10);
 8001636:	4b48      	ldr	r3, [pc, #288]	; (8001758 <Start_Move_Task+0x148>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	210a      	movs	r1, #10
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fc9f 	bl	8005f80 <xQueueSemaphoreTake>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001648:	4844      	ldr	r0, [pc, #272]	; (800175c <Start_Move_Task+0x14c>)
 800164a:	f001 fb91 	bl	8002d70 <HAL_GPIO_WritePin>
			Buzzer_OFF();
 800164e:	f7ff fef9 	bl	8001444 <Buzzer_OFF>
			HCSR04_Read();
 8001652:	f7ff ffbd 	bl	80015d0 <HCSR04_Read>
			if(distance < 20.0)
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <Start_Move_Task+0x150>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4942      	ldr	r1, [pc, #264]	; (8001764 <Start_Move_Task+0x154>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f9e3 	bl	8000a28 <__aeabi_fcmplt>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <Start_Move_Task+0x66>
			{
				xEventGroupSetBits(myEventGroupHandle, BIT_2);
 8001668:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <Start_Move_Task+0x144>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2104      	movs	r1, #4
 800166e:	4618      	mov	r0, r3
 8001670:	f004 f8f0 	bl	8005854 <xEventGroupSetBits>
 8001674:	e06a      	b.n	800174c <Start_Move_Task+0x13c>
			}
			else
			{
				Buzzer_OFF();
 8001676:	f7ff fee5 	bl	8001444 <Buzzer_OFF>
				HAL_UART_Receive(&huart1, &mov, 1, 0x100);
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	2201      	movs	r2, #1
 8001680:	4939      	ldr	r1, [pc, #228]	; (8001768 <Start_Move_Task+0x158>)
 8001682:	483a      	ldr	r0, [pc, #232]	; (800176c <Start_Move_Task+0x15c>)
 8001684:	f003 f960 	bl	8004948 <HAL_UART_Receive>
//				Car_Set_Speed(&car, 40);

				switch(mov)
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <Start_Move_Task+0x158>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	3b61      	subs	r3, #97	; 0x61
 800168e:	2b16      	cmp	r3, #22
 8001690:	d85c      	bhi.n	800174c <Start_Move_Task+0x13c>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <Start_Move_Task+0x88>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	08001721 	.word	0x08001721
 800169c:	0800174d 	.word	0x0800174d
 80016a0:	0800174d 	.word	0x0800174d
 80016a4:	0800170b 	.word	0x0800170b
 80016a8:	0800174d 	.word	0x0800174d
 80016ac:	0800174d 	.word	0x0800174d
 80016b0:	0800174d 	.word	0x0800174d
 80016b4:	0800174d 	.word	0x0800174d
 80016b8:	0800174d 	.word	0x0800174d
 80016bc:	0800174d 	.word	0x0800174d
 80016c0:	0800174d 	.word	0x0800174d
 80016c4:	0800174d 	.word	0x0800174d
 80016c8:	0800174d 	.word	0x0800174d
 80016cc:	0800174d 	.word	0x0800174d
 80016d0:	0800174d 	.word	0x0800174d
 80016d4:	0800174d 	.word	0x0800174d
 80016d8:	0800174d 	.word	0x0800174d
 80016dc:	0800174d 	.word	0x0800174d
 80016e0:	08001737 	.word	0x08001737
 80016e4:	0800174d 	.word	0x0800174d
 80016e8:	0800174d 	.word	0x0800174d
 80016ec:	0800174d 	.word	0x0800174d
 80016f0:	080016f5 	.word	0x080016f5
				{
				case 'w':
					Car_Set_Speed(&car, 40);
 80016f4:	2128      	movs	r1, #40	; 0x28
 80016f6:	481e      	ldr	r0, [pc, #120]	; (8001770 <Start_Move_Task+0x160>)
 80016f8:	f7ff fa23 	bl	8000b42 <Car_Set_Speed>
					Car_Forward(&car);
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <Start_Move_Task+0x160>)
 80016fe:	f7ff f9de 	bl	8000abe <Car_Forward>
					osDelay(1);
 8001702:	2001      	movs	r0, #1
 8001704:	f003 ff78 	bl	80055f8 <osDelay>
					break;
 8001708:	e020      	b.n	800174c <Start_Move_Task+0x13c>
				case 'd':
					Car_Set_Speed(&car, 80);
 800170a:	2150      	movs	r1, #80	; 0x50
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <Start_Move_Task+0x160>)
 800170e:	f7ff fa18 	bl	8000b42 <Car_Set_Speed>
					Car_Right(&car);
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <Start_Move_Task+0x160>)
 8001714:	f7ff f9e9 	bl	8000aea <Car_Right>
					osDelay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f003 ff6d 	bl	80055f8 <osDelay>
					break;
 800171e:	e015      	b.n	800174c <Start_Move_Task+0x13c>
				case 'a':
					Car_Set_Speed(&car, 80);
 8001720:	2150      	movs	r1, #80	; 0x50
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <Start_Move_Task+0x160>)
 8001724:	f7ff fa0d 	bl	8000b42 <Car_Set_Speed>
					Car_left(&car);
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <Start_Move_Task+0x160>)
 800172a:	f7ff f9f4 	bl	8000b16 <Car_left>
					osDelay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f003 ff62 	bl	80055f8 <osDelay>
					break;
 8001734:	e00a      	b.n	800174c <Start_Move_Task+0x13c>
				case 's':
					Car_Set_Speed(&car, 40);
 8001736:	2128      	movs	r1, #40	; 0x28
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <Start_Move_Task+0x160>)
 800173a:	f7ff fa02 	bl	8000b42 <Car_Set_Speed>
					Car_Stop(&car);
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <Start_Move_Task+0x160>)
 8001740:	f7ff f9a7 	bl	8000a92 <Car_Stop>
					osDelay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f003 ff57 	bl	80055f8 <osDelay>
					break;
 800174a:	bf00      	nop

				}

			}
			osDelay(1);
 800174c:	2001      	movs	r0, #1
 800174e:	f003 ff53 	bl	80055f8 <osDelay>
	{
 8001752:	e761      	b.n	8001618 <Start_Move_Task+0x8>
 8001754:	2000051c 	.word	0x2000051c
 8001758:	20000518 	.word	0x20000518
 800175c:	40011000 	.word	0x40011000
 8001760:	20000538 	.word	0x20000538
 8001764:	41a00000 	.word	0x41a00000
 8001768:	20000521 	.word	0x20000521
 800176c:	20000478 	.word	0x20000478
 8001770:	20000028 	.word	0x20000028

08001774 <StartTemp_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTemp_Task */
void StartTemp_Task(void const * argument)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTemp_Task */
	/* Infinite loop */
	while(1)
	{
		EventBits_t uxBits;
		uxBits = xEventGroupWaitBits(myEventGroupHandle,BIT_1,pdTRUE,pdTRUE,( TickType_t )100);
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <StartTemp_Task+0x58>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	2364      	movs	r3, #100	; 0x64
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	2201      	movs	r2, #1
 8001788:	2102      	movs	r1, #2
 800178a:	f003 ff95 	bl	80056b8 <xEventGroupWaitBits>
 800178e:	60f8      	str	r0, [r7, #12]
		if( (uxBits & BIT_1 ) ==  BIT_1 )
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <StartTemp_Task+0x8>
		{
			while(temperature > 50.0)
 800179a:	e00a      	b.n	80017b2 <StartTemp_Task+0x3e>
			{
				//Read_temp();
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <StartTemp_Task+0x5c>)
 80017a4:	f001 fae4 	bl	8002d70 <HAL_GPIO_WritePin>
				Car_Stop(&car);
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <StartTemp_Task+0x60>)
 80017aa:	f7ff f972 	bl	8000a92 <Car_Stop>
				Buzzer_ON();
 80017ae:	f7ff fe3d 	bl	800142c <Buzzer_ON>
			while(temperature > 50.0)
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <StartTemp_Task+0x64>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4909      	ldr	r1, [pc, #36]	; (80017dc <StartTemp_Task+0x68>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f953 	bl	8000a64 <__aeabi_fcmpgt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1eb      	bne.n	800179c <StartTemp_Task+0x28>
				//HAL_UART_Transmit(&huart1, (uint8_t*)'t', 1, 0x300);
			}
			osDelay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f003 ff17 	bl	80055f8 <osDelay>
	{
 80017ca:	e7d7      	b.n	800177c <StartTemp_Task+0x8>
 80017cc:	2000051c 	.word	0x2000051c
 80017d0:	40011000 	.word	0x40011000
 80017d4:	20000028 	.word	0x20000028
 80017d8:	20000524 	.word	0x20000524
 80017dc:	42480000 	.word	0x42480000

080017e0 <Start_Ultra_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Ultra_Task */
void Start_Ultra_Task(void const * argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Ultra_Task */
	/* Infinite loop */
	while(1)
	{
		EventBits_t uxBits;
		uxBits = xEventGroupWaitBits(myEventGroupHandle,BIT_2 ,pdTRUE,pdTRUE,( TickType_t )100);
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <Start_Ultra_Task+0x5c>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	2364      	movs	r3, #100	; 0x64
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2201      	movs	r2, #1
 80017f4:	2104      	movs	r1, #4
 80017f6:	f003 ff5f 	bl	80056b8 <xEventGroupWaitBits>
 80017fa:	60f8      	str	r0, [r7, #12]
		if( (uxBits & BIT_2 ) == BIT_2 )
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <Start_Ultra_Task+0x8>
		{
			while(distance < 20.0)
 8001806:	e00c      	b.n	8001822 <Start_Ultra_Task+0x42>
			{
				HCSR04_Read();
 8001808:	f7ff fee2 	bl	80015d0 <HCSR04_Read>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <Start_Ultra_Task+0x60>)
 8001814:	f001 faac 	bl	8002d70 <HAL_GPIO_WritePin>
				Car_Stop(&car);
 8001818:	480a      	ldr	r0, [pc, #40]	; (8001844 <Start_Ultra_Task+0x64>)
 800181a:	f7ff f93a 	bl	8000a92 <Car_Stop>
				Buzzer_OFF();
 800181e:	f7ff fe11 	bl	8001444 <Buzzer_OFF>
			while(distance < 20.0)
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <Start_Ultra_Task+0x68>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4909      	ldr	r1, [pc, #36]	; (800184c <Start_Ultra_Task+0x6c>)
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f8fd 	bl	8000a28 <__aeabi_fcmplt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e9      	bne.n	8001808 <Start_Ultra_Task+0x28>
			}
			osDelay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f003 fedf 	bl	80055f8 <osDelay>
	{
 800183a:	e7d5      	b.n	80017e8 <Start_Ultra_Task+0x8>
 800183c:	2000051c 	.word	0x2000051c
 8001840:	40011000 	.word	0x40011000
 8001844:	20000028 	.word	0x20000028
 8001848:	20000538 	.word	0x20000538
 800184c:	41a00000 	.word	0x41a00000

08001850 <Start_Confirm_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Confirm_Task */
void Start_Confirm_Task(void const * argument)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Confirm_Task */
	/* Infinite loop */
	while(1)
	{
		HCSR04_Read();
 8001858:	f7ff feba 	bl	80015d0 <HCSR04_Read>
		if(distance < 20.0)
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <Start_Confirm_Task+0xb4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4929      	ldr	r1, [pc, #164]	; (8001908 <Start_Confirm_Task+0xb8>)
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f8e0 	bl	8000a28 <__aeabi_fcmplt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <Start_Confirm_Task+0x2c>
		{
			xEventGroupSetBits(myEventGroupHandle, BIT_2);
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <Start_Confirm_Task+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2104      	movs	r1, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f003 ffed 	bl	8005854 <xEventGroupSetBits>
 800187a:	e7ed      	b.n	8001858 <Start_Confirm_Task+0x8>
		}
		else
		{
			xSemaphoreTake(myBinarySem01Handle,( TickType_t )10);
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <Start_Confirm_Task+0xc0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	210a      	movs	r1, #10
 8001882:	4618      	mov	r0, r3
 8001884:	f004 fb7c 	bl	8005f80 <xQueueSemaphoreTake>
			Buzzer_OFF();
 8001888:	f7ff fddc 	bl	8001444 <Buzzer_OFF>
			Car_Stop(&car);
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <Start_Confirm_Task+0xc4>)
 800188e:	f7ff f900 	bl	8000a92 <Car_Stop>
			HAL_UART_Receive(&huart1, &conf, 1,0x100);
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	2201      	movs	r2, #1
 8001898:	491f      	ldr	r1, [pc, #124]	; (8001918 <Start_Confirm_Task+0xc8>)
 800189a:	4820      	ldr	r0, [pc, #128]	; (800191c <Start_Confirm_Task+0xcc>)
 800189c:	f003 f854 	bl	8004948 <HAL_UART_Receive>

			if(conf == 't')//all is true
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <Start_Confirm_Task+0xc8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b74      	cmp	r3, #116	; 0x74
 80018a6:	d112      	bne.n	80018ce <Start_Confirm_Task+0x7e>
			{
				xSemaphoreGive(myBinarySem01Handle);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <Start_Confirm_Task+0xc0>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	f004 fa67 	bl	8005d84 <xQueueGenericSend>
				xEventGroupSetBits(myEventGroupHandle, BIT_0);
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <Start_Confirm_Task+0xbc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2101      	movs	r1, #1
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ffc9 	bl	8005854 <xEventGroupSetBits>
				osThreadTerminate(Confirm_TaskHandle);
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <Start_Confirm_Task+0xd0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fe8a 	bl	80055e0 <osThreadTerminate>
 80018cc:	e015      	b.n	80018fa <Start_Confirm_Task+0xaa>
			}

			else if(conf == 'f' && conf != '\0')//some thing is wrong
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <Start_Confirm_Task+0xc8>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b66      	cmp	r3, #102	; 0x66
 80018d4:	d111      	bne.n	80018fa <Start_Confirm_Task+0xaa>
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <Start_Confirm_Task+0xc8>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <Start_Confirm_Task+0xaa>
			{
				while(conf == 'f')
 80018de:	e008      	b.n	80018f2 <Start_Confirm_Task+0xa2>
				{
					HAL_UART_Receive(&huart1, &conf, 1, 0X100);
 80018e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e4:	2201      	movs	r2, #1
 80018e6:	490c      	ldr	r1, [pc, #48]	; (8001918 <Start_Confirm_Task+0xc8>)
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <Start_Confirm_Task+0xcc>)
 80018ea:	f003 f82d 	bl	8004948 <HAL_UART_Receive>
					Buzzer_ON();
 80018ee:	f7ff fd9d 	bl	800142c <Buzzer_ON>
				while(conf == 'f')
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <Start_Confirm_Task+0xc8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b66      	cmp	r3, #102	; 0x66
 80018f8:	d0f2      	beq.n	80018e0 <Start_Confirm_Task+0x90>
				}
			}

			osDelay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f003 fe7c 	bl	80055f8 <osDelay>
		HCSR04_Read();
 8001900:	e7aa      	b.n	8001858 <Start_Confirm_Task+0x8>
 8001902:	bf00      	nop
 8001904:	20000538 	.word	0x20000538
 8001908:	41a00000 	.word	0x41a00000
 800190c:	2000051c 	.word	0x2000051c
 8001910:	20000518 	.word	0x20000518
 8001914:	20000028 	.word	0x20000028
 8001918:	20000520 	.word	0x20000520
 800191c:	20000478 	.word	0x20000478
 8001920:	20000514 	.word	0x20000514

08001924 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_MspInit+0x88>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_MspInit+0x88>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_MspInit+0x88>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_MspInit+0x88>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_MspInit+0x88>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_MspInit+0x88>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f000 ff92 	bl	8002896 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2105      	movs	r1, #5
 8001976:	2001      	movs	r0, #1
 8001978:	f000 ff8d 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 ffa6 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2105      	movs	r1, #5
 8001986:	2005      	movs	r0, #5
 8001988:	f000 ff85 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800198c:	2005      	movs	r0, #5
 800198e:	f000 ff9e 	bl	80028ce <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_MspInit+0x8c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_MspInit+0x8c>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000

080019c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_ADC_MspInit+0x7c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d129      	bne.n	8001a34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_ADC_MspInit+0x80>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_ADC_MspInit+0x80>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_ADC_MspInit+0x80>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_ADC_MspInit+0x80>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_ADC_MspInit+0x80>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_ADC_MspInit+0x80>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PB0     ------> ADC2_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a10:	2301      	movs	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a14:	2303      	movs	r3, #3
 8001a16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <HAL_ADC_MspInit+0x84>)
 8001a20:	f001 f822 	bl	8002a68 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2105      	movs	r1, #5
 8001a28:	2012      	movs	r0, #18
 8001a2a:	f000 ff34 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a2e:	2012      	movs	r0, #18
 8001a30:	f000 ff4d 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40012800 	.word	0x40012800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010c00 	.word	0x40010c00

08001a48 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_TIM_IC_MspInit+0x84>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d12c      	bne.n	8001ac2 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_TIM_IC_MspInit+0x88>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <HAL_TIM_IC_MspInit+0x88>)
 8001a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_TIM_IC_MspInit+0x88>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_TIM_IC_MspInit+0x88>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_TIM_IC_MspInit+0x88>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_TIM_IC_MspInit+0x88>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HAL_TIM_IC_MspInit+0x8c>)
 8001aae:	f000 ffdb 	bl	8002a68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2105      	movs	r1, #5
 8001ab6:	201b      	movs	r0, #27
 8001ab8:	f000 feed 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001abc:	201b      	movs	r0, #27
 8001abe:	f000 ff06 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010800 	.word	0x40010800

08001ad8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_TIM_PWM_MspInit+0x58>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_TIM_PWM_MspInit+0x58>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_TIM_PWM_MspInit+0x58>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b02:	e010      	b.n	8001b26 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10b      	bne.n	8001b26 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_TIM_PWM_MspInit+0x58>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_TIM_PWM_MspInit+0x58>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_TIM_PWM_MspInit+0x58>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40000400 	.word	0x40000400

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b56:	d12b      	bne.n	8001bb0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_TIM_MspPostInit+0xbc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_TIM_MspPostInit+0xbc>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_TIM_MspPostInit+0xbc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <HAL_TIM_MspPostInit+0xc0>)
 8001b86:	f000 ff6f 	bl	8002a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_TIM_MspPostInit+0xc4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_TIM_MspPostInit+0xc4>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bae:	e01c      	b.n	8001bea <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_TIM_MspPostInit+0xc8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d117      	bne.n	8001bea <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_TIM_MspPostInit+0xbc>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_TIM_MspPostInit+0xbc>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_TIM_MspPostInit+0xbc>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4807      	ldr	r0, [pc, #28]	; (8001c04 <HAL_TIM_MspPostInit+0xcc>)
 8001be6:	f000 ff3f 	bl	8002a68 <HAL_GPIO_Init>
}
 8001bea:	bf00      	nop
 8001bec:	3728      	adds	r7, #40	; 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40010800 	.word	0x40010800

08001c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a3f      	ldr	r2, [pc, #252]	; (8001d20 <HAL_UART_MspInit+0x118>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d13a      	bne.n	8001c9e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c28:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a3d      	ldr	r2, [pc, #244]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	482e      	ldr	r0, [pc, #184]	; (8001d28 <HAL_UART_MspInit+0x120>)
 8001c6e:	f000 fefb 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4828      	ldr	r0, [pc, #160]	; (8001d28 <HAL_UART_MspInit+0x120>)
 8001c88:	f000 feee 	bl	8002a68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2105      	movs	r1, #5
 8001c90:	2025      	movs	r0, #37	; 0x25
 8001c92:	f000 fe00 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c96:	2025      	movs	r0, #37	; 0x25
 8001c98:	f000 fe19 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c9c:	e03c      	b.n	8001d18 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d137      	bne.n	8001d18 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb2:	61d3      	str	r3, [r2, #28]
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0x11c>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_UART_MspInit+0x120>)
 8001cec:	f000 febc 	bl	8002a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_UART_MspInit+0x120>)
 8001d04:	f000 feb0 	bl	8002a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2026      	movs	r0, #38	; 0x26
 8001d0e:	f000 fdc2 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d12:	2026      	movs	r0, #38	; 0x26
 8001d14:	f000 fddb 	bl	80028ce <HAL_NVIC_EnableIRQ>
}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40004400 	.word	0x40004400

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <HardFault_Handler+0x4>

08001d42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <BusFault_Handler+0x4>

08001d4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <UsageFault_Handler+0x4>

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d64:	f000 f8b0 	bl	8001ec8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d68:	f005 fa36 	bl	80071d8 <xTaskGetSchedulerState>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d72:	f005 fdf9 	bl	8007968 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001d7e:	f001 f80f 	bl	8002da0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
	...

08001d94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <ADC1_2_IRQHandler+0x10>)
 8001d9a:	f000 fa37 	bl	800220c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000370 	.word	0x20000370

08001da8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM1_CC_IRQHandler+0x10>)
 8001dae:	f001 ff21 	bl	8003bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003a0 	.word	0x200003a0

08001dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <USART1_IRQHandler+0x10>)
 8001dc2:	f002 fe53 	bl	8004a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000478 	.word	0x20000478

08001dd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USART2_IRQHandler+0x10>)
 8001dd6:	f002 fe49 	bl	8004a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200004c0 	.word	0x200004c0

08001de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e16:	f7ff ffe5 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f005 ffc1 	bl	8007da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1e:	f7fe ffe5 	bl	8000dec <main>
  bx lr
 8001e22:	4770      	bx	lr
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001e2c:	080080ec 	.word	0x080080ec
  ldr r2, =_sbss
 8001e30:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001e34:	20001258 	.word	0x20001258

08001e38 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <CAN1_RX1_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fd17 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	200f      	movs	r0, #15
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fd6a 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd2f 	bl	80028ea <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 fcf7 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000002c 	.word	0x2000002c
 8001ec0:	20000034 	.word	0x20000034
 8001ec4:	20000030 	.word	0x20000030

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_IncTick+0x1c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_IncTick+0x20>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000034 	.word	0x20000034
 8001ee8:	2000053c 	.word	0x2000053c

08001eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_GetTick+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	2000053c 	.word	0x2000053c

08001f00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0be      	b.n	80020a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fd3e 	bl	80019c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fb85 	bl	8002654 <ADC_ConversionStop_Disable>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 8099 	bne.w	800208e <HAL_ADC_Init+0x18e>
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 8095 	bne.w	800208e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f6c:	f023 0302 	bic.w	r3, r3, #2
 8001f70:	f043 0202 	orr.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7b1b      	ldrb	r3, [r3, #12]
 8001f86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f98:	d003      	beq.n	8001fa2 <HAL_ADC_Init+0xa2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_ADC_Init+0xa8>
 8001fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_Init+0xaa>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7d1b      	ldrb	r3, [r3, #20]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d119      	bne.n	8001fec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	035a      	lsls	r2, r3, #13
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e00b      	b.n	8001fec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_ADC_Init+0x1a8>)
 8002008:	4013      	ands	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	430b      	orrs	r3, r1
 8002012:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201c:	d003      	beq.n	8002026 <HAL_ADC_Init+0x126>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d104      	bne.n	8002030 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	3b01      	subs	r3, #1
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	430a      	orrs	r2, r1
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_ADC_Init+0x1ac>)
 800204c:	4013      	ands	r3, r2
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	429a      	cmp	r2, r3
 8002052:	d10b      	bne.n	800206c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800206a:	e018      	b.n	800209e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f023 0312 	bic.w	r3, r3, #18
 8002074:	f043 0210 	orr.w	r2, r3, #16
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208c:	e007      	b.n	800209e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	ffe1f7fd 	.word	0xffe1f7fd
 80020ac:	ff1f0efe 	.word	0xff1f0efe

080020b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Start+0x1a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e098      	b.n	80021fc <HAL_ADC_Start+0x14c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa64 	bl	80025a0 <ADC_Enable>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8087 	bne.w	80021f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_ADC_Start+0x154>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d105      	bne.n	800210e <HAL_ADC_Start+0x5e>
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_ADC_Start+0x158>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d026      	beq.n	8002176 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002130:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002138:	e01d      	b.n	8002176 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_ADC_Start+0x158>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_ADC_Start+0xaa>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_ADC_Start+0x154>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10d      	bne.n	8002176 <HAL_ADC_Start+0xc6>
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_ADC_Start+0x158>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800216e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f023 0206 	bic.w	r2, r3, #6
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
 800218e:	e002      	b.n	8002196 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f06f 0202 	mvn.w	r2, #2
 80021a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021b6:	d113      	bne.n	80021e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_ADC_Start+0x154>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_ADC_Start+0x158>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	e00c      	b.n	80021fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	e003      	b.n	80021fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40012800 	.word	0x40012800
 8002208:	40012400 	.word	0x40012400

0800220c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d03e      	beq.n	80022ac <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d039      	beq.n	80022ac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800225a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800225e:	d11d      	bne.n	800229c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002264:	2b00      	cmp	r3, #0
 8002266:	d119      	bne.n	800229c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0220 	bic.w	r2, r2, #32
 8002276:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f874 	bl	800238a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f06f 0212 	mvn.w	r2, #18
 80022aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d04d      	beq.n	8002352 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d048      	beq.n	8002352 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80022e2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80022e6:	d012      	beq.n	800230e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d125      	bne.n	8002342 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002300:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002304:	d11d      	bne.n	8002342 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d119      	bne.n	8002342 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800231c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f9c7 	bl	80026d6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 020c 	mvn.w	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f812 	bl	800239c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0201 	mvn.w	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x20>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e0dc      	b.n	800258a <HAL_ADC_ConfigChannel+0x1da>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d81c      	bhi.n	800241a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b05      	subs	r3, #5
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4019      	ands	r1, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3b05      	subs	r3, #5
 800240c:	fa00 f203 	lsl.w	r2, r0, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	635a      	str	r2, [r3, #52]	; 0x34
 8002418:	e03c      	b.n	8002494 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d81c      	bhi.n	800245c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3b23      	subs	r3, #35	; 0x23
 8002434:	221f      	movs	r2, #31
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	4019      	ands	r1, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	3b23      	subs	r3, #35	; 0x23
 800244e:	fa00 f203 	lsl.w	r2, r0, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
 800245a:	e01b      	b.n	8002494 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b41      	subs	r3, #65	; 0x41
 800246e:	221f      	movs	r2, #31
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3b41      	subs	r3, #65	; 0x41
 8002488:	fa00 f203 	lsl.w	r2, r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b09      	cmp	r3, #9
 800249a:	d91c      	bls.n	80024d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	2207      	movs	r2, #7
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	4019      	ands	r1, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6898      	ldr	r0, [r3, #8]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	3b1e      	subs	r3, #30
 80024c8:	fa00 f203 	lsl.w	r2, r0, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	e019      	b.n	800250a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6919      	ldr	r1, [r3, #16]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	2207      	movs	r2, #7
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4019      	ands	r1, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6898      	ldr	r0, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b10      	cmp	r3, #16
 8002510:	d003      	beq.n	800251a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002516:	2b11      	cmp	r3, #17
 8002518:	d132      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_ADC_ConfigChannel+0x1e4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d125      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d126      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002540:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b10      	cmp	r3, #16
 8002548:	d11a      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_ADC_ConfigChannel+0x1e8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <HAL_ADC_ConfigChannel+0x1ec>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	0c9a      	lsrs	r2, r3, #18
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002560:	e002      	b.n	8002568 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x1b2>
 800256e:	e007      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012400 	.word	0x40012400
 8002598:	2000002c 	.word	0x2000002c
 800259c:	431bde83 	.word	0x431bde83

080025a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d040      	beq.n	8002640 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <ADC_Enable+0xac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <ADC_Enable+0xb0>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025dc:	e002      	b.n	80025e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025ea:	f7ff fc7f 	bl	8001eec <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025f0:	e01f      	b.n	8002632 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025f2:	f7ff fc7b 	bl	8001eec <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d918      	bls.n	8002632 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d011      	beq.n	8002632 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e007      	b.n	8002642 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d1d8      	bne.n	80025f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000002c 	.word	0x2000002c
 8002650:	431bde83 	.word	0x431bde83

08002654 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d12e      	bne.n	80026cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800267e:	f7ff fc35 	bl	8001eec <HAL_GetTick>
 8002682:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002684:	e01b      	b.n	80026be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002686:	f7ff fc31 	bl	8001eec <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d914      	bls.n	80026be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d10d      	bne.n	80026be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	f043 0210 	orr.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e007      	b.n	80026ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d0dc      	beq.n	8002686 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4906      	ldr	r1, [pc, #24]	; (8002780 <__NVIC_EnableIRQ+0x34>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff90 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff2d 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff42 	bl	8002730 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff90 	bl	80027d8 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5f 	bl	8002784 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff35 	bl	800274c <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffa2 	bl	800283c <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d008      	beq.n	800292c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2204      	movs	r2, #4
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e020      	b.n	800296e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020e 	bic.w	r2, r2, #14
 800293a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d005      	beq.n	800299c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2204      	movs	r2, #4
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e051      	b.n	8002a40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020e 	bic.w	r2, r2, #14
 80029aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_DMA_Abort_IT+0xd4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d029      	beq.n	8002a1a <HAL_DMA_Abort_IT+0xa2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_DMA_Abort_IT+0xd8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_Abort_IT+0x9e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_DMA_Abort_IT+0xdc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01a      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x98>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_DMA_Abort_IT+0xe0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d012      	beq.n	8002a0a <HAL_DMA_Abort_IT+0x92>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_DMA_Abort_IT+0xe4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00a      	beq.n	8002a04 <HAL_DMA_Abort_IT+0x8c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HAL_DMA_Abort_IT+0xe8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d102      	bne.n	80029fe <HAL_DMA_Abort_IT+0x86>
 80029f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029fc:	e00e      	b.n	8002a1c <HAL_DMA_Abort_IT+0xa4>
 80029fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a02:	e00b      	b.n	8002a1c <HAL_DMA_Abort_IT+0xa4>
 8002a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a08:	e008      	b.n	8002a1c <HAL_DMA_Abort_IT+0xa4>
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0e:	e005      	b.n	8002a1c <HAL_DMA_Abort_IT+0xa4>
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a14:	e002      	b.n	8002a1c <HAL_DMA_Abort_IT+0xa4>
 8002a16:	2310      	movs	r3, #16
 8002a18:	e000      	b.n	8002a1c <HAL_DMA_Abort_IT+0xa4>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_DMA_Abort_IT+0xec>)
 8002a1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
    } 
  }
  return status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40020008 	.word	0x40020008
 8002a50:	4002001c 	.word	0x4002001c
 8002a54:	40020030 	.word	0x40020030
 8002a58:	40020044 	.word	0x40020044
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	4002006c 	.word	0x4002006c
 8002a64:	40020000 	.word	0x40020000

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b08b      	sub	sp, #44	; 0x2c
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7a:	e169      	b.n	8002d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f040 8158 	bne.w	8002d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a9a      	ldr	r2, [pc, #616]	; (8002d08 <HAL_GPIO_Init+0x2a0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d05e      	beq.n	8002b62 <HAL_GPIO_Init+0xfa>
 8002aa4:	4a98      	ldr	r2, [pc, #608]	; (8002d08 <HAL_GPIO_Init+0x2a0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d875      	bhi.n	8002b96 <HAL_GPIO_Init+0x12e>
 8002aaa:	4a98      	ldr	r2, [pc, #608]	; (8002d0c <HAL_GPIO_Init+0x2a4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d058      	beq.n	8002b62 <HAL_GPIO_Init+0xfa>
 8002ab0:	4a96      	ldr	r2, [pc, #600]	; (8002d0c <HAL_GPIO_Init+0x2a4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d86f      	bhi.n	8002b96 <HAL_GPIO_Init+0x12e>
 8002ab6:	4a96      	ldr	r2, [pc, #600]	; (8002d10 <HAL_GPIO_Init+0x2a8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d052      	beq.n	8002b62 <HAL_GPIO_Init+0xfa>
 8002abc:	4a94      	ldr	r2, [pc, #592]	; (8002d10 <HAL_GPIO_Init+0x2a8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d869      	bhi.n	8002b96 <HAL_GPIO_Init+0x12e>
 8002ac2:	4a94      	ldr	r2, [pc, #592]	; (8002d14 <HAL_GPIO_Init+0x2ac>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d04c      	beq.n	8002b62 <HAL_GPIO_Init+0xfa>
 8002ac8:	4a92      	ldr	r2, [pc, #584]	; (8002d14 <HAL_GPIO_Init+0x2ac>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d863      	bhi.n	8002b96 <HAL_GPIO_Init+0x12e>
 8002ace:	4a92      	ldr	r2, [pc, #584]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d046      	beq.n	8002b62 <HAL_GPIO_Init+0xfa>
 8002ad4:	4a90      	ldr	r2, [pc, #576]	; (8002d18 <HAL_GPIO_Init+0x2b0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d85d      	bhi.n	8002b96 <HAL_GPIO_Init+0x12e>
 8002ada:	2b12      	cmp	r3, #18
 8002adc:	d82a      	bhi.n	8002b34 <HAL_GPIO_Init+0xcc>
 8002ade:	2b12      	cmp	r3, #18
 8002ae0:	d859      	bhi.n	8002b96 <HAL_GPIO_Init+0x12e>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <HAL_GPIO_Init+0x80>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b63 	.word	0x08002b63
 8002aec:	08002b3d 	.word	0x08002b3d
 8002af0:	08002b4f 	.word	0x08002b4f
 8002af4:	08002b91 	.word	0x08002b91
 8002af8:	08002b97 	.word	0x08002b97
 8002afc:	08002b97 	.word	0x08002b97
 8002b00:	08002b97 	.word	0x08002b97
 8002b04:	08002b97 	.word	0x08002b97
 8002b08:	08002b97 	.word	0x08002b97
 8002b0c:	08002b97 	.word	0x08002b97
 8002b10:	08002b97 	.word	0x08002b97
 8002b14:	08002b97 	.word	0x08002b97
 8002b18:	08002b97 	.word	0x08002b97
 8002b1c:	08002b97 	.word	0x08002b97
 8002b20:	08002b97 	.word	0x08002b97
 8002b24:	08002b97 	.word	0x08002b97
 8002b28:	08002b97 	.word	0x08002b97
 8002b2c:	08002b45 	.word	0x08002b45
 8002b30:	08002b59 	.word	0x08002b59
 8002b34:	4a79      	ldr	r2, [pc, #484]	; (8002d1c <HAL_GPIO_Init+0x2b4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b3a:	e02c      	b.n	8002b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e029      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	623b      	str	r3, [r7, #32]
          break;
 8002b4c:	e024      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	3308      	adds	r3, #8
 8002b54:	623b      	str	r3, [r7, #32]
          break;
 8002b56:	e01f      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e01a      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e013      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b78:	2308      	movs	r3, #8
 8002b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	611a      	str	r2, [r3, #16]
          break;
 8002b82:	e009      	b.n	8002b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b84:	2308      	movs	r3, #8
 8002b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	615a      	str	r2, [r3, #20]
          break;
 8002b8e:	e003      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b90:	2300      	movs	r3, #0
 8002b92:	623b      	str	r3, [r7, #32]
          break;
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x130>
          break;
 8002b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2bff      	cmp	r3, #255	; 0xff
 8002b9c:	d801      	bhi.n	8002ba2 <HAL_GPIO_Init+0x13a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_Init+0x13e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d802      	bhi.n	8002bb4 <HAL_GPIO_Init+0x14c>
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0x152>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	3b08      	subs	r3, #8
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	6a39      	ldr	r1, [r7, #32]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80b1 	beq.w	8002d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a4c      	ldr	r2, [pc, #304]	; (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c00:	4a48      	ldr	r2, [pc, #288]	; (8002d24 <HAL_GPIO_Init+0x2bc>)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a40      	ldr	r2, [pc, #256]	; (8002d28 <HAL_GPIO_Init+0x2c0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_GPIO_Init+0x1ec>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00d      	beq.n	8002c50 <HAL_GPIO_Init+0x1e8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3e      	ldr	r2, [pc, #248]	; (8002d30 <HAL_GPIO_Init+0x2c8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <HAL_GPIO_Init+0x1e4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a3d      	ldr	r2, [pc, #244]	; (8002d34 <HAL_GPIO_Init+0x2cc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_GPIO_Init+0x1e0>
 8002c44:	2303      	movs	r3, #3
 8002c46:	e006      	b.n	8002c56 <HAL_GPIO_Init+0x1ee>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	e004      	b.n	8002c56 <HAL_GPIO_Init+0x1ee>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e002      	b.n	8002c56 <HAL_GPIO_Init+0x1ee>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_GPIO_Init+0x1ee>
 8002c54:	2300      	movs	r3, #0
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c66:	492f      	ldr	r1, [pc, #188]	; (8002d24 <HAL_GPIO_Init+0x2bc>)
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	492c      	ldr	r1, [pc, #176]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	4928      	ldr	r1, [pc, #160]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4922      	ldr	r1, [pc, #136]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	491e      	ldr	r1, [pc, #120]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d006      	beq.n	8002cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4918      	ldr	r1, [pc, #96]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	4914      	ldr	r1, [pc, #80]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d021      	beq.n	8002d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e021      	b.n	8002d4a <HAL_GPIO_Init+0x2e2>
 8002d06:	bf00      	nop
 8002d08:	10320000 	.word	0x10320000
 8002d0c:	10310000 	.word	0x10310000
 8002d10:	10220000 	.word	0x10220000
 8002d14:	10210000 	.word	0x10210000
 8002d18:	10120000 	.word	0x10120000
 8002d1c:	10110000 	.word	0x10110000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40010800 	.word	0x40010800
 8002d2c:	40010c00 	.word	0x40010c00
 8002d30:	40011000 	.word	0x40011000
 8002d34:	40011400 	.word	0x40011400
 8002d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_GPIO_Init+0x304>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	4909      	ldr	r1, [pc, #36]	; (8002d6c <HAL_GPIO_Init+0x304>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f47f ae8e 	bne.w	8002a7c <HAL_GPIO_Init+0x14>
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	372c      	adds	r7, #44	; 0x2c
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40010400 	.word	0x40010400

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002db0:	f000 f808 	bl	8002dc4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dba:	615a      	str	r2, [r3, #20]
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e272      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
 8002e08:	4b8c      	ldr	r3, [pc, #560]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d10b      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06c      	beq.n	8002efc <HAL_RCC_OscConfig+0x12c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d168      	bne.n	8002efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e24c      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x76>
 8002e38:	4b80      	ldr	r3, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7f      	ldr	r2, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7a      	ldr	r2, [pc, #488]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b78      	ldr	r3, [pc, #480]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a77      	ldr	r2, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0xbc>
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a71      	ldr	r2, [pc, #452]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6a      	ldr	r2, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a67      	ldr	r2, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff f81e 	bl	8001eec <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7ff f81a 	bl	8001eec <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e200      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe4>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f80a 	bl	8001eec <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff f806 	bl	8001eec <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1ec      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x10c>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c0      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4939      	ldr	r1, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe ffbf 	bl	8001eec <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe ffbb 	bl	8001eec <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a1      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4927      	ldr	r1, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe ff9e 	bl	8001eec <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe ff9a 	bl	8001eec <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e180      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03a      	beq.n	8003054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7fe ff7e 	bl	8001eec <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe ff7a 	bl	8001eec <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e160      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003012:	2001      	movs	r0, #1
 8003014:	f000 face 	bl	80035b4 <RCC_Delay>
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_OscConfig+0x274>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe ff64 	bl	8001eec <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	e00f      	b.n	8003048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe ff60 	bl	8001eec <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d908      	bls.n	8003048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e146      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	42420000 	.word	0x42420000
 8003044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e9      	bne.n	8003028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a6 	beq.w	80031ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]
 800307e:	4b85      	ldr	r3, [pc, #532]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b7f      	ldr	r3, [pc, #508]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7e      	ldr	r2, [pc, #504]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fe ff21 	bl	8001eec <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fe ff1d 	bl	8001eec <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b64      	cmp	r3, #100	; 0x64
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e103      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b75      	ldr	r3, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x4c8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x312>
 80030d4:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e02d      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x334>
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a69      	ldr	r2, [pc, #420]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a66      	ldr	r2, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x356>
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	4b58      	ldr	r3, [pc, #352]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7fe fed1 	bl	8001eec <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe fecd 	bl	8001eec <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0b1      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ee      	beq.n	800314e <HAL_RCC_OscConfig+0x37e>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fe febb 	bl	8001eec <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe feb7 	bl	8001eec <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e09b      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d061      	beq.n	8003288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d146      	bne.n	800325a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fe8b 	bl	8001eec <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fe87 	bl	8001eec <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e06d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4921      	ldr	r1, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a19      	ldr	r1, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	430b      	orrs	r3, r1
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4cc>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fe5b 	bl	8001eec <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fe57 	bl	8001eec <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e03d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x46a>
 8003258:	e035      	b.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x4cc>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fe44 	bl	8001eec <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fe40 	bl	8001eec <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e026      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x498>
 8003286:	e01e      	b.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e019      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x500>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d0      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d910      	bls.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4965      	ldr	r1, [pc, #404]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0b8      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	494d      	ldr	r1, [pc, #308]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d040      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d115      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07f      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e073      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06b      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4936      	ldr	r1, [pc, #216]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7fe fd92 	bl	8001eec <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fe fd8e 	bl	8001eec <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e053      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d210      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	4922      	ldr	r1, [pc, #136]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e032      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4916      	ldr	r1, [pc, #88]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490e      	ldr	r1, [pc, #56]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f821 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490a      	ldr	r1, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1cc>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fcf0 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40022000 	.word	0x40022000
 8003498:	40021000 	.word	0x40021000
 800349c:	08008058 	.word	0x08008058
 80034a0:	2000002c 	.word	0x2000002c
 80034a4:	20000030 	.word	0x20000030

080034a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_GetSysClockFreq+0x94>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x30>
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x36>
 80034d6:	e027      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 80034da:	613b      	str	r3, [r7, #16]
      break;
 80034dc:	e027      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e8:	5cd3      	ldrb	r3, [r2, r3]
 80034ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_RCC_GetSysClockFreq+0x94>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0c5b      	lsrs	r3, r3, #17
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	4a11      	ldr	r2, [pc, #68]	; (8003548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e004      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <HAL_RCC_GetSysClockFreq+0xa4>)
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 800352a:	613b      	str	r3, [r7, #16]
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	693b      	ldr	r3, [r7, #16]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	007a1200 	.word	0x007a1200
 8003544:	08008070 	.word	0x08008070
 8003548:	08008080 	.word	0x08008080
 800354c:	003d0900 	.word	0x003d0900

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <HAL_RCC_GetHCLKFreq+0x10>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	2000002c 	.word	0x2000002c

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003568:	f7ff fff2 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	08008068 	.word	0x08008068

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003590:	f7ff ffde 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0adb      	lsrs	r3, r3, #11
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08008068 	.word	0x08008068

080035b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <RCC_Delay+0x34>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <RCC_Delay+0x38>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d0:	bf00      	nop
  }
  while (Delay --);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <RCC_Delay+0x1c>
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	2000002c 	.word	0x2000002c
 80035ec:	10624dd3 	.word	0x10624dd3

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d07d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d118      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a42      	ldr	r2, [pc, #264]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003650:	f7fe fc4c 	bl	8001eec <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fe fc48 	bl	8001eec <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e06d      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	d027      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036aa:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d014      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe fc17 	bl	8001eec <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe fc13 	bl	8001eec <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e036      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4917      	ldr	r1, [pc, #92]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	42420440 	.word	0x42420440

0800375c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d001      	beq.n	8003774 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIM_Base_Start+0x88>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_TIM_Base_Start+0x48>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_Base_Start+0x48>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_TIM_Base_Start+0x8c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_Base_Start+0x48>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_TIM_Base_Start+0x90>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d111      	bne.n	80037c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d010      	beq.n	80037d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c6:	e007      	b.n	80037d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800

080037f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e041      	b.n	8003886 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe f95e 	bl	8001ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 fcae 	bl	8004190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_TIM_PWM_Start+0x24>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e022      	b.n	80038fa <HAL_TIM_PWM_Start+0x6a>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d109      	bne.n	80038ce <HAL_TIM_PWM_Start+0x3e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	e015      	b.n	80038fa <HAL_TIM_PWM_Start+0x6a>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d109      	bne.n	80038e8 <HAL_TIM_PWM_Start+0x58>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e008      	b.n	80038fa <HAL_TIM_PWM_Start+0x6a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e05e      	b.n	80039c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Start+0x82>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003910:	e013      	b.n	800393a <HAL_TIM_PWM_Start+0xaa>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d104      	bne.n	8003922 <HAL_TIM_PWM_Start+0x92>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003920:	e00b      	b.n	800393a <HAL_TIM_PWM_Start+0xaa>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Start+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	e003      	b.n	800393a <HAL_TIM_PWM_Start+0xaa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ff1b 	bl	800477e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_TIM_PWM_Start+0x138>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d107      	bne.n	8003962 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_TIM_PWM_Start+0x138>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_TIM_PWM_Start+0xfa>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d009      	beq.n	800398a <HAL_TIM_PWM_Start+0xfa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a14      	ldr	r2, [pc, #80]	; (80039cc <HAL_TIM_PWM_Start+0x13c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIM_PWM_Start+0xfa>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <HAL_TIM_PWM_Start+0x140>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b06      	cmp	r3, #6
 800399a:	d010      	beq.n	80039be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	e007      	b.n	80039be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800

080039d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e041      	b.n	8003a6a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe f824 	bl	8001a48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f000 fbbc 	bl	8004190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Start+0x1a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_IC_Start+0x42>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_IC_Start+0x2a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_IC_Start+0x42>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_IC_Start+0x3a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_IC_Start+0x42>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <HAL_TIM_IC_Start+0x54>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e013      	b.n	8003af0 <HAL_TIM_IC_Start+0x7c>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d104      	bne.n	8003ad8 <HAL_TIM_IC_Start+0x64>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e00b      	b.n	8003af0 <HAL_TIM_IC_Start+0x7c>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d104      	bne.n	8003ae8 <HAL_TIM_IC_Start+0x74>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e003      	b.n	8003af0 <HAL_TIM_IC_Start+0x7c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d102      	bne.n	8003afe <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003af8:	7bbb      	ldrb	r3, [r7, #14]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06d      	b.n	8003bde <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_IC_Start+0x9e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b10:	e013      	b.n	8003b3a <HAL_TIM_IC_Start+0xc6>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_IC_Start+0xae>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b20:	e00b      	b.n	8003b3a <HAL_TIM_IC_Start+0xc6>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_IC_Start+0xbe>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	e003      	b.n	8003b3a <HAL_TIM_IC_Start+0xc6>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_IC_Start+0xd6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b48:	e013      	b.n	8003b72 <HAL_TIM_IC_Start+0xfe>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_IC_Start+0xe6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b58:	e00b      	b.n	8003b72 <HAL_TIM_IC_Start+0xfe>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_IC_Start+0xf6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b68:	e003      	b.n	8003b72 <HAL_TIM_IC_Start+0xfe>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fdff 	bl	800477e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIM_IC_Start+0x174>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIM_IC_Start+0x134>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIM_IC_Start+0x134>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_TIM_IC_Start+0x178>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIM_IC_Start+0x134>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <HAL_TIM_IC_Start+0x17c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d111      	bne.n	8003bcc <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d010      	beq.n	8003bdc <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	e007      	b.n	8003bdc <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0202 	mvn.w	r2, #2
 8003c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fc2a 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa8b 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fa91 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0204 	mvn.w	r2, #4
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fc00 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa61 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa67 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0208 	mvn.w	r2, #8
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fbd6 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa37 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fa3d 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d122      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0210 	mvn.w	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2208      	movs	r2, #8
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fbac 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa0d 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fa13 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0201 	mvn.w	r2, #1
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9e8 	bl	8004148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fd79 	bl	8004896 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d107      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9d7 	bl	800417e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d10e      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0220 	mvn.w	r2, #32
 8003df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fd44 	bl	8004884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e088      	b.n	8003f34 <HAL_TIM_IC_ConfigChannel+0x130>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f000 fb90 	bl	8004564 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 020c 	bic.w	r2, r2, #12
 8003e52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
 8003e66:	e060      	b.n	8003f2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f000 fbcb 	bl	8004618 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6999      	ldr	r1, [r3, #24]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	021a      	lsls	r2, r3, #8
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	619a      	str	r2, [r3, #24]
 8003ea6:	e040      	b.n	8003f2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d11b      	bne.n	8003ee6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 fbe7 	bl	8004690 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 020c 	bic.w	r2, r2, #12
 8003ed0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69d9      	ldr	r1, [r3, #28]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	61da      	str	r2, [r3, #28]
 8003ee4:	e021      	b.n	8003f2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	d11c      	bne.n	8003f26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f000 fc03 	bl	8004706 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69d9      	ldr	r1, [r3, #28]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]
 8003f24:	e001      	b.n	8003f2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0ae      	b.n	80040b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	f200 809f 	bhi.w	80040a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003fa5 	.word	0x08003fa5
 8003f74:	080040a9 	.word	0x080040a9
 8003f78:	080040a9 	.word	0x080040a9
 8003f7c:	080040a9 	.word	0x080040a9
 8003f80:	08003fe5 	.word	0x08003fe5
 8003f84:	080040a9 	.word	0x080040a9
 8003f88:	080040a9 	.word	0x080040a9
 8003f8c:	080040a9 	.word	0x080040a9
 8003f90:	08004027 	.word	0x08004027
 8003f94:	080040a9 	.word	0x080040a9
 8003f98:	080040a9 	.word	0x080040a9
 8003f9c:	080040a9 	.word	0x080040a9
 8003fa0:	08004067 	.word	0x08004067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f952 	bl	8004254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6999      	ldr	r1, [r3, #24]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	619a      	str	r2, [r3, #24]
      break;
 8003fe2:	e064      	b.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f998 	bl	8004320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	619a      	str	r2, [r3, #24]
      break;
 8004024:	e043      	b.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f9e1 	bl	80043f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0208 	orr.w	r2, r2, #8
 8004040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0204 	bic.w	r2, r2, #4
 8004050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69d9      	ldr	r1, [r3, #28]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
      break;
 8004064:	e023      	b.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa2b 	bl	80044c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	61da      	str	r2, [r3, #28]
      break;
 80040a6:	e002      	b.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
      break;
 80040ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d831      	bhi.n	8004138 <HAL_TIM_ReadCapturedValue+0x78>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004139 	.word	0x08004139
 80040e4:	08004139 	.word	0x08004139
 80040e8:	08004139 	.word	0x08004139
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	08004139 	.word	0x08004139
 80040f4:	08004139 	.word	0x08004139
 80040f8:	08004139 	.word	0x08004139
 80040fc:	08004125 	.word	0x08004125
 8004100:	08004139 	.word	0x08004139
 8004104:	08004139 	.word	0x08004139
 8004108:	08004139 	.word	0x08004139
 800410c:	0800412f 	.word	0x0800412f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	60fb      	str	r3, [r7, #12]

      break;
 8004118:	e00f      	b.n	800413a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	60fb      	str	r3, [r7, #12]

      break;
 8004122:	e00a      	b.n	800413a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	60fb      	str	r3, [r7, #12]

      break;
 800412c:	e005      	b.n	800413a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	60fb      	str	r3, [r7, #12]

      break;
 8004136:	e000      	b.n	800413a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004138:	bf00      	nop
  }

  return tmpreg;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <TIM_Base_SetConfig+0xb8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0x30>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0x30>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a26      	ldr	r2, [pc, #152]	; (800424c <TIM_Base_SetConfig+0xbc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0x30>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a25      	ldr	r2, [pc, #148]	; (8004250 <TIM_Base_SetConfig+0xc0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d108      	bne.n	80041d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <TIM_Base_SetConfig+0xb8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_Base_SetConfig+0x62>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e0:	d007      	beq.n	80041f2 <TIM_Base_SetConfig+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <TIM_Base_SetConfig+0xbc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_Base_SetConfig+0x62>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a18      	ldr	r2, [pc, #96]	; (8004250 <TIM_Base_SetConfig+0xc0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d108      	bne.n	8004204 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <TIM_Base_SetConfig+0xb8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	615a      	str	r2, [r3, #20]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800

08004254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0201 	bic.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0302 	bic.w	r3, r3, #2
 800429c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <TIM_OC1_SetConfig+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10c      	bne.n	80042ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0308 	bic.w	r3, r3, #8
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a13      	ldr	r2, [pc, #76]	; (800431c <TIM_OC1_SetConfig+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00

08004320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f023 0210 	bic.w	r2, r3, #16
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0320 	bic.w	r3, r3, #32
 800436a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <TIM_OC2_SetConfig+0xd0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10d      	bne.n	800439c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <TIM_OC2_SetConfig+0xd0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d113      	bne.n	80043cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	621a      	str	r2, [r3, #32]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr
 80043f0:	40012c00 	.word	0x40012c00

080043f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800443c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <TIM_OC3_SetConfig+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10d      	bne.n	800446e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <TIM_OC3_SetConfig+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40012c00 	.word	0x40012c00

080044c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	031b      	lsls	r3, r3, #12
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <TIM_OC4_SetConfig+0x98>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d109      	bne.n	800453c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00

08004564 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f023 0201 	bic.w	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <TIM_TI1_SetConfig+0xa8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_TI1_SetConfig+0x46>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d007      	beq.n	80045aa <TIM_TI1_SetConfig+0x46>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <TIM_TI1_SetConfig+0xac>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_TI1_SetConfig+0x46>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <TIM_TI1_SetConfig+0xb0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d101      	bne.n	80045ae <TIM_TI1_SetConfig+0x4a>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <TIM_TI1_SetConfig+0x4c>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e003      	b.n	80045ce <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f023 030a 	bic.w	r3, r3, #10
 80045e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 030a 	and.w	r3, r3, #10
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800

08004618 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 0210 	bic.w	r2, r3, #16
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	031b      	lsls	r3, r3, #12
 800465c:	b29b      	uxth	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f023 0303 	bic.w	r3, r3, #3
 80046bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004706:	b480      	push	{r7}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004732:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004744:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	b29b      	uxth	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004758:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800477e:	b480      	push	{r7}
 8004780:	b087      	sub	sp, #28
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2201      	movs	r2, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	43db      	mvns	r3, r3
 80047a0:	401a      	ands	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e046      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d009      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10c      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800

08004884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e042      	b.n	8004940 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd f99a 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fd7f 	bl	80053f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b20      	cmp	r3, #32
 8004966:	d17c      	bne.n	8004a62 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_UART_Receive+0x2c>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e075      	b.n	8004a64 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2222      	movs	r2, #34	; 0x22
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498c:	f7fd faae 	bl	8001eec <HAL_GetTick>
 8004990:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d108      	bne.n	80049ba <HAL_UART_Receive+0x72>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e003      	b.n	80049c2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80049c2:	e043      	b.n	8004a4c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	2120      	movs	r1, #32
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fb04 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e042      	b.n	8004a64 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10c      	bne.n	80049fe <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	3302      	adds	r3, #2
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e01f      	b.n	8004a3e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a06:	d007      	beq.n	8004a18 <HAL_UART_Receive+0xd0>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_UART_Receive+0xde>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e008      	b.n	8004a38 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1b6      	bne.n	80049c4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
  }
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b0ba      	sub	sp, #232	; 0xe8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x66>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fbd1 	bl	8005272 <UART_Receive_IT>
      return;
 8004ad0:	e25b      	b.n	8004f8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80de 	beq.w	8004c98 <HAL_UART_IRQHandler+0x22c>
 8004adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80d1 	beq.w	8004c98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xae>
 8004b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f043 0201 	orr.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_UART_IRQHandler+0xd2>
 8004b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f043 0202 	orr.w	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_UART_IRQHandler+0xf6>
 8004b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f043 0204 	orr.w	r2, r3, #4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d011      	beq.n	8004b92 <HAL_UART_IRQHandler+0x126>
 8004b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	f043 0208 	orr.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 81f2 	beq.w	8004f80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_UART_IRQHandler+0x14e>
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fb5c 	bl	8005272 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <HAL_UART_IRQHandler+0x17a>
 8004bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d04f      	beq.n	8004c86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa66 	bl	80050b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d041      	beq.n	8004c7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3314      	adds	r3, #20
 8004c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1d9      	bne.n	8004bfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d013      	beq.n	8004c76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	4a7e      	ldr	r2, [pc, #504]	; (8004e4c <HAL_UART_IRQHandler+0x3e0>)
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fe8c 	bl	8002978 <HAL_DMA_Abort_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e00e      	b.n	8004c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f99c 	bl	8004fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e00a      	b.n	8004c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f998 	bl	8004fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	e006      	b.n	8004c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f994 	bl	8004fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c92:	e175      	b.n	8004f80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	bf00      	nop
    return;
 8004c96:	e173      	b.n	8004f80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	f040 814f 	bne.w	8004f40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8148 	beq.w	8004f40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8141 	beq.w	8004f40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80b6 	beq.w	8004e50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8145 	beq.w	8004f84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d02:	429a      	cmp	r2, r3
 8004d04:	f080 813e 	bcs.w	8004f84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	f000 8088 	beq.w	8004e2c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d48:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1d9      	bne.n	8004d1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e1      	bne.n	8004d68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfc:	f023 0310 	bic.w	r3, r3, #16
 8004e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e10:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e3      	bne.n	8004dea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fd6b 	bl	8002902 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8bf 	bl	8004fc6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e48:	e09c      	b.n	8004f84 <HAL_UART_IRQHandler+0x518>
 8004e4a:	bf00      	nop
 8004e4c:	0800517d 	.word	0x0800517d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 808e 	beq.w	8004f88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8089 	beq.w	8004f88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e3      	bne.n	8004e76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3314      	adds	r3, #20
 8004ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e3      	bne.n	8004eae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0310 	bic.w	r3, r3, #16
 8004f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f18:	61fa      	str	r2, [r7, #28]
 8004f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	69b9      	ldr	r1, [r7, #24]
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	617b      	str	r3, [r7, #20]
   return(result);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e3      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f844 	bl	8004fc6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f3e:	e023      	b.n	8004f88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <HAL_UART_IRQHandler+0x4f4>
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f923 	bl	80051a4 <UART_Transmit_IT>
    return;
 8004f5e:	e014      	b.n	8004f8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00e      	beq.n	8004f8a <HAL_UART_IRQHandler+0x51e>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f962 	bl	8005242 <UART_EndTransmit_IT>
    return;
 8004f7e:	e004      	b.n	8004f8a <HAL_UART_IRQHandler+0x51e>
    return;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f88:	bf00      	nop
  }
}
 8004f8a:	37e8      	adds	r7, #232	; 0xe8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b090      	sub	sp, #64	; 0x40
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fec:	e050      	b.n	8005090 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d04c      	beq.n	8005090 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <UART_WaitOnFlagUntilTimeout+0x30>
 8004ffc:	f7fc ff76 	bl	8001eec <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005008:	429a      	cmp	r2, r3
 800500a:	d241      	bcs.n	8005090 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800502c:	637a      	str	r2, [r7, #52]	; 0x34
 800502e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	613b      	str	r3, [r7, #16]
   return(result);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005060:	623a      	str	r2, [r7, #32]
 8005062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	6a3a      	ldr	r2, [r7, #32]
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	61bb      	str	r3, [r7, #24]
   return(result);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e5      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e00f      	b.n	80050b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	429a      	cmp	r2, r3
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d09f      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3740      	adds	r7, #64	; 0x40
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b095      	sub	sp, #84	; 0x54
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050e0:	643a      	str	r2, [r7, #64]	; 0x40
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	61fb      	str	r3, [r7, #28]
   return(result);
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	64bb      	str	r3, [r7, #72]	; 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3314      	adds	r3, #20
 8005112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800511a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	2b01      	cmp	r3, #1
 800512e:	d119      	bne.n	8005164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	647b      	str	r3, [r7, #68]	; 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005150:	61ba      	str	r2, [r7, #24]
 8005152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	613b      	str	r3, [r7, #16]
   return(result);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005172:	bf00      	nop
 8005174:	3754      	adds	r7, #84	; 0x54
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff ff0c 	bl	8004fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b21      	cmp	r3, #33	; 0x21
 80051b6:	d13e      	bne.n	8005236 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d114      	bne.n	80051ec <UART_Transmit_IT+0x48>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d110      	bne.n	80051ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]
 80051ea:	e008      	b.n	80051fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6211      	str	r1, [r2, #32]
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	4619      	mov	r1, r3
 800520c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005220:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005230:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005258:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff fe94 	bl	8004f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b08c      	sub	sp, #48	; 0x30
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b22      	cmp	r3, #34	; 0x22
 8005284:	f040 80ae 	bne.w	80053e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005290:	d117      	bne.n	80052c2 <UART_Receive_IT+0x50>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d113      	bne.n	80052c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
 80052c0:	e026      	b.n	8005310 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d4:	d007      	beq.n	80052e6 <UART_Receive_IT+0x74>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <UART_Receive_IT+0x82>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e008      	b.n	8005306 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005300:	b2da      	uxtb	r2, r3
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4619      	mov	r1, r3
 800531e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005320:	2b00      	cmp	r3, #0
 8005322:	d15d      	bne.n	80053e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0220 	bic.w	r2, r2, #32
 8005332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	2b01      	cmp	r3, #1
 8005368:	d135      	bne.n	80053d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	613b      	str	r3, [r7, #16]
   return(result);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	623a      	str	r2, [r7, #32]
 8005392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	6a3a      	ldr	r2, [r7, #32]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	61bb      	str	r3, [r7, #24]
   return(result);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d10a      	bne.n	80053c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fdf9 	bl	8004fc6 <HAL_UARTEx_RxEventCallback>
 80053d4:	e002      	b.n	80053dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fde3 	bl	8004fa2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e002      	b.n	80053e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3730      	adds	r7, #48	; 0x30
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800542a:	f023 030c 	bic.w	r3, r3, #12
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	430b      	orrs	r3, r1
 8005436:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a2c      	ldr	r2, [pc, #176]	; (8005504 <UART_SetConfig+0x114>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d103      	bne.n	8005460 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005458:	f7fe f898 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	e002      	b.n	8005466 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fe f880 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8005464:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009a      	lsls	r2, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <UART_SetConfig+0x118>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	0119      	lsls	r1, r3, #4
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fbb2 f2f3 	udiv	r2, r2, r3
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <UART_SetConfig+0x118>)
 800549e:	fba3 0302 	umull	r0, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2064      	movs	r0, #100	; 0x64
 80054a6:	fb00 f303 	mul.w	r3, r0, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a15      	ldr	r2, [pc, #84]	; (8005508 <UART_SetConfig+0x118>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054bc:	4419      	add	r1, r3
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009a      	lsls	r2, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <UART_SetConfig+0x118>)
 80054d6:	fba3 0302 	umull	r0, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2064      	movs	r0, #100	; 0x64
 80054de:	fb00 f303 	mul.w	r3, r0, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a07      	ldr	r2, [pc, #28]	; (8005508 <UART_SetConfig+0x118>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	440a      	add	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40013800 	.word	0x40013800
 8005508:	51eb851f 	.word	0x51eb851f

0800550c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800551a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551e:	2b84      	cmp	r3, #132	; 0x84
 8005520:	d005      	beq.n	800552e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005522:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	3303      	adds	r3, #3
 800552c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800553e:	f001 f991 	bl	8006864 <vTaskStartScheduler>
  
  return osOK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}

08005548 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af04      	add	r7, sp, #16
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d020      	beq.n	800559c <osThreadCreate+0x54>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01c      	beq.n	800559c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685c      	ldr	r4, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691e      	ldr	r6, [r3, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ffc9 	bl	800550c <makeFreeRtosPriority>
 800557a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005584:	9202      	str	r2, [sp, #8]
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	9100      	str	r1, [sp, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4632      	mov	r2, r6
 800558e:	4629      	mov	r1, r5
 8005590:	4620      	mov	r0, r4
 8005592:	f000 ff02 	bl	800639a <xTaskCreateStatic>
 8005596:	4603      	mov	r3, r0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e01c      	b.n	80055d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685c      	ldr	r4, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055a8:	b29e      	uxth	r6, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ffab 	bl	800550c <makeFreeRtosPriority>
 80055b6:	4602      	mov	r2, r0
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	9200      	str	r2, [sp, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	4632      	mov	r2, r6
 80055c4:	4629      	mov	r1, r5
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 ff43 	bl	8006452 <xTaskCreate>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055e0 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 f877 	bl	80066dc <vTaskDelete>
  return osOK;
 80055ee:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <osDelay+0x16>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	e000      	b.n	8005610 <osDelay+0x18>
 800560e:	2301      	movs	r3, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f8f3 	bl	80067fc <vTaskDelay>
  
  return osOK;
 8005616:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af02      	add	r7, sp, #8
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00f      	beq.n	8005652 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10a      	bne.n	800564e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2203      	movs	r2, #3
 800563e:	9200      	str	r2, [sp, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	2100      	movs	r1, #0
 8005644:	2001      	movs	r0, #1
 8005646:	f000 fac9 	bl	8005bdc <xQueueGenericCreateStatic>
 800564a:	4603      	mov	r3, r0
 800564c:	e016      	b.n	800567c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	e014      	b.n	800567c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d110      	bne.n	800567a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005658:	2203      	movs	r2, #3
 800565a:	2100      	movs	r1, #0
 800565c:	2001      	movs	r0, #1
 800565e:	f000 fb34 	bl	8005cca <xQueueGenericCreate>
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <osSemaphoreCreate+0x56>
 800566a:	2300      	movs	r3, #0
 800566c:	2200      	movs	r2, #0
 800566e:	2100      	movs	r1, #0
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fb87 	bl	8005d84 <xQueueGenericSend>
      return sema;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	e000      	b.n	800567c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800567a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800568a:	201c      	movs	r0, #28
 800568c:	f002 f9b0 	bl	80079f0 <pvPortMalloc>
 8005690:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f982 	bl	80059ac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80056ae:	687b      	ldr	r3, [r7, #4]
	}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b090      	sub	sp, #64	; 0x40
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <xEventGroupWaitBits+0x56>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61fb      	str	r3, [r7, #28]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	61bb      	str	r3, [r7, #24]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800572a:	f001 fd55 	bl	80071d8 <xTaskGetSchedulerState>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <xEventGroupWaitBits+0x82>
 8005734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <xEventGroupWaitBits+0x86>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <xEventGroupWaitBits+0x88>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	617b      	str	r3, [r7, #20]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800575a:	f001 f8ed 	bl	8006938 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800576a:	f000 f8fe 	bl	800596a <prvTestWaitCondition>
 800576e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00e      	beq.n	8005794 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800577a:	2300      	movs	r3, #0
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d028      	beq.n	80057d6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	43db      	mvns	r3, r3
 800578c:	401a      	ands	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e020      	b.n	80057d6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800579e:	2301      	movs	r3, #1
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30
 80057a2:	e018      	b.n	80057d6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80057c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c2:	1d18      	adds	r0, r3, #4
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	4313      	orrs	r3, r2
 80057ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057cc:	4619      	mov	r1, r3
 80057ce:	f001 faa1 	bl	8006d14 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80057d6:	f001 f8bd 	bl	8006954 <xTaskResumeAll>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d031      	beq.n	8005846 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80057e8:	4b19      	ldr	r3, [pc, #100]	; (8005850 <xEventGroupWaitBits+0x198>)
 80057ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80057f8:	f001 feb8 	bl	800756c <uxTaskResetEventItemValue>
 80057fc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11a      	bne.n	800583e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005808:	f002 f830 	bl	800786c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005818:	f000 f8a7 	bl	800596a <prvTestWaitCondition>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	43db      	mvns	r3, r3
 8005830:	401a      	ands	r2, r3
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800583a:	f002 f847 	bl	80078cc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005848:	4618      	mov	r0, r3
 800584a:	3740      	adds	r7, #64	; 0x40
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	; 0x38
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800585e:	2300      	movs	r3, #0
 8005860:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005866:	2300      	movs	r3, #0
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xEventGroupSetBits+0x32>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <xEventGroupSetBits+0x52>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	3304      	adds	r3, #4
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	3308      	adds	r3, #8
 80058b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80058b2:	f001 f841 	bl	8006938 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80058c8:	e03c      	b.n	8005944 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005904:	e008      	b.n	8005918 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	4013      	ands	r3, r2
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	429a      	cmp	r2, r3
 8005912:	d101      	bne.n	8005918 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d010      	beq.n	8005940 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005938:	4619      	mov	r1, r3
 800593a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800593c:	f001 fa88 	bl	8006e50 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	429a      	cmp	r2, r3
 800594a:	d1be      	bne.n	80058ca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	43db      	mvns	r3, r3
 8005954:	401a      	ands	r2, r3
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800595a:	f000 fffb 	bl	8006954 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	681b      	ldr	r3, [r3, #0]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3738      	adds	r7, #56	; 0x38
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800598a:	2301      	movs	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e007      	b.n	80059a0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d101      	bne.n	80059a0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80059a0:	697b      	ldr	r3, [r7, #20]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f103 0208 	add.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295
 80059c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 0208 	add.w	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f103 0208 	add.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d103      	bne.n	8005a68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e00c      	b.n	8005a82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e002      	b.n	8005a76 <vListInsert+0x2e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d2f6      	bcs.n	8005a70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6892      	ldr	r2, [r2, #8]
 8005ace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6852      	ldr	r2, [r2, #4]
 8005ad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d103      	bne.n	8005aec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr
	...

08005b0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericReset+0x2a>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60bb      	str	r3, [r7, #8]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b36:	f001 fe99 	bl	800786c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	3b01      	subs	r3, #1
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	22ff      	movs	r2, #255	; 0xff
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d114      	bne.n	8005bb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01a      	beq.n	8005bca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3310      	adds	r3, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 f8f7 	bl	8006d8c <xTaskRemoveFromEventList>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <xQueueGenericReset+0xcc>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	e009      	b.n	8005bca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3310      	adds	r3, #16
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fef6 	bl	80059ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fef1 	bl	80059ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bca:	f001 fe7f 	bl	80078cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bce:	2301      	movs	r3, #1
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <xQueueGenericCreateStatic+0x52>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <xQueueGenericCreateStatic+0x56>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <xQueueGenericCreateStatic+0x58>
 8005c32:	2300      	movs	r3, #0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	623b      	str	r3, [r7, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <xQueueGenericCreateStatic+0x7e>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueGenericCreateStatic+0x82>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueGenericCreateStatic+0x84>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61fb      	str	r3, [r7, #28]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c7a:	2348      	movs	r3, #72	; 0x48
 8005c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b48      	cmp	r3, #72	; 0x48
 8005c82:	d00a      	beq.n	8005c9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	61bb      	str	r3, [r7, #24]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f843 	bl	8005d46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3730      	adds	r7, #48	; 0x30
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b08a      	sub	sp, #40	; 0x28
 8005cce:	af02      	add	r7, sp, #8
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	613b      	str	r3, [r7, #16]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e004      	b.n	8005d0a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
 8005d08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3348      	adds	r3, #72	; 0x48
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fe6e 	bl	80079f0 <pvPortMalloc>
 8005d14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00f      	beq.n	8005d3c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	3348      	adds	r3, #72	; 0x48
 8005d20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d2a:	79fa      	ldrb	r2, [r7, #7]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f805 	bl	8005d46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e002      	b.n	8005d68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d74:	2101      	movs	r1, #1
 8005d76:	69b8      	ldr	r0, [r7, #24]
 8005d78:	f7ff fec8 	bl	8005b0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	; 0x38
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d92:	2300      	movs	r3, #0
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xQueueGenericSend+0x32>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d103      	bne.n	8005dc4 <xQueueGenericSend+0x40>
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <xQueueGenericSend+0x44>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <xQueueGenericSend+0x46>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <xQueueGenericSend+0x60>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d103      	bne.n	8005df2 <xQueueGenericSend+0x6e>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <xQueueGenericSend+0x72>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <xQueueGenericSend+0x74>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xQueueGenericSend+0x8e>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	623b      	str	r3, [r7, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e12:	f001 f9e1 	bl	80071d8 <xTaskGetSchedulerState>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <xQueueGenericSend+0x9e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <xQueueGenericSend+0xa2>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <xQueueGenericSend+0xa4>
 8005e26:	2300      	movs	r3, #0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	61fb      	str	r3, [r7, #28]
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e42:	f001 fd13 	bl	800786c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <xQueueGenericSend+0xd4>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d129      	bne.n	8005eac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e5e:	f000 f9b2 	bl	80061c6 <prvCopyDataToQueue>
 8005e62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d010      	beq.n	8005e8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 ff8b 	bl	8006d8c <xTaskRemoveFromEventList>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d013      	beq.n	8005ea4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e7c:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <xQueueGenericSend+0x1f8>)
 8005e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	e00a      	b.n	8005ea4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e94:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <xQueueGenericSend+0x1f8>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ea4:	f001 fd12 	bl	80078cc <vPortExitCritical>
				return pdPASS;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e063      	b.n	8005f74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eb2:	f001 fd0b 	bl	80078cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e05c      	b.n	8005f74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 f825 	bl	8006f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ece:	f001 fcfd 	bl	80078cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ed2:	f000 fd31 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ed6:	f001 fcc9 	bl	800786c <vPortEnterCritical>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d103      	bne.n	8005ef0 <xQueueGenericSend+0x16c>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d103      	bne.n	8005f06 <xQueueGenericSend+0x182>
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f06:	f001 fce1 	bl	80078cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f0a:	1d3a      	adds	r2, r7, #4
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f814 	bl	8006f40 <xTaskCheckForTimeOut>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d124      	bne.n	8005f68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f20:	f000 fa23 	bl	800636a <prvIsQueueFull>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d018      	beq.n	8005f5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 feca 	bl	8006ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f3a:	f000 f9ae 	bl	800629a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f3e:	f000 fd09 	bl	8006954 <xTaskResumeAll>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f47f af7c 	bne.w	8005e42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <xQueueGenericSend+0x1f8>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	e772      	b.n	8005e42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5e:	f000 f99c 	bl	800629a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f62:	f000 fcf7 	bl	8006954 <xTaskResumeAll>
 8005f66:	e76c      	b.n	8005e42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6a:	f000 f996 	bl	800629a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f6e:	f000 fcf1 	bl	8006954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f72:	2300      	movs	r3, #0
		}
	}
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3738      	adds	r7, #56	; 0x38
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fd0:	f001 f902 	bl	80071d8 <xTaskGetSchedulerState>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <xQueueSemaphoreTake+0x60>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <xQueueSemaphoreTake+0x64>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <xQueueSemaphoreTake+0x66>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61bb      	str	r3, [r7, #24]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006000:	f001 fc34 	bl	800786c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d024      	beq.n	800605a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	1e5a      	subs	r2, r3, #1
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006020:	f001 fabc 	bl	800759c <pvTaskIncrementMutexHeldCount>
 8006024:	4602      	mov	r2, r0
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	3310      	adds	r3, #16
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fea8 	bl	8006d8c <xTaskRemoveFromEventList>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006042:	4b54      	ldr	r3, [pc, #336]	; (8006194 <xQueueSemaphoreTake+0x214>)
 8006044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006052:	f001 fc3b 	bl	80078cc <vPortExitCritical>
				return pdPASS;
 8006056:	2301      	movs	r3, #1
 8006058:	e097      	b.n	800618a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d111      	bne.n	8006084 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	617b      	str	r3, [r7, #20]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800607c:	f001 fc26 	bl	80078cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006080:	2300      	movs	r3, #0
 8006082:	e082      	b.n	800618a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800608a:	f107 030c 	add.w	r3, r7, #12
 800608e:	4618      	mov	r0, r3
 8006090:	f000 ff40 	bl	8006f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006098:	f001 fc18 	bl	80078cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800609c:	f000 fc4c 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a0:	f001 fbe4 	bl	800786c <vPortEnterCritical>
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d103      	bne.n	80060ba <xQueueSemaphoreTake+0x13a>
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c0:	b25b      	sxtb	r3, r3
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d103      	bne.n	80060d0 <xQueueSemaphoreTake+0x150>
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d0:	f001 fbfc 	bl	80078cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d4:	463a      	mov	r2, r7
 80060d6:	f107 030c 	add.w	r3, r7, #12
 80060da:	4611      	mov	r1, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 ff2f 	bl	8006f40 <xTaskCheckForTimeOut>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d132      	bne.n	800614e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060ea:	f000 f928 	bl	800633e <prvIsQueueEmpty>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d026      	beq.n	8006142 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80060fc:	f001 fbb6 	bl	800786c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4618      	mov	r0, r3
 8006106:	f001 f885 	bl	8007214 <xTaskPriorityInherit>
 800610a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800610c:	f001 fbde 	bl	80078cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fdd7 	bl	8006ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800611e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006120:	f000 f8bb 	bl	800629a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006124:	f000 fc16 	bl	8006954 <xTaskResumeAll>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	f47f af68 	bne.w	8006000 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006130:	4b18      	ldr	r3, [pc, #96]	; (8006194 <xQueueSemaphoreTake+0x214>)
 8006132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	e75e      	b.n	8006000 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006144:	f000 f8a9 	bl	800629a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006148:	f000 fc04 	bl	8006954 <xTaskResumeAll>
 800614c:	e758      	b.n	8006000 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800614e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006150:	f000 f8a3 	bl	800629a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006154:	f000 fbfe 	bl	8006954 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800615a:	f000 f8f0 	bl	800633e <prvIsQueueEmpty>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	f43f af4d 	beq.w	8006000 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800616c:	f001 fb7e 	bl	800786c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006172:	f000 f811 	bl	8006198 <prvGetDisinheritPriorityAfterTimeout>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800617e:	4618      	mov	r0, r3
 8006180:	f001 f954 	bl	800742c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006184:	f001 fba2 	bl	80078cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800618a:	4618      	mov	r0, r3
 800618c:	3738      	adds	r7, #56	; 0x38
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d006      	beq.n	80061b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1c3 0304 	rsb	r3, r3, #4
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e001      	b.n	80061ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80061ba:	68fb      	ldr	r3, [r7, #12]
	}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b086      	sub	sp, #24
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d14d      	bne.n	8006288 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 f895 	bl	8007320 <xTaskPriorityDisinherit>
 80061f6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	e043      	b.n	8006288 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d119      	bne.n	800623a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6898      	ldr	r0, [r3, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	461a      	mov	r2, r3
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	f001 fdeb 	bl	8007dec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	441a      	add	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d32b      	bcc.n	8006288 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	609a      	str	r2, [r3, #8]
 8006238:	e026      	b.n	8006288 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68d8      	ldr	r0, [r3, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	461a      	mov	r2, r3
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	f001 fdd1 	bl	8007dec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	425b      	negs	r3, r3
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d207      	bcs.n	8006276 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	425b      	negs	r3, r3
 8006270:	441a      	add	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d105      	bne.n	8006288 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3b01      	subs	r3, #1
 8006286:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006290:	697b      	ldr	r3, [r7, #20]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062a2:	f001 fae3 	bl	800786c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062ae:	e011      	b.n	80062d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d012      	beq.n	80062de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3324      	adds	r3, #36	; 0x24
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fd65 	bl	8006d8c <xTaskRemoveFromEventList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062c8:	f000 fe9c 	bl	8007004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	dce9      	bgt.n	80062b0 <prvUnlockQueue+0x16>
 80062dc:	e000      	b.n	80062e0 <prvUnlockQueue+0x46>
					break;
 80062de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062e8:	f001 faf0 	bl	80078cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062ec:	f001 fabe 	bl	800786c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062f8:	e011      	b.n	800631e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d012      	beq.n	8006328 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3310      	adds	r3, #16
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fd40 	bl	8006d8c <xTaskRemoveFromEventList>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006312:	f000 fe77 	bl	8007004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	3b01      	subs	r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800631e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006322:	2b00      	cmp	r3, #0
 8006324:	dce9      	bgt.n	80062fa <prvUnlockQueue+0x60>
 8006326:	e000      	b.n	800632a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006328:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006332:	f001 facb 	bl	80078cc <vPortExitCritical>
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006346:	f001 fa91 	bl	800786c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e001      	b.n	800635c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800635c:	f001 fab6 	bl	80078cc <vPortExitCritical>

	return xReturn;
 8006360:	68fb      	ldr	r3, [r7, #12]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006372:	f001 fa7b 	bl	800786c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	429a      	cmp	r2, r3
 8006380:	d102      	bne.n	8006388 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e001      	b.n	800638c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800638c:	f001 fa9e 	bl	80078cc <vPortExitCritical>

	return xReturn;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08e      	sub	sp, #56	; 0x38
 800639e:	af04      	add	r7, sp, #16
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	623b      	str	r3, [r7, #32]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61fb      	str	r3, [r7, #28]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063e0:	23b4      	movs	r3, #180	; 0xb4
 80063e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2bb4      	cmp	r3, #180	; 0xb4
 80063e8:	d00a      	beq.n	8006400 <xTaskCreateStatic+0x66>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	61bb      	str	r3, [r7, #24]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01e      	beq.n	8006444 <xTaskCreateStatic+0xaa>
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01b      	beq.n	8006444 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006414:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	2202      	movs	r2, #2
 800641a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800641e:	2300      	movs	r3, #0
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	f107 0314 	add.w	r3, r7, #20
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f850 	bl	80064dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800643c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800643e:	f000 f8e3 	bl	8006608 <prvAddNewTaskToReadyList>
 8006442:	e001      	b.n	8006448 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006448:	697b      	ldr	r3, [r7, #20]
	}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006452:	b580      	push	{r7, lr}
 8006454:	b08c      	sub	sp, #48	; 0x30
 8006456:	af04      	add	r7, sp, #16
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4618      	mov	r0, r3
 8006468:	f001 fac2 	bl	80079f0 <pvPortMalloc>
 800646c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006474:	20b4      	movs	r0, #180	; 0xb4
 8006476:	f001 fabb 	bl	80079f0 <pvPortMalloc>
 800647a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
 8006488:	e005      	b.n	8006496 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800648a:	6978      	ldr	r0, [r7, #20]
 800648c:	f001 fb74 	bl	8007b78 <vPortFree>
 8006490:	e001      	b.n	8006496 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d017      	beq.n	80064cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f80e 	bl	80064dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c0:	69f8      	ldr	r0, [r7, #28]
 80064c2:	f000 f8a1 	bl	8006608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e002      	b.n	80064d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295
 80064d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064d2:	69bb      	ldr	r3, [r7, #24]
	}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064f4:	3b01      	subs	r3, #1
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <prvInitialiseNewTask+0x48>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	617b      	str	r3, [r7, #20]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e012      	b.n	8006550 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	7819      	ldrb	r1, [r3, #0]
 8006532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	3334      	adds	r3, #52	; 0x34
 800653a:	460a      	mov	r2, r1
 800653c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3301      	adds	r3, #1
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d9e9      	bls.n	800652a <prvInitialiseNewTask+0x4e>
 8006556:	e000      	b.n	800655a <prvInitialiseNewTask+0x7e>
		{
			break;
 8006558:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	2b03      	cmp	r3, #3
 8006566:	d901      	bls.n	800656c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006568:	2303      	movs	r3, #3
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006570:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2200      	movs	r2, #0
 800657c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	3304      	adds	r3, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fa31 	bl	80059ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	3318      	adds	r3, #24
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fa2c 	bl	80059ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	f1c3 0204 	rsb	r2, r3, #4
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	334c      	adds	r3, #76	; 0x4c
 80065bc:	2260      	movs	r2, #96	; 0x60
 80065be:	2100      	movs	r1, #0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fc21 	bl	8007e08 <memset>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <prvInitialiseNewTask+0x120>)
 80065ca:	651a      	str	r2, [r3, #80]	; 0x50
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	4a0c      	ldr	r2, [pc, #48]	; (8006600 <prvInitialiseNewTask+0x124>)
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	4a0b      	ldr	r2, [pc, #44]	; (8006604 <prvInitialiseNewTask+0x128>)
 80065d6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	69b8      	ldr	r0, [r7, #24]
 80065de:	f001 f857 	bl	8007690 <pxPortInitialiseStack>
 80065e2:	4602      	mov	r2, r0
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065f4:	bf00      	nop
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	080080a4 	.word	0x080080a4
 8006600:	080080c4 	.word	0x080080c4
 8006604:	08008084 	.word	0x08008084

08006608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006610:	f001 f92c 	bl	800786c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006614:	4b2a      	ldr	r3, [pc, #168]	; (80066c0 <prvAddNewTaskToReadyList+0xb8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	4a29      	ldr	r2, [pc, #164]	; (80066c0 <prvAddNewTaskToReadyList+0xb8>)
 800661c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800661e:	4b29      	ldr	r3, [pc, #164]	; (80066c4 <prvAddNewTaskToReadyList+0xbc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006626:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <prvAddNewTaskToReadyList+0xbc>)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800662c:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <prvAddNewTaskToReadyList+0xb8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d110      	bne.n	8006656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006634:	f000 fd0a 	bl	800704c <prvInitialiseTaskLists>
 8006638:	e00d      	b.n	8006656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <prvAddNewTaskToReadyList+0xc0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <prvAddNewTaskToReadyList+0xbc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	429a      	cmp	r2, r3
 800664e:	d802      	bhi.n	8006656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <prvAddNewTaskToReadyList+0xbc>)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <prvAddNewTaskToReadyList+0xc4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <prvAddNewTaskToReadyList+0xc4>)
 800665e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	2201      	movs	r2, #1
 8006666:	409a      	lsls	r2, r3
 8006668:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <prvAddNewTaskToReadyList+0xc8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4313      	orrs	r3, r2
 800666e:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <prvAddNewTaskToReadyList+0xc8>)
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <prvAddNewTaskToReadyList+0xcc>)
 8006680:	441a      	add	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7ff f9ba 	bl	8005a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800668e:	f001 f91d 	bl	80078cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <prvAddNewTaskToReadyList+0xc0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <prvAddNewTaskToReadyList+0xbc>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d207      	bcs.n	80066b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <prvAddNewTaskToReadyList+0xd0>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000604 	.word	0x20000604
 80066c4:	20000540 	.word	0x20000540
 80066c8:	20000610 	.word	0x20000610
 80066cc:	20000620 	.word	0x20000620
 80066d0:	2000060c 	.word	0x2000060c
 80066d4:	20000544 	.word	0x20000544
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80066e4:	f001 f8c2 	bl	800786c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <vTaskDelete+0x18>
 80066ee:	4b39      	ldr	r3, [pc, #228]	; (80067d4 <vTaskDelete+0xf8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	e000      	b.n	80066f6 <vTaskDelete+0x1a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff f9db 	bl	8005ab8 <uxListRemove>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	4932      	ldr	r1, [pc, #200]	; (80067d8 <vTaskDelete+0xfc>)
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <vTaskDelete+0x58>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	2201      	movs	r2, #1
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	43da      	mvns	r2, r3
 800672a:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <vTaskDelete+0x100>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4013      	ands	r3, r2
 8006730:	4a2a      	ldr	r2, [pc, #168]	; (80067dc <vTaskDelete+0x100>)
 8006732:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3318      	adds	r3, #24
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff f9b9 	bl	8005ab8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <vTaskDelete+0x104>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	4a24      	ldr	r2, [pc, #144]	; (80067e0 <vTaskDelete+0x104>)
 800674e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <vTaskDelete+0xf8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	429a      	cmp	r2, r3
 8006758:	d10b      	bne.n	8006772 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4820      	ldr	r0, [pc, #128]	; (80067e4 <vTaskDelete+0x108>)
 8006762:	f7ff f94e 	bl	8005a02 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006766:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <vTaskDelete+0x10c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <vTaskDelete+0x10c>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	e009      	b.n	8006786 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006772:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <vTaskDelete+0x110>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3b01      	subs	r3, #1
 8006778:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <vTaskDelete+0x110>)
 800677a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fcd3 	bl	8007128 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006782:	f000 fd05 	bl	8007190 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006786:	f001 f8a1 	bl	80078cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <vTaskDelete+0x114>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01b      	beq.n	80067ca <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <vTaskDelete+0xf8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	429a      	cmp	r2, r3
 800679a:	d116      	bne.n	80067ca <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800679c:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <vTaskDelete+0x118>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <vTaskDelete+0xde>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	60bb      	str	r3, [r7, #8]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <vTaskDelete+0x11c>)
 80067bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000540 	.word	0x20000540
 80067d8:	20000544 	.word	0x20000544
 80067dc:	2000060c 	.word	0x2000060c
 80067e0:	20000620 	.word	0x20000620
 80067e4:	200005d8 	.word	0x200005d8
 80067e8:	200005ec 	.word	0x200005ec
 80067ec:	20000604 	.word	0x20000604
 80067f0:	20000610 	.word	0x20000610
 80067f4:	2000062c 	.word	0x2000062c
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d017      	beq.n	800683e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <vTaskDelay+0x60>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <vTaskDelay+0x30>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60bb      	str	r3, [r7, #8]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800682c:	f000 f884 	bl	8006938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fec6 	bl	80075c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006838:	f000 f88c 	bl	8006954 <xTaskResumeAll>
 800683c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <vTaskDelay+0x64>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	2000062c 	.word	0x2000062c
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006872:	463a      	mov	r2, r7
 8006874:	1d39      	adds	r1, r7, #4
 8006876:	f107 0308 	add.w	r3, r7, #8
 800687a:	4618      	mov	r0, r3
 800687c:	f7fa fa9e 	bl	8000dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	9202      	str	r2, [sp, #8]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	2300      	movs	r3, #0
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	2300      	movs	r3, #0
 8006890:	460a      	mov	r2, r1
 8006892:	4921      	ldr	r1, [pc, #132]	; (8006918 <vTaskStartScheduler+0xb4>)
 8006894:	4821      	ldr	r0, [pc, #132]	; (800691c <vTaskStartScheduler+0xb8>)
 8006896:	f7ff fd80 	bl	800639a <xTaskCreateStatic>
 800689a:	4603      	mov	r3, r0
 800689c:	4a20      	ldr	r2, [pc, #128]	; (8006920 <vTaskStartScheduler+0xbc>)
 800689e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068a0:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <vTaskStartScheduler+0xbc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e001      	b.n	80068b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d11b      	bne.n	80068f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	613b      	str	r3, [r7, #16]
}
 80068ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068cc:	4b15      	ldr	r3, [pc, #84]	; (8006924 <vTaskStartScheduler+0xc0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	334c      	adds	r3, #76	; 0x4c
 80068d2:	4a15      	ldr	r2, [pc, #84]	; (8006928 <vTaskStartScheduler+0xc4>)
 80068d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068d6:	4b15      	ldr	r3, [pc, #84]	; (800692c <vTaskStartScheduler+0xc8>)
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295
 80068dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068de:	4b14      	ldr	r3, [pc, #80]	; (8006930 <vTaskStartScheduler+0xcc>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80068e4:	4b13      	ldr	r3, [pc, #76]	; (8006934 <vTaskStartScheduler+0xd0>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068ea:	f000 ff4d 	bl	8007788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068ee:	e00e      	b.n	800690e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d10a      	bne.n	800690e <vTaskStartScheduler+0xaa>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	60fb      	str	r3, [r7, #12]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <vTaskStartScheduler+0xa8>
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08008050 	.word	0x08008050
 800691c:	0800701d 	.word	0x0800701d
 8006920:	20000628 	.word	0x20000628
 8006924:	20000540 	.word	0x20000540
 8006928:	2000003c 	.word	0x2000003c
 800692c:	20000624 	.word	0x20000624
 8006930:	20000610 	.word	0x20000610
 8006934:	20000608 	.word	0x20000608

08006938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <vTaskSuspendAll+0x18>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <vTaskSuspendAll+0x18>)
 8006944:	6013      	str	r3, [r2, #0]
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000062c 	.word	0x2000062c

08006954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006962:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <xTaskResumeAll+0x114>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xTaskResumeAll+0x2c>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	603b      	str	r3, [r7, #0]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006980:	f000 ff74 	bl	800786c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006984:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <xTaskResumeAll+0x114>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	4a37      	ldr	r2, [pc, #220]	; (8006a68 <xTaskResumeAll+0x114>)
 800698c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800698e:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <xTaskResumeAll+0x114>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d161      	bne.n	8006a5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006996:	4b35      	ldr	r3, [pc, #212]	; (8006a6c <xTaskResumeAll+0x118>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d05d      	beq.n	8006a5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800699e:	e02e      	b.n	80069fe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069a0:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <xTaskResumeAll+0x11c>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff f883 	bl	8005ab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff f87e 	bl	8005ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	2201      	movs	r2, #1
 80069c2:	409a      	lsls	r2, r3
 80069c4:	4b2b      	ldr	r3, [pc, #172]	; (8006a74 <xTaskResumeAll+0x120>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	4a2a      	ldr	r2, [pc, #168]	; (8006a74 <xTaskResumeAll+0x120>)
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4a27      	ldr	r2, [pc, #156]	; (8006a78 <xTaskResumeAll+0x124>)
 80069dc:	441a      	add	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7ff f80c 	bl	8005a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4b23      	ldr	r3, [pc, #140]	; (8006a7c <xTaskResumeAll+0x128>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069f8:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <xTaskResumeAll+0x12c>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <xTaskResumeAll+0x11c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1cc      	bne.n	80069a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a0c:	f000 fbc0 	bl	8007190 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a10:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <xTaskResumeAll+0x130>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d010      	beq.n	8006a3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a1c:	f000 f836 	bl	8006a8c <xTaskIncrementTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a26:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <xTaskResumeAll+0x12c>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f1      	bne.n	8006a1c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006a38:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <xTaskResumeAll+0x130>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <xTaskResumeAll+0x12c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <xTaskResumeAll+0x134>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a5a:	f000 ff37 	bl	80078cc <vPortExitCritical>

	return xAlreadyYielded;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	2000062c 	.word	0x2000062c
 8006a6c:	20000604 	.word	0x20000604
 8006a70:	200005c4 	.word	0x200005c4
 8006a74:	2000060c 	.word	0x2000060c
 8006a78:	20000544 	.word	0x20000544
 8006a7c:	20000540 	.word	0x20000540
 8006a80:	20000618 	.word	0x20000618
 8006a84:	20000614 	.word	0x20000614
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a96:	4b51      	ldr	r3, [pc, #324]	; (8006bdc <xTaskIncrementTick+0x150>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 808d 	bne.w	8006bba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006aa0:	4b4f      	ldr	r3, [pc, #316]	; (8006be0 <xTaskIncrementTick+0x154>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aa8:	4a4d      	ldr	r2, [pc, #308]	; (8006be0 <xTaskIncrementTick+0x154>)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d120      	bne.n	8006af6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ab4:	4b4b      	ldr	r3, [pc, #300]	; (8006be4 <xTaskIncrementTick+0x158>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	603b      	str	r3, [r7, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskIncrementTick+0x46>
 8006ad4:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <xTaskIncrementTick+0x158>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	4b43      	ldr	r3, [pc, #268]	; (8006be8 <xTaskIncrementTick+0x15c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a41      	ldr	r2, [pc, #260]	; (8006be4 <xTaskIncrementTick+0x158>)
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4a41      	ldr	r2, [pc, #260]	; (8006be8 <xTaskIncrementTick+0x15c>)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4b40      	ldr	r3, [pc, #256]	; (8006bec <xTaskIncrementTick+0x160>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	4a3f      	ldr	r2, [pc, #252]	; (8006bec <xTaskIncrementTick+0x160>)
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	f000 fb4d 	bl	8007190 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006af6:	4b3e      	ldr	r3, [pc, #248]	; (8006bf0 <xTaskIncrementTick+0x164>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d34d      	bcc.n	8006b9c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b00:	4b38      	ldr	r3, [pc, #224]	; (8006be4 <xTaskIncrementTick+0x158>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <xTaskIncrementTick+0x82>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xTaskIncrementTick+0x84>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	4b36      	ldr	r3, [pc, #216]	; (8006bf0 <xTaskIncrementTick+0x164>)
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	601a      	str	r2, [r3, #0]
					break;
 8006b1c:	e03e      	b.n	8006b9c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b1e:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <xTaskIncrementTick+0x158>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d203      	bcs.n	8006b3e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b36:	4a2e      	ldr	r2, [pc, #184]	; (8006bf0 <xTaskIncrementTick+0x164>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6013      	str	r3, [r2, #0]
						break;
 8006b3c:	e02e      	b.n	8006b9c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe ffb8 	bl	8005ab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe ffaf 	bl	8005ab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <xTaskIncrementTick+0x168>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <xTaskIncrementTick+0x168>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <xTaskIncrementTick+0x16c>)
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe ff3d 	bl	8005a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <xTaskIncrementTick+0x170>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d3b4      	bcc.n	8006b00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b9a:	e7b1      	b.n	8006b00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b9c:	4b17      	ldr	r3, [pc, #92]	; (8006bfc <xTaskIncrementTick+0x170>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	4915      	ldr	r1, [pc, #84]	; (8006bf8 <xTaskIncrementTick+0x16c>)
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d907      	bls.n	8006bc4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e004      	b.n	8006bc4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bba:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <xTaskIncrementTick+0x174>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	4a0f      	ldr	r2, [pc, #60]	; (8006c00 <xTaskIncrementTick+0x174>)
 8006bc2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <xTaskIncrementTick+0x178>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bd0:	697b      	ldr	r3, [r7, #20]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	2000062c 	.word	0x2000062c
 8006be0:	20000608 	.word	0x20000608
 8006be4:	200005bc 	.word	0x200005bc
 8006be8:	200005c0 	.word	0x200005c0
 8006bec:	2000061c 	.word	0x2000061c
 8006bf0:	20000624 	.word	0x20000624
 8006bf4:	2000060c 	.word	0x2000060c
 8006bf8:	20000544 	.word	0x20000544
 8006bfc:	20000540 	.word	0x20000540
 8006c00:	20000614 	.word	0x20000614
 8006c04:	20000618 	.word	0x20000618

08006c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c0e:	4b29      	ldr	r3, [pc, #164]	; (8006cb4 <vTaskSwitchContext+0xac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c16:	4b28      	ldr	r3, [pc, #160]	; (8006cb8 <vTaskSwitchContext+0xb0>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c1c:	e044      	b.n	8006ca8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c1e:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <vTaskSwitchContext+0xb0>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c24:	4b25      	ldr	r3, [pc, #148]	; (8006cbc <vTaskSwitchContext+0xb4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c32:	7afb      	ldrb	r3, [r7, #11]
 8006c34:	f1c3 031f 	rsb	r3, r3, #31
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4921      	ldr	r1, [pc, #132]	; (8006cc0 <vTaskSwitchContext+0xb8>)
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	607b      	str	r3, [r7, #4]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <vTaskSwitchContext+0x5a>
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <vTaskSwitchContext+0xb8>)
 8006c70:	4413      	add	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3308      	adds	r3, #8
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d104      	bne.n	8006c94 <vTaskSwitchContext+0x8c>
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	4a0a      	ldr	r2, [pc, #40]	; (8006cc4 <vTaskSwitchContext+0xbc>)
 8006c9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c9e:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <vTaskSwitchContext+0xbc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	334c      	adds	r3, #76	; 0x4c
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <vTaskSwitchContext+0xc0>)
 8006ca6:	6013      	str	r3, [r2, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	2000062c 	.word	0x2000062c
 8006cb8:	20000618 	.word	0x20000618
 8006cbc:	2000060c 	.word	0x2000060c
 8006cc0:	20000544 	.word	0x20000544
 8006cc4:	20000540 	.word	0x20000540
 8006cc8:	2000003c 	.word	0x2000003c

08006ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60fb      	str	r3, [r7, #12]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <vTaskPlaceOnEventList+0x44>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3318      	adds	r3, #24
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fe fea4 	bl	8005a48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d00:	2101      	movs	r1, #1
 8006d02:	6838      	ldr	r0, [r7, #0]
 8006d04:	f000 fc5e 	bl	80075c4 <prvAddCurrentTaskToDelayedList>
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000540 	.word	0x20000540

08006d14 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	617b      	str	r3, [r7, #20]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006d3c:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	613b      	str	r3, [r7, #16]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d64:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3318      	adds	r3, #24
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7fe fe47 	bl	8005a02 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d74:	2101      	movs	r1, #1
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fc24 	bl	80075c4 <prvAddCurrentTaskToDelayedList>
}
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	2000062c 	.word	0x2000062c
 8006d88:	20000540 	.word	0x20000540

08006d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	3318      	adds	r3, #24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fe7b 	bl	8005ab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <xTaskRemoveFromEventList+0xac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d11c      	bne.n	8006e04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fe72 	bl	8005ab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	2201      	movs	r2, #1
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <xTaskRemoveFromEventList+0xb0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <xTaskRemoveFromEventList+0xb0>)
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <xTaskRemoveFromEventList+0xb4>)
 8006df4:	441a      	add	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe fe00 	bl	8005a02 <vListInsertEnd>
 8006e02:	e005      	b.n	8006e10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3318      	adds	r3, #24
 8006e08:	4619      	mov	r1, r3
 8006e0a:	480e      	ldr	r0, [pc, #56]	; (8006e44 <xTaskRemoveFromEventList+0xb8>)
 8006e0c:	f7fe fdf9 	bl	8005a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <xTaskRemoveFromEventList+0xbc>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d905      	bls.n	8006e2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <xTaskRemoveFromEventList+0xc0>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e001      	b.n	8006e2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e2e:	697b      	ldr	r3, [r7, #20]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	2000062c 	.word	0x2000062c
 8006e3c:	2000060c 	.word	0x2000060c
 8006e40:	20000544 	.word	0x20000544
 8006e44:	200005c4 	.word	0x200005c4
 8006e48:	20000540 	.word	0x20000540
 8006e4c:	20000618 	.word	0x20000618

08006e50 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e5a:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	613b      	str	r3, [r7, #16]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe fe07 	bl	8005ab8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fe02 	bl	8005ab8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	2201      	movs	r2, #1
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a0d      	ldr	r2, [pc, #52]	; (8006f08 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006ed4:	441a      	add	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7fe fd90 	bl	8005a02 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d902      	bls.n	8006ef6 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
	}
}
 8006ef6:	bf00      	nop
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	2000062c 	.word	0x2000062c
 8006f04:	2000060c 	.word	0x2000060c
 8006f08:	20000544 	.word	0x20000544
 8006f0c:	20000540 	.word	0x20000540
 8006f10:	20000618 	.word	0x20000618

08006f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <vTaskInternalSetTimeOutState+0x24>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <vTaskInternalSetTimeOutState+0x28>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	605a      	str	r2, [r3, #4]
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	2000061c 	.word	0x2000061c
 8006f3c:	20000608 	.word	0x20000608

08006f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f82:	f000 fc73 	bl	800786c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f86:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <xTaskCheckForTimeOut+0xbc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d102      	bne.n	8006fa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	e023      	b.n	8006fee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <xTaskCheckForTimeOut+0xc0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d007      	beq.n	8006fc2 <xTaskCheckForTimeOut+0x82>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e015      	b.n	8006fee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d20b      	bcs.n	8006fe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff ff9b 	bl	8006f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	e004      	b.n	8006fee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fea:	2301      	movs	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f000 fc6d 	bl	80078cc <vPortExitCritical>

	return xReturn;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000608 	.word	0x20000608
 8007000:	2000061c 	.word	0x2000061c

08007004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007008:	4b03      	ldr	r3, [pc, #12]	; (8007018 <vTaskMissedYield+0x14>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	20000618 	.word	0x20000618

0800701c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007024:	f000 f852 	bl	80070cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <prvIdleTask+0x28>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d9f9      	bls.n	8007024 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <prvIdleTask+0x2c>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007040:	e7f0      	b.n	8007024 <prvIdleTask+0x8>
 8007042:	bf00      	nop
 8007044:	20000544 	.word	0x20000544
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007052:	2300      	movs	r3, #0
 8007054:	607b      	str	r3, [r7, #4]
 8007056:	e00c      	b.n	8007072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4a12      	ldr	r2, [pc, #72]	; (80070ac <prvInitialiseTaskLists+0x60>)
 8007064:	4413      	add	r3, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fca0 	bl	80059ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3301      	adds	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d9ef      	bls.n	8007058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007078:	480d      	ldr	r0, [pc, #52]	; (80070b0 <prvInitialiseTaskLists+0x64>)
 800707a:	f7fe fc97 	bl	80059ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800707e:	480d      	ldr	r0, [pc, #52]	; (80070b4 <prvInitialiseTaskLists+0x68>)
 8007080:	f7fe fc94 	bl	80059ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007084:	480c      	ldr	r0, [pc, #48]	; (80070b8 <prvInitialiseTaskLists+0x6c>)
 8007086:	f7fe fc91 	bl	80059ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800708a:	480c      	ldr	r0, [pc, #48]	; (80070bc <prvInitialiseTaskLists+0x70>)
 800708c:	f7fe fc8e 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007090:	480b      	ldr	r0, [pc, #44]	; (80070c0 <prvInitialiseTaskLists+0x74>)
 8007092:	f7fe fc8b 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007096:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <prvInitialiseTaskLists+0x78>)
 8007098:	4a05      	ldr	r2, [pc, #20]	; (80070b0 <prvInitialiseTaskLists+0x64>)
 800709a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <prvInitialiseTaskLists+0x7c>)
 800709e:	4a05      	ldr	r2, [pc, #20]	; (80070b4 <prvInitialiseTaskLists+0x68>)
 80070a0:	601a      	str	r2, [r3, #0]
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000544 	.word	0x20000544
 80070b0:	20000594 	.word	0x20000594
 80070b4:	200005a8 	.word	0x200005a8
 80070b8:	200005c4 	.word	0x200005c4
 80070bc:	200005d8 	.word	0x200005d8
 80070c0:	200005f0 	.word	0x200005f0
 80070c4:	200005bc 	.word	0x200005bc
 80070c8:	200005c0 	.word	0x200005c0

080070cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d2:	e019      	b.n	8007108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070d4:	f000 fbca 	bl	800786c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80070d8:	4b10      	ldr	r3, [pc, #64]	; (800711c <prvCheckTasksWaitingTermination+0x50>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fce7 	bl	8005ab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <prvCheckTasksWaitingTermination+0x54>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	4a0b      	ldr	r2, [pc, #44]	; (8007120 <prvCheckTasksWaitingTermination+0x54>)
 80070f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <prvCheckTasksWaitingTermination+0x58>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <prvCheckTasksWaitingTermination+0x58>)
 80070fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070fe:	f000 fbe5 	bl	80078cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f810 	bl	8007128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <prvCheckTasksWaitingTermination+0x58>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e1      	bne.n	80070d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200005d8 	.word	0x200005d8
 8007120:	20000604 	.word	0x20000604
 8007124:	200005ec 	.word	0x200005ec

08007128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	334c      	adds	r3, #76	; 0x4c
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fe7d 	bl	8007e34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d108      	bne.n	8007156 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fd15 	bl	8007b78 <vPortFree>
				vPortFree( pxTCB );
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fd12 	bl	8007b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007154:	e018      	b.n	8007188 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d103      	bne.n	8007168 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fd09 	bl	8007b78 <vPortFree>
	}
 8007166:	e00f      	b.n	8007188 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800716e:	2b02      	cmp	r3, #2
 8007170:	d00a      	beq.n	8007188 <prvDeleteTCB+0x60>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <prvDeleteTCB+0x5e>
	}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007196:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <prvResetNextTaskUnblockTime+0x40>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <prvResetNextTaskUnblockTime+0x14>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <prvResetNextTaskUnblockTime+0x16>
 80071a4:	2300      	movs	r3, #0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071aa:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <prvResetNextTaskUnblockTime+0x44>)
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295
 80071b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071b2:	e008      	b.n	80071c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <prvResetNextTaskUnblockTime+0x40>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <prvResetNextTaskUnblockTime+0x44>)
 80071c4:	6013      	str	r3, [r2, #0]
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr
 80071d0:	200005bc 	.word	0x200005bc
 80071d4:	20000624 	.word	0x20000624

080071d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071de:	4b0b      	ldr	r3, [pc, #44]	; (800720c <xTaskGetSchedulerState+0x34>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071e6:	2301      	movs	r3, #1
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	e008      	b.n	80071fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ec:	4b08      	ldr	r3, [pc, #32]	; (8007210 <xTaskGetSchedulerState+0x38>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071f4:	2302      	movs	r3, #2
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	e001      	b.n	80071fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071fe:	687b      	ldr	r3, [r7, #4]
	}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000610 	.word	0x20000610
 8007210:	2000062c 	.word	0x2000062c

08007214 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d06e      	beq.n	8007308 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	4b39      	ldr	r3, [pc, #228]	; (8007314 <xTaskPriorityInherit+0x100>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	429a      	cmp	r2, r3
 8007236:	d25e      	bcs.n	80072f6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	db06      	blt.n	800724e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007240:	4b34      	ldr	r3, [pc, #208]	; (8007314 <xTaskPriorityInherit+0x100>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f1c3 0204 	rsb	r2, r3, #4
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6959      	ldr	r1, [r3, #20]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4a2e      	ldr	r2, [pc, #184]	; (8007318 <xTaskPriorityInherit+0x104>)
 8007260:	4413      	add	r3, r2
 8007262:	4299      	cmp	r1, r3
 8007264:	d101      	bne.n	800726a <xTaskPriorityInherit+0x56>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <xTaskPriorityInherit+0x58>
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d03a      	beq.n	80072e6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	3304      	adds	r3, #4
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe fc1f 	bl	8005ab8 <uxListRemove>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d115      	bne.n	80072ac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4924      	ldr	r1, [pc, #144]	; (8007318 <xTaskPriorityInherit+0x104>)
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <xTaskPriorityInherit+0x98>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729a:	2201      	movs	r2, #1
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	43da      	mvns	r2, r3
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <xTaskPriorityInherit+0x108>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4013      	ands	r3, r2
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <xTaskPriorityInherit+0x108>)
 80072aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072ac:	4b19      	ldr	r3, [pc, #100]	; (8007314 <xTaskPriorityInherit+0x100>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	2201      	movs	r2, #1
 80072bc:	409a      	lsls	r2, r3
 80072be:	4b17      	ldr	r3, [pc, #92]	; (800731c <xTaskPriorityInherit+0x108>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	4a15      	ldr	r2, [pc, #84]	; (800731c <xTaskPriorityInherit+0x108>)
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4a10      	ldr	r2, [pc, #64]	; (8007318 <xTaskPriorityInherit+0x104>)
 80072d6:	441a      	add	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3304      	adds	r3, #4
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7fe fb8f 	bl	8005a02 <vListInsertEnd>
 80072e4:	e004      	b.n	80072f0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <xTaskPriorityInherit+0x100>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e008      	b.n	8007308 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fa:	4b06      	ldr	r3, [pc, #24]	; (8007314 <xTaskPriorityInherit+0x100>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d201      	bcs.n	8007308 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007308:	68fb      	ldr	r3, [r7, #12]
	}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000540 	.word	0x20000540
 8007318:	20000544 	.word	0x20000544
 800731c:	2000060c 	.word	0x2000060c

08007320 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d06e      	beq.n	8007414 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007336:	4b3a      	ldr	r3, [pc, #232]	; (8007420 <xTaskPriorityDisinherit+0x100>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d00a      	beq.n	8007356 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60bb      	str	r3, [r7, #8]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	429a      	cmp	r2, r3
 8007388:	d044      	beq.n	8007414 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738e:	2b00      	cmp	r3, #0
 8007390:	d140      	bne.n	8007414 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3304      	adds	r3, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fb8e 	bl	8005ab8 <uxListRemove>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d115      	bne.n	80073ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a6:	491f      	ldr	r1, [pc, #124]	; (8007424 <xTaskPriorityDisinherit+0x104>)
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xTaskPriorityDisinherit+0xae>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	2201      	movs	r2, #1
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	43da      	mvns	r2, r3
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <xTaskPriorityDisinherit+0x108>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4013      	ands	r3, r2
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <xTaskPriorityDisinherit+0x108>)
 80073cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f1c3 0204 	rsb	r2, r3, #4
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	2201      	movs	r2, #1
 80073e8:	409a      	lsls	r2, r3
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <xTaskPriorityDisinherit+0x108>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	4a0d      	ldr	r2, [pc, #52]	; (8007428 <xTaskPriorityDisinherit+0x108>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a08      	ldr	r2, [pc, #32]	; (8007424 <xTaskPriorityDisinherit+0x104>)
 8007402:	441a      	add	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7fe faf9 	bl	8005a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007414:	697b      	ldr	r3, [r7, #20]
	}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000540 	.word	0x20000540
 8007424:	20000544 	.word	0x20000544
 8007428:	2000060c 	.word	0x2000060c

0800742c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800743a:	2301      	movs	r3, #1
 800743c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8088 	beq.w	8007556 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	60fb      	str	r3, [r7, #12]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d902      	bls.n	8007474 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e002      	b.n	800747a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007478:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	429a      	cmp	r2, r3
 8007482:	d068      	beq.n	8007556 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	429a      	cmp	r2, r3
 800748c:	d163      	bne.n	8007556 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800748e:	4b34      	ldr	r3, [pc, #208]	; (8007560 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d10a      	bne.n	80074ae <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60bb      	str	r3, [r7, #8]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	db04      	blt.n	80074cc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f1c3 0204 	rsb	r2, r3, #4
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	6959      	ldr	r1, [r3, #20]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4a22      	ldr	r2, [pc, #136]	; (8007564 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80074dc:	4413      	add	r3, r2
 80074de:	4299      	cmp	r1, r3
 80074e0:	d101      	bne.n	80074e6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80074e6:	2300      	movs	r3, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d034      	beq.n	8007556 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fae1 	bl	8005ab8 <uxListRemove>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d115      	bne.n	8007528 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	4918      	ldr	r1, [pc, #96]	; (8007564 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	2201      	movs	r2, #1
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	43da      	mvns	r2, r3
 800751e:	4b12      	ldr	r3, [pc, #72]	; (8007568 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4013      	ands	r3, r2
 8007524:	4a10      	ldr	r2, [pc, #64]	; (8007568 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007526:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	2201      	movs	r2, #1
 800752e:	409a      	lsls	r2, r3
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4313      	orrs	r3, r2
 8007536:	4a0c      	ldr	r2, [pc, #48]	; (8007568 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753e:	4613      	mov	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4a07      	ldr	r2, [pc, #28]	; (8007564 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007548:	441a      	add	r2, r3
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f7fe fa56 	bl	8005a02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007556:	bf00      	nop
 8007558:	3720      	adds	r7, #32
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000540 	.word	0x20000540
 8007564:	20000544 	.word	0x20000544
 8007568:	2000060c 	.word	0x2000060c

0800756c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <uxTaskResetEventItemValue+0x2c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <uxTaskResetEventItemValue+0x2c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <uxTaskResetEventItemValue+0x2c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1c2 0204 	rsb	r2, r2, #4
 8007588:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800758a:	687b      	ldr	r3, [r7, #4]
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	20000540 	.word	0x20000540

0800759c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075ae:	3201      	adds	r2, #1
 80075b0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80075b2:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075b4:	681b      	ldr	r3, [r3, #0]
	}
 80075b6:	4618      	mov	r0, r3
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000540 	.word	0x20000540

080075c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ce:	4b29      	ldr	r3, [pc, #164]	; (8007674 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075d4:	4b28      	ldr	r3, [pc, #160]	; (8007678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3304      	adds	r3, #4
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fa6c 	bl	8005ab8 <uxListRemove>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80075e6:	4b24      	ldr	r3, [pc, #144]	; (8007678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	2201      	movs	r2, #1
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43da      	mvns	r2, r3
 80075f4:	4b21      	ldr	r3, [pc, #132]	; (800767c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4013      	ands	r3, r2
 80075fa:	4a20      	ldr	r2, [pc, #128]	; (800767c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d10a      	bne.n	800761c <prvAddCurrentTaskToDelayedList+0x58>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800760c:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3304      	adds	r3, #4
 8007612:	4619      	mov	r1, r3
 8007614:	481a      	ldr	r0, [pc, #104]	; (8007680 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007616:	f7fe f9f4 	bl	8005a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800761a:	e026      	b.n	800766a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007624:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	d209      	bcs.n	8007648 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3304      	adds	r3, #4
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fe fa01 	bl	8005a48 <vListInsert>
}
 8007646:	e010      	b.n	800766a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007648:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <prvAddCurrentTaskToDelayedList+0xc4>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3304      	adds	r3, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f7fe f9f7 	bl	8005a48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <prvAddCurrentTaskToDelayedList+0xc8>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	429a      	cmp	r2, r3
 8007662:	d202      	bcs.n	800766a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007664:	4a09      	ldr	r2, [pc, #36]	; (800768c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6013      	str	r3, [r2, #0]
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000608 	.word	0x20000608
 8007678:	20000540 	.word	0x20000540
 800767c:	2000060c 	.word	0x2000060c
 8007680:	200005f0 	.word	0x200005f0
 8007684:	200005c0 	.word	0x200005c0
 8007688:	200005bc 	.word	0x200005bc
 800768c:	20000624 	.word	0x20000624

08007690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3b04      	subs	r3, #4
 80076a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b04      	subs	r3, #4
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0201 	bic.w	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b04      	subs	r3, #4
 80076be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076c0:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <pxPortInitialiseStack+0x54>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3b14      	subs	r3, #20
 80076ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b20      	subs	r3, #32
 80076d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	080076e9 	.word	0x080076e9

080076e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <prvTaskExitError+0x54>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d00a      	beq.n	8007712 <prvTaskExitError+0x2a>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	60fb      	str	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <prvTaskExitError+0x28>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60bb      	str	r3, [r7, #8]
}
 8007724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007726:	bf00      	nop
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0fc      	beq.n	8007728 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	20000038 	.word	0x20000038

08007740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <pxCurrentTCBConst2>)
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800774a:	f380 8809 	msr	PSP, r0
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8811 	msr	BASEPRI, r0
 800775a:	f04e 0e0d 	orr.w	lr, lr, #13
 800775e:	4770      	bx	lr

08007760 <pxCurrentTCBConst2>:
 8007760:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007768:	4806      	ldr	r0, [pc, #24]	; (8007784 <prvPortStartFirstTask+0x1c>)
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	6800      	ldr	r0, [r0, #0]
 800776e:	f380 8808 	msr	MSP, r0
 8007772:	b662      	cpsie	i
 8007774:	b661      	cpsie	f
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	df00      	svc	0
 8007780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007782:	bf00      	nop
 8007784:	e000ed08 	.word	0xe000ed08

08007788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800778e:	4b32      	ldr	r3, [pc, #200]	; (8007858 <xPortStartScheduler+0xd0>)
 8007790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	22ff      	movs	r2, #255	; 0xff
 800779e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b2a      	ldr	r3, [pc, #168]	; (800785c <xPortStartScheduler+0xd4>)
 80077b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077b6:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <xPortStartScheduler+0xd8>)
 80077b8:	2207      	movs	r2, #7
 80077ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077bc:	e009      	b.n	80077d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077be:	4b28      	ldr	r3, [pc, #160]	; (8007860 <xPortStartScheduler+0xd8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	4a26      	ldr	r2, [pc, #152]	; (8007860 <xPortStartScheduler+0xd8>)
 80077c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d0ef      	beq.n	80077be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <xPortStartScheduler+0xd8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f1c3 0307 	rsb	r3, r3, #7
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d00a      	beq.n	8007800 <xPortStartScheduler+0x78>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60bb      	str	r3, [r7, #8]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <xPortStartScheduler+0xd8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	4a16      	ldr	r2, [pc, #88]	; (8007860 <xPortStartScheduler+0xd8>)
 8007808:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800780a:	4b15      	ldr	r3, [pc, #84]	; (8007860 <xPortStartScheduler+0xd8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007812:	4a13      	ldr	r2, [pc, #76]	; (8007860 <xPortStartScheduler+0xd8>)
 8007814:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	b2da      	uxtb	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <xPortStartScheduler+0xdc>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a10      	ldr	r2, [pc, #64]	; (8007864 <xPortStartScheduler+0xdc>)
 8007824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <xPortStartScheduler+0xdc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a0d      	ldr	r2, [pc, #52]	; (8007864 <xPortStartScheduler+0xdc>)
 8007830:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007834:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007836:	f000 f8b9 	bl	80079ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <xPortStartScheduler+0xe0>)
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007840:	f7ff ff92 	bl	8007768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007844:	f7ff f9e0 	bl	8006c08 <vTaskSwitchContext>
	prvTaskExitError();
 8007848:	f7ff ff4e 	bl	80076e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	e000e400 	.word	0xe000e400
 800785c:	20000630 	.word	0x20000630
 8007860:	20000634 	.word	0x20000634
 8007864:	e000ed20 	.word	0xe000ed20
 8007868:	20000038 	.word	0x20000038

0800786c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	607b      	str	r3, [r7, #4]
}
 8007884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007886:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <vPortEnterCritical+0x58>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <vPortEnterCritical+0x58>)
 800788e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <vPortEnterCritical+0x58>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10f      	bne.n	80078b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007898:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <vPortEnterCritical+0x5c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	603b      	str	r3, [r7, #0]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <vPortEnterCritical+0x4a>
	}
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000038 	.word	0x20000038
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078d2:	4b11      	ldr	r3, [pc, #68]	; (8007918 <vPortExitCritical+0x4c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <vPortExitCritical+0x24>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <vPortExitCritical+0x4c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	4a08      	ldr	r2, [pc, #32]	; (8007918 <vPortExitCritical+0x4c>)
 80078f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078fa:	4b07      	ldr	r3, [pc, #28]	; (8007918 <vPortExitCritical+0x4c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <vPortExitCritical+0x42>
 8007902:	2300      	movs	r3, #0
 8007904:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800790c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr
 8007918:	20000038 	.word	0x20000038
 800791c:	00000000 	.word	0x00000000

08007920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007920:	f3ef 8009 	mrs	r0, PSP
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <pxCurrentTCBConst>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007930:	6010      	str	r0, [r2, #0]
 8007932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800793a:	f380 8811 	msr	BASEPRI, r0
 800793e:	f7ff f963 	bl	8006c08 <vTaskSwitchContext>
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800794e:	6819      	ldr	r1, [r3, #0]
 8007950:	6808      	ldr	r0, [r1, #0]
 8007952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007956:	f380 8809 	msr	PSP, r0
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	4770      	bx	lr

08007960 <pxCurrentTCBConst>:
 8007960:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007982:	f7ff f883 	bl	8006a8c <xTaskIncrementTick>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <xPortSysTickHandler+0x40>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f383 8811 	msr	BASEPRI, r3
}
 800799e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <vPortSetupTimerInterrupt+0x30>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079b6:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <vPortSetupTimerInterrupt+0x38>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <vPortSetupTimerInterrupt+0x3c>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	099b      	lsrs	r3, r3, #6
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <vPortSetupTimerInterrupt+0x40>)
 80079ca:	3b01      	subs	r3, #1
 80079cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ce:	4b03      	ldr	r3, [pc, #12]	; (80079dc <vPortSetupTimerInterrupt+0x30>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr
 80079dc:	e000e010 	.word	0xe000e010
 80079e0:	e000e018 	.word	0xe000e018
 80079e4:	2000002c 	.word	0x2000002c
 80079e8:	10624dd3 	.word	0x10624dd3
 80079ec:	e000e014 	.word	0xe000e014

080079f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079fc:	f7fe ff9c 	bl	8006938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a00:	4b58      	ldr	r3, [pc, #352]	; (8007b64 <pvPortMalloc+0x174>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a08:	f000 f910 	bl	8007c2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a0c:	4b56      	ldr	r3, [pc, #344]	; (8007b68 <pvPortMalloc+0x178>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 808e 	bne.w	8007b36 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01d      	beq.n	8007a5c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a20:	2208      	movs	r2, #8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d014      	beq.n	8007a5c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f023 0307 	bic.w	r3, r3, #7
 8007a38:	3308      	adds	r3, #8
 8007a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <pvPortMalloc+0x6c>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	617b      	str	r3, [r7, #20]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d069      	beq.n	8007b36 <pvPortMalloc+0x146>
 8007a62:	4b42      	ldr	r3, [pc, #264]	; (8007b6c <pvPortMalloc+0x17c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d864      	bhi.n	8007b36 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a6c:	4b40      	ldr	r3, [pc, #256]	; (8007b70 <pvPortMalloc+0x180>)
 8007a6e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a70:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <pvPortMalloc+0x180>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a76:	e004      	b.n	8007a82 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d903      	bls.n	8007a94 <pvPortMalloc+0xa4>
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f1      	bne.n	8007a78 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a94:	4b33      	ldr	r3, [pc, #204]	; (8007b64 <pvPortMalloc+0x174>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d04b      	beq.n	8007b36 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	4413      	add	r3, r2
 8007aa6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	2308      	movs	r3, #8
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d91f      	bls.n	8007b00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <pvPortMalloc+0xf8>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	613b      	str	r3, [r7, #16]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007afa:	69b8      	ldr	r0, [r7, #24]
 8007afc:	f000 f8f8 	bl	8007cf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <pvPortMalloc+0x17c>)
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	4a18      	ldr	r2, [pc, #96]	; (8007b6c <pvPortMalloc+0x17c>)
 8007b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b0e:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <pvPortMalloc+0x17c>)
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <pvPortMalloc+0x184>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d203      	bcs.n	8007b22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <pvPortMalloc+0x17c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <pvPortMalloc+0x184>)
 8007b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <pvPortMalloc+0x178>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b36:	f7fe ff0d 	bl	8006954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <pvPortMalloc+0x16a>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	60fb      	str	r3, [r7, #12]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <pvPortMalloc+0x168>
	return pvReturn;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3728      	adds	r7, #40	; 0x28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20001240 	.word	0x20001240
 8007b68:	2000124c 	.word	0x2000124c
 8007b6c:	20001244 	.word	0x20001244
 8007b70:	20001238 	.word	0x20001238
 8007b74:	20001248 	.word	0x20001248

08007b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d048      	beq.n	8007c1c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4413      	add	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	4b21      	ldr	r3, [pc, #132]	; (8007c24 <vPortFree+0xac>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <vPortFree+0x44>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <vPortFree+0x62>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	60bb      	str	r3, [r7, #8]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <vPortFree+0xac>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d115      	bne.n	8007c1c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <vPortFree+0xac>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	401a      	ands	r2, r3
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c00:	f7fe fe9a 	bl	8006938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <vPortFree+0xb0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	4a06      	ldr	r2, [pc, #24]	; (8007c28 <vPortFree+0xb0>)
 8007c10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c12:	6938      	ldr	r0, [r7, #16]
 8007c14:	f000 f86c 	bl	8007cf0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c18:	f7fe fe9c 	bl	8006954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c1c:	bf00      	nop
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	2000124c 	.word	0x2000124c
 8007c28:	20001244 	.word	0x20001244

08007c2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007c36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c38:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <prvHeapInit+0xac>)
 8007c3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00c      	beq.n	8007c60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3307      	adds	r3, #7
 8007c4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0307 	bic.w	r3, r3, #7
 8007c52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	4a1f      	ldr	r2, [pc, #124]	; (8007cd8 <prvHeapInit+0xac>)
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c64:	4a1d      	ldr	r2, [pc, #116]	; (8007cdc <prvHeapInit+0xb0>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c6a:	4b1c      	ldr	r3, [pc, #112]	; (8007cdc <prvHeapInit+0xb0>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	4413      	add	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c78:	2208      	movs	r2, #8
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0307 	bic.w	r3, r3, #7
 8007c86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <prvHeapInit+0xb4>)
 8007c8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c8e:	4b14      	ldr	r3, [pc, #80]	; (8007ce0 <prvHeapInit+0xb4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c96:	4b12      	ldr	r3, [pc, #72]	; (8007ce0 <prvHeapInit+0xb4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cac:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <prvHeapInit+0xb4>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <prvHeapInit+0xb8>)
 8007cba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <prvHeapInit+0xbc>)
 8007cc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <prvHeapInit+0xc0>)
 8007cc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cca:	601a      	str	r2, [r3, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000638 	.word	0x20000638
 8007cdc:	20001238 	.word	0x20001238
 8007ce0:	20001240 	.word	0x20001240
 8007ce4:	20001248 	.word	0x20001248
 8007ce8:	20001244 	.word	0x20001244
 8007cec:	2000124c 	.word	0x2000124c

08007cf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cf8:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <prvInsertBlockIntoFreeList+0xa8>)
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e002      	b.n	8007d04 <prvInsertBlockIntoFreeList+0x14>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d8f7      	bhi.n	8007cfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4413      	add	r3, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d108      	bne.n	8007d32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d118      	bne.n	8007d78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b14      	ldr	r3, [pc, #80]	; (8007d9c <prvInsertBlockIntoFreeList+0xac>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d00d      	beq.n	8007d6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	441a      	add	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e008      	b.n	8007d80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <prvInsertBlockIntoFreeList+0xac>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e003      	b.n	8007d80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d002      	beq.n	8007d8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr
 8007d98:	20001238 	.word	0x20001238
 8007d9c:	20001240 	.word	0x20001240

08007da0 <__libc_init_array>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	2600      	movs	r6, #0
 8007da4:	4d0c      	ldr	r5, [pc, #48]	; (8007dd8 <__libc_init_array+0x38>)
 8007da6:	4c0d      	ldr	r4, [pc, #52]	; (8007ddc <__libc_init_array+0x3c>)
 8007da8:	1b64      	subs	r4, r4, r5
 8007daa:	10a4      	asrs	r4, r4, #2
 8007dac:	42a6      	cmp	r6, r4
 8007dae:	d109      	bne.n	8007dc4 <__libc_init_array+0x24>
 8007db0:	f000 f8f0 	bl	8007f94 <_init>
 8007db4:	2600      	movs	r6, #0
 8007db6:	4d0a      	ldr	r5, [pc, #40]	; (8007de0 <__libc_init_array+0x40>)
 8007db8:	4c0a      	ldr	r4, [pc, #40]	; (8007de4 <__libc_init_array+0x44>)
 8007dba:	1b64      	subs	r4, r4, r5
 8007dbc:	10a4      	asrs	r4, r4, #2
 8007dbe:	42a6      	cmp	r6, r4
 8007dc0:	d105      	bne.n	8007dce <__libc_init_array+0x2e>
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc8:	4798      	blx	r3
 8007dca:	3601      	adds	r6, #1
 8007dcc:	e7ee      	b.n	8007dac <__libc_init_array+0xc>
 8007dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd2:	4798      	blx	r3
 8007dd4:	3601      	adds	r6, #1
 8007dd6:	e7f2      	b.n	8007dbe <__libc_init_array+0x1e>
 8007dd8:	080080e4 	.word	0x080080e4
 8007ddc:	080080e4 	.word	0x080080e4
 8007de0:	080080e4 	.word	0x080080e4
 8007de4:	080080e8 	.word	0x080080e8

08007de8 <__retarget_lock_acquire_recursive>:
 8007de8:	4770      	bx	lr

08007dea <__retarget_lock_release_recursive>:
 8007dea:	4770      	bx	lr

08007dec <memcpy>:
 8007dec:	440a      	add	r2, r1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007df4:	d100      	bne.n	8007df8 <memcpy+0xc>
 8007df6:	4770      	bx	lr
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	4291      	cmp	r1, r2
 8007e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e04:	d1f9      	bne.n	8007dfa <memcpy+0xe>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <memset>:
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4402      	add	r2, r0
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d100      	bne.n	8007e12 <memset+0xa>
 8007e10:	4770      	bx	lr
 8007e12:	f803 1b01 	strb.w	r1, [r3], #1
 8007e16:	e7f9      	b.n	8007e0c <memset+0x4>

08007e18 <cleanup_glue>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	6809      	ldr	r1, [r1, #0]
 8007e1e:	4605      	mov	r5, r0
 8007e20:	b109      	cbz	r1, 8007e26 <cleanup_glue+0xe>
 8007e22:	f7ff fff9 	bl	8007e18 <cleanup_glue>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e2e:	f000 b869 	b.w	8007f04 <_free_r>
	...

08007e34 <_reclaim_reent>:
 8007e34:	4b2c      	ldr	r3, [pc, #176]	; (8007ee8 <_reclaim_reent+0xb4>)
 8007e36:	b570      	push	{r4, r5, r6, lr}
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4283      	cmp	r3, r0
 8007e3e:	d051      	beq.n	8007ee4 <_reclaim_reent+0xb0>
 8007e40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e42:	b143      	cbz	r3, 8007e56 <_reclaim_reent+0x22>
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d14a      	bne.n	8007ee0 <_reclaim_reent+0xac>
 8007e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4c:	6819      	ldr	r1, [r3, #0]
 8007e4e:	b111      	cbz	r1, 8007e56 <_reclaim_reent+0x22>
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 f857 	bl	8007f04 <_free_r>
 8007e56:	6961      	ldr	r1, [r4, #20]
 8007e58:	b111      	cbz	r1, 8007e60 <_reclaim_reent+0x2c>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f852 	bl	8007f04 <_free_r>
 8007e60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e62:	b111      	cbz	r1, 8007e6a <_reclaim_reent+0x36>
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f84d 	bl	8007f04 <_free_r>
 8007e6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e6c:	b111      	cbz	r1, 8007e74 <_reclaim_reent+0x40>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f848 	bl	8007f04 <_free_r>
 8007e74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e76:	b111      	cbz	r1, 8007e7e <_reclaim_reent+0x4a>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f843 	bl	8007f04 <_free_r>
 8007e7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e80:	b111      	cbz	r1, 8007e88 <_reclaim_reent+0x54>
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f83e 	bl	8007f04 <_free_r>
 8007e88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e8a:	b111      	cbz	r1, 8007e92 <_reclaim_reent+0x5e>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 f839 	bl	8007f04 <_free_r>
 8007e92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e94:	b111      	cbz	r1, 8007e9c <_reclaim_reent+0x68>
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f834 	bl	8007f04 <_free_r>
 8007e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9e:	b111      	cbz	r1, 8007ea6 <_reclaim_reent+0x72>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 f82f 	bl	8007f04 <_free_r>
 8007ea6:	69a3      	ldr	r3, [r4, #24]
 8007ea8:	b1e3      	cbz	r3, 8007ee4 <_reclaim_reent+0xb0>
 8007eaa:	4620      	mov	r0, r4
 8007eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007eae:	4798      	blx	r3
 8007eb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007eb2:	b1b9      	cbz	r1, 8007ee4 <_reclaim_reent+0xb0>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007eba:	f7ff bfad 	b.w	8007e18 <cleanup_glue>
 8007ebe:	5949      	ldr	r1, [r1, r5]
 8007ec0:	b941      	cbnz	r1, 8007ed4 <_reclaim_reent+0xa0>
 8007ec2:	3504      	adds	r5, #4
 8007ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec6:	2d80      	cmp	r5, #128	; 0x80
 8007ec8:	68d9      	ldr	r1, [r3, #12]
 8007eca:	d1f8      	bne.n	8007ebe <_reclaim_reent+0x8a>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 f819 	bl	8007f04 <_free_r>
 8007ed2:	e7ba      	b.n	8007e4a <_reclaim_reent+0x16>
 8007ed4:	680e      	ldr	r6, [r1, #0]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 f814 	bl	8007f04 <_free_r>
 8007edc:	4631      	mov	r1, r6
 8007ede:	e7ef      	b.n	8007ec0 <_reclaim_reent+0x8c>
 8007ee0:	2500      	movs	r5, #0
 8007ee2:	e7ef      	b.n	8007ec4 <_reclaim_reent+0x90>
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
 8007ee6:	bf00      	nop
 8007ee8:	2000003c 	.word	0x2000003c

08007eec <__malloc_lock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <__malloc_lock+0x8>)
 8007eee:	f7ff bf7b 	b.w	8007de8 <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	20001250 	.word	0x20001250

08007ef8 <__malloc_unlock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__malloc_unlock+0x8>)
 8007efa:	f7ff bf76 	b.w	8007dea <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	20001250 	.word	0x20001250

08007f04 <_free_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4605      	mov	r5, r0
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	d040      	beq.n	8007f8e <_free_r+0x8a>
 8007f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f10:	1f0c      	subs	r4, r1, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bfb8      	it	lt
 8007f16:	18e4      	addlt	r4, r4, r3
 8007f18:	f7ff ffe8 	bl	8007eec <__malloc_lock>
 8007f1c:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <_free_r+0x8c>)
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	b933      	cbnz	r3, 8007f30 <_free_r+0x2c>
 8007f22:	6063      	str	r3, [r4, #4]
 8007f24:	6014      	str	r4, [r2, #0]
 8007f26:	4628      	mov	r0, r5
 8007f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f2c:	f7ff bfe4 	b.w	8007ef8 <__malloc_unlock>
 8007f30:	42a3      	cmp	r3, r4
 8007f32:	d908      	bls.n	8007f46 <_free_r+0x42>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	1821      	adds	r1, r4, r0
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	bf01      	itttt	eq
 8007f3c:	6819      	ldreq	r1, [r3, #0]
 8007f3e:	685b      	ldreq	r3, [r3, #4]
 8007f40:	1809      	addeq	r1, r1, r0
 8007f42:	6021      	streq	r1, [r4, #0]
 8007f44:	e7ed      	b.n	8007f22 <_free_r+0x1e>
 8007f46:	461a      	mov	r2, r3
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	b10b      	cbz	r3, 8007f50 <_free_r+0x4c>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d9fa      	bls.n	8007f46 <_free_r+0x42>
 8007f50:	6811      	ldr	r1, [r2, #0]
 8007f52:	1850      	adds	r0, r2, r1
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d10b      	bne.n	8007f70 <_free_r+0x6c>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	4401      	add	r1, r0
 8007f5c:	1850      	adds	r0, r2, r1
 8007f5e:	4283      	cmp	r3, r0
 8007f60:	6011      	str	r1, [r2, #0]
 8007f62:	d1e0      	bne.n	8007f26 <_free_r+0x22>
 8007f64:	6818      	ldr	r0, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4401      	add	r1, r0
 8007f6a:	6011      	str	r1, [r2, #0]
 8007f6c:	6053      	str	r3, [r2, #4]
 8007f6e:	e7da      	b.n	8007f26 <_free_r+0x22>
 8007f70:	d902      	bls.n	8007f78 <_free_r+0x74>
 8007f72:	230c      	movs	r3, #12
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	e7d6      	b.n	8007f26 <_free_r+0x22>
 8007f78:	6820      	ldr	r0, [r4, #0]
 8007f7a:	1821      	adds	r1, r4, r0
 8007f7c:	428b      	cmp	r3, r1
 8007f7e:	bf01      	itttt	eq
 8007f80:	6819      	ldreq	r1, [r3, #0]
 8007f82:	685b      	ldreq	r3, [r3, #4]
 8007f84:	1809      	addeq	r1, r1, r0
 8007f86:	6021      	streq	r1, [r4, #0]
 8007f88:	6063      	str	r3, [r4, #4]
 8007f8a:	6054      	str	r4, [r2, #4]
 8007f8c:	e7cb      	b.n	8007f26 <_free_r+0x22>
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20001254 	.word	0x20001254

08007f94 <_init>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_fini>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr
